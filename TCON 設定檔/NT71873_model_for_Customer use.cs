init_tcon_define();
public void init_tcon_define()
{
      Title = "NT71873_Customer";
      myreg.Clear();

            myreg.Add(new TCON_REG("PattGen (0x01)", "BIST", "0x0100", "vs_delay_HB", "delay vs[15:8]", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "BIST", "0x0101", "vs_delay_LB", "delay vs[7:0]", "7-0", "RW", "0x10", "0x10", "1"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0102", "CHECKER_PATTERN_L0[11:8]", "AUO L0 Checker pattern[11:8] 1: Gray level 2\n 0: Gray level 1", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0103", "CHECKER_PATTERN_L0[7:0]", "AUO L0 Checker pattern[7:0] 1: Gray level 2\n 0: Gray level 1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0104", "CHECKER_PATTERN_L1[11:8]", "AUO L1 Checker pattern[11:8] 1: Gray level 2\n 0: Gray level 1", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0105", "CHECKER_PATTERN_L1[7:0]", "AUO L1 Checker pattern[7:0] 1: Gray level 2\n 0: Gray level 1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0106", "CHECKER_PATTERN_L2[11:8]", "AUO L2 Checker pattern[11:8] 1: Gray level 2\n 0: Gray level 1", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0107", "CHECKER_PATTERN_L2[7:0]", "AUO L2 Checker pattern[7:0] 1: Gray level 2\n 0: Gray level 1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0108", "CHECKER_PATTERN_L3[11:8]", "AUO L3 Checker pattern[11:8] 1: Gray level 2\n 0: Gray level 1", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0109", "CHECKER_PATTERN_L3[7:0]", "AUO L3 Checker pattern[7:0] 1: Gray level 2\n 0: Gray level 1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0110", "BIST_DEBUG_EN", "Enable bist debug mode", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0110", "BIST_DBG_R[9:8]", "BIST_DBG_R[9:8]", "5-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0110", "BIST_DBG_G[9:8]", "BIST_DBG_G[9:8]", "3-2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0110", "BIST_DBG_B[9:8]", "BIST_DBG_B[9:8]", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0111", "BIST0_DATA_R[9:6]", "Specify 1st pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0111", "BIST0_DATA_G[9:6]", "Specify 1st pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0112", "BIST0_DATA_B[9:6]", "Specify 1st pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0112", "BIST0_PATTERN[3:0]", "Specify 1st pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0113", "BIST1_DATA_R[9:6]", "Specify 2nd pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0113", "BIST1_DATA_G[9:6]", "Specify 2nd pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0114", "BIST1_DATA_B[9:6]", "Specify 2nd pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0114", "BIST1_PATTERN[3:0]", "Specify 2nd pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0115", "BIST2_DATA_R[9:6]", "Specify 3th pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0115", "BIST2_DATA_G[9:6]", "Specify 3th pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0116", "BIST2_DATA_B[9:6]", "Specify 3th pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0116", "BIST2_PATTERN[3:0]", "Specify 3th pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0117", "BIST3_DATA_R[9:6]", "Specify 4th pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0117", "BIST3_DATA_G[9:6]", "Specify 4th pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0118", "BIST3_DATA_B[9:6]", "Specify 4th pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0118", "BIST3_PATTERN[3:0]", "Specify 4th pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0119", "BIST4_DATA_R[9:6]", "Specify 5th pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0119", "BIST4_DATA_G[9:6]", "Specify 5th pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x011A", "BIST4_DATA_B[9:6]", "Specify 5th pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x011A", "BIST4_PATTERN[3:0]", "Specify 5th pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x011B", "BIST5_DATA_R[9:6]", "Specify 6th pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x011B", "BIST5_DATA_G[9:6]", "Specify 6th pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x011C", "BIST5_DATA_B[9:6]", "Specify 6th pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x011C", "BIST5_PATTERN[3:0]", "Specify 6th pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x011D", "BIST6_DATA_R[9:6]", "Specify 7th pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x011D", "BIST6_DATA_G[9:6]", "Specify 7th pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x011E", "BIST6_DATA_B[9:6]", "Specify 7th pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x011E", "BIST6_PATTERN[3:0]", "Specify 7th pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x011F", "BIST7_DATA_R[9:6]", "Specify 8th pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x011F", "BIST7_DATA_G[9:6]", "Specify 8th pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0120", "BIST7_DATA_B[9:6]", "Specify 8th pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0120", "BIST7_PATTERN[3:0]", "Specify 8th pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0121", "BIST8_DATA_R[9:6]", "Specify 9th pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0121", "BIST8_DATA_G[9:6]", "Specify 9th pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0122", "BIST8_DATA_B[9:6]", "Specify 9th pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0122", "BIST8_PATTERN[3:0]", "Specify 9th pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0123", "BIST9_DATA_R[9:6]", "Specify 10th pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0123", "BIST9_DATA_G[9:6]", "Specify 10th pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0124", "BIST9_DATA_B[9:6]", "Specify 10th pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0124", "BIST9_PATTERN[3:0]", "Specify 10th pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0125", "BIST10_DATA_R[9:6]", "Specify 11th pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0125", "BIST10_DATA_G[9:6]", "Specify 11th pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0126", "BIST10_DATA_B[9:6]", "Specify 11th pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0126", "BIST10_PATTERN[3:0]", "Specify 11th pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0127", "BIST11_DATA_R[9:6]", "Specify 12th pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0127", "BIST11_DATA_G[9:6]", "Specify 12th pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0128", "BIST11_DATA_B[9:6]", "Specify 12th pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0128", "BIST11_PATTERN[3:0]", "Specify 12th pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0129", "BIST12_DATA_R[9:6]", "Specify 13th pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0129", "BIST12_DATA_G[9:6]", "Specify 13th pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x012A", "BIST12_DATA_B[9:6]", "Specify 13th pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x012A", "BIST12_PATTERN[3:0]", "Specify 13th pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x012B", "BIST13_DATA_R[9:6]", "Specify 14th pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x012B", "BIST13_DATA_G[9:6]", "Specify 14th pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x012C", "BIST13_DATA_B[9:6]", "Specify 14th pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x012C", "BIST13_PATTERN[3:0]", "Specify 14th pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x012D", "BIST14_DATA_R[9:6]", "Specify 15th pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x012D", "BIST14_DATA_G[9:6]", "Specify 15th pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x012E", "BIST14_DATA_B[9:6]", "Specify 15th pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x012E", "BIST14_PATTERN[3:0]", "Specify 15th pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x012F", "BIST15_DATA_R[9:6]", "Specify 16th pattern R data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x012F", "BIST15_DATA_G[9:6]", "Specify 16th pattern G data", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0130", "BIST15_DATA_B[9:6]", "Specify 16th pattern B data", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0130", "BIST15_PATTERN[3:0]", "Specify 16th pattern type", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0131", "FRAME_CNT[7:0]", "Frame rate, unit frame", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0132", "H_GRAY_REV", "Reverse h gray", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0132", "V_GRAY_REV", "Reverse v gray", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0132", "INV_WB_PAT", "Reverse B/W color", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0132", "FRAME_CNT[8]", "FRAME_CNT[8], 0: frame rate = 0 ~ 255, 1: frame_rate= 256 ~ 511", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0132", "BIST_CNT", "Bist pattern counter", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Chess", "0x0133", "CHESS_V_NUM", "The block number setting for chess pattern in the vertical direction\n 0 : 1 whie block + 1 black block\n 1 : 2 whie blocks + 2 black blocks\n 2 : 4 whie blocks + 4 black blocks \n 3 : 8 whie blocks + 8 black blocks\n 4 : 16 whie blocks + 16 black blocks\n 5 : 32 whie blocks + 32 black blocks\n 6 : 64 whie blocks + 64 black blocks\n 7 : 128 whie blocks + 128 black blocks", "6-4", "RW", "0x04", "0x04", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Chess", "0x0133", "CHESS_H_NUM", "The block number setting for chess pattern in the horizontal direction\n 0 : 1 whie block + 1 black block\n 1 : 2 whie blocks + 2 black blocks\n 2 : 4 whie blocks + 4 black blocks \n 3 : 8 whie blocks + 8 black blocks\n 4 : 16 whie blocks + 16 black blocks\n 5 : 32 whie blocks + 32 black blocks\n 6 : 64 whie blocks + 64 black blocks\n 7 : 128 whie blocks + 128 black blocks", "2-0", "RW", "0x04", "0x04", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "BIST", "0x0134", "bist_en", "manual_bist_en", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0134", "AG_EN", "Auo aging pattern enable", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0134", "AG_PATTERB_SEL", "AUO aging pattern select", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0137", "CHECKER_GRAY1[9:8]", "CHECKER_GRAY1[9:8]", "3-2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0137", "CHECKER_GRAY2[9:8]", "CHECKER_GRAY2[9:8]", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0138", "CHECKER_GRAY1[7:0]", "CHECKER_GRAY1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0139", "CHECKER_GRAY2[7:0]", "CHECKER_GRAY2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013A", "BIST0_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013A", "BIST1_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013A", "BIST2_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013A", "BIST3_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013A", "BIST4_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013A", "BIST5_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013A", "BIST6_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013A", "BIST7_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013B", "BIST8_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013B", "BIST9_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013B", "BIST10_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013B", "BIST11_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013B", "BIST12_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013B", "BIST13_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013B", "BIST14_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013B", "BIST15_PATTERN[4]", "B0 = pattern type 0 extend, B1 = pattern type 1 extend, …… …. B7 = pattern type 7 extend.", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013C", "BIST_DBG_R[7:0]", "BIST_DBG_R[7:0]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013D", "BIST_DBG_G[7:0]", "BIST_DBG_G[7:0]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x013E", "BIST_DBG_B[7:0]", "BIST_DBG_B[7:0]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0140", "PLD_Pattern_enable", "PLD sequence enable", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0140", "PLD_gray_ramp_select", "PLD gray Ramp select used for pattern 17/18/22\nPLD gray Ramp=0,1 for pattern 17, 2,3 for pattern 18", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0141", "RedRamp[1:0]", "for pattern 17/18/22", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0141", "GreenRamp[1:0]", "for pattern 17/18/22", "5-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0141", "BlueRamp[1:0]", "for pattern 17/18/22", "3-2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0141", "Flicker[1:0]", "for pattern 17/18/22", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0142", "PLD_Raster_R[1:0]", "PLD Raster pattern R setting for Pattern 16", "5-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0142", "PLD_Raster_G[1:0]", "PLD Raster pattern G setting g for Pattern 16", "3-2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0142", "PLD_Raster_B[1:0]", "PLD Raster pattern B setting g for Pattern 16", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0143", "PLD_Raster_R[9:2]", "PLD Raster pattern R setting for Pattern 16", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0144", "PLD_Raster_G[9:2]", "PLD Raster pattern G setting g for Pattern 16", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0145", "PLD_Raster_B[9:2]", "PLD Raster pattern B setting g for Pattern 16", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0146", "PLD_Flicker_R[1:0]", "PLD Flicker pattern R setting for Pattern 22", "5-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0146", "PLD_Flicker_G[1:0]", "PLD Flicker pattern G setting for Pattern 22", "3-2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0146", "PLD_Flicker_B[1:0]", "PLD Flicker pattern B setting for Pattern 22", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0147", "PLD_Flicker_R[9:2]", "PLD Flicker pattern R setting for Pattern 22", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0148", "PLD_Flicker_G[9:2]", "PLD Flicker pattern G setting for Pattern 22", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "PLD", "0x0149", "PLD_Flicker_B[9:2]", "PLD Flicker pattern B setting for Pattern 22", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "INX", "0x0150", "inx_mode_en", "1 : enable inx mode, 0 : disable inx mode", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "INX", "0x0150", "inx_patt_sel", "select inx pattern", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "INX", "0x0151", "inx_color_r_a[9:8]", "inx color a Red channel for INX Pattern 6", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "INX", "0x0152", "inx_color_r_a[7:0]", "inx color a Red channel for INX Pattern 6", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "INX", "0x0153", "inx_color_g_a[9:8]", "inx color a Green channel for INX Pattern 6", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "INX", "0x0154", "inx_color_g_a[7:0]", "inx color a Green channel for INX Pattern 6", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "INX", "0x0155", "inx_color_b_a[9:8]", "inx color a Blue channel for INX Pattern 6", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "INX", "0x0156", "inx_color_b_a[7:0]", "inx color a Blue channel for INX Pattern 6", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "INX", "0x0157", "inx_color_r_b[9:8]", "inx color b Red channel for INX Pattern 7", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "INX", "0x0158", "inx_color_r_b[7:0]", "inx color b Red channel for INX Pattern 7", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "INX", "0x0159", "inx_color_g_b[9:8]", "inx color b Green channel for INX Pattern 7", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "INX", "0x015A", "inx_color_g_b[7:0]", "inx color b Green channel for INX Pattern 7", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "INX", "0x015B", "inx_color_b_b[9:8]", "inx color b Blue channel for INX Pattern 7", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "INX", "0x015C", "inx_color_b_b[7:0]", "inx color b Blue channel for INX Pattern 7", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0160", "BIST0_DATA_R[5:0]", "Specify 1st pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0161", "BIST0_DATA_G[5:0]", "Specify 1st pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0162", "BIST0_DATA_B[5:0]", "Specify 1st pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0163", "BIST1_DATA_R[5:0]", "Specify 2nd pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0164", "BIST1_DATA_G[5:0]", "Specify 2nd pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0165", "BIST1_DATA_B[5:0]", "Specify 2nd pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0166", "BIST2_DATA_R[5:0]", "Specify 3rd pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0167", "BIST2_DATA_G[5:0]", "Specify 3rd pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0168", "BIST2_DATA_B[5:0]", "Specify 3rd pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0169", "BIST3_DATA_R[5:0]", "Specify 4th pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x016A", "BIST3_DATA_G[5:0]", "Specify 4th pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x016B", "BIST3_DATA_B[5:0]", "Specify 4th pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x016C", "BIST4_DATA_R[5:0]", "Specify 5th pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x016D", "BIST4_DATA_G[5:0]", "Specify 5th pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x016E", "BIST4_DATA_B[5:0]", "Specify 5th pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x016F", "BIST5_DATA_R[5:0]", "Specify 6th pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0170", "BIST5_DATA_G[5:0]", "Specify 6th pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0171", "BIST5_DATA_B[5:0]", "Specify 6th pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0172", "BIST6_DATA_R[5:0]", "Specify 7th pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0173", "BIST6_DATA_G[5:0]", "Specify 7th pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0174", "BIST6_DATA_B[5:0]", "Specify 7th pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0175", "BIST7_DATA_R[5:0]", "Specify 8th pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0176", "BIST7_DATA_G[5:0]", "Specify 8th pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0177", "BIST7_DATA_B[5:0]", "Specify 8th pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0178", "BIST8_DATA_R[5:0]", "Specify 9th pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0179", "BIST8_DATA_G[5:0]", "Specify 9th pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x017A", "BIST8_DATA_B[5:0]", "Specify 9th pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x017B", "BIST9_DATA_R[5:0]", "Specify 10th pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x017C", "BIST9_DATA_G[5:0]", "Specify 10th pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x017D", "BIST9_DATA_B[5:0]", "Specify 10th pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x017E", "BIST10_DATA_R[5:0]", "Specify 11th pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x017F", "BIST10_DATA_G[5:0]", "Specify 11th pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0180", "BIST10_DATA_B[5:0]", "Specify 11th pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0181", "BIST11_DATA_R[5:0]", "Specify 12th pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0182", "BIST11_DATA_G[5:0]", "Specify 12th pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0183", "BIST11_DATA_B[5:0]", "Specify 12th pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0184", "BIST12_DATA_R[5:0]", "Specify 13th pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0185", "BIST12_DATA_G[5:0]", "Specify 13th pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0186", "BIST12_DATA_B[5:0]", "Specify 13th pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0187", "BIST13_DATA_R[5:0]", "Specify 14th pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0188", "BIST13_DATA_G[5:0]", "Specify 14th pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x0189", "BIST13_DATA_B[5:0]", "Specify 14th pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x018A", "BIST14_DATA_R[5:0]", "Specify 15th pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x018B", "BIST14_DATA_G[5:0]", "Specify 15th pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x018C", "BIST14_DATA_B[5:0]", "Specify 15th pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x018D", "BIST15_DATA_R[5:0]", "Specify 16th pattern R data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x018E", "BIST15_DATA_G[5:0]", "Specify 16th pattern G data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "Sequence", "0x018F", "BIST15_DATA_B[5:0]", "Specify 16th pattern B data LSB", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0191", "auo_chess_v_num[7:0]", "AUO Chess V Num", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0190", "auo_chess_v_num[13:8]", "AUO Chess V Num", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0193", "auo_chess_h_num[7:0]", "AUO Chess H Num", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("PattGen (0x01)", "AUO", "0x0192", "auo_chess_h_num[13:8]", "AUO Chess H Num", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020C", "reg_en_hdr", "specify whether to enable hdr function, useful when host_en_fun_sel = 1'b0\n1'b1: enable hdr mechanism\n1'b0: disable hdr mechanism", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020C", "reg_en_ldc", "specify whether to enable ldc function, useful when host_en_fun_sel = 1'b0\n1'b1: enable ldc mechanism\n1'b0: disable ldc mechanism", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020C", "reg_en_led", "specify whether to enable led dynmaic clk en function, useful when host_en_fun_sel = 1'b0\n1'b1: enable led dynmaic clk en mechanism\n1'b0: disable led dynmaic clk en mechanism", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020C", "reg_en_od", "specify whether to enable od function, useful when host_en_fun_sel = 1'b0\n1'b1: enable od mechanism\n1'b0: disable od mechanism", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020C", "reg_en_greenish_0", "specify whether to enable greenish function0, useful when host_en_fun_sel = 1'b0\n1'b1: enable greenish mechanism\n1'b0: disable greenish mechanism", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020C", "reg_en_greenish_1", "specify whether to enable greenish function1, useful when host_en_fun_sel = 1'b0\n1'b1: enable greenish mechanism\n1'b0: disable greenish mechanism", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020C", "dis_greenish_ck_gating", "specify whether to disable greenish detect clock gating mechanism\n1'b1: disable greenish detect clock gating mechanism\n1'b0: enable greenish detect clock gating mechanism", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020C", "mplus_de_epi_sel", "specify whether to mplus epi de input from tx_de or tx_de_no_vb\n1'b0: from tx_de\n1'b1: from tx_de_no_vb", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020D", "reg_en_pat_gen", "specify whether to enable pat_gen function, useful when host_en_fun_sel = 1'b0 & apr_reg_0e[3] = 1'b1\n1'b1: enable pat_gen mechanism\n1'b0: disable pat_gen mechanism", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020D", "reg_en_cm", "specify whether to enable cm function, useful when host_en_fun_sel = 1'b0\n1'b1: enable cm mechanism\n1'b0: disable cm mechanism", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020D", "reg_en_cabc", "specify whether to enable cabc function, useful when host_en_fun_sel = 1'b0\n1'b1: enable cabc mechanism\n1'b0: disable cabc mechanism\nnvsr應用必須force cabc enable", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020D", "tx_srds_clk_mux_en", "specify whether to enable tx srds pkt_fgm clk function, useful when host_en_fun_sel = 1'b0\n1'b1: enable tx srds pkt_fgm clk mechanism\n1'b0: disable tx srds pkt_fgm clk mechanism", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020D", "reg_en_acc", "specify whether to enable acc function, useful when host_en_fun_sel = 1'b0\n1'b1: enable acc mechanism\n1'b0: disable acc mechanism", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020D", "reg_en_frc_1", "specify whether to enable frc 1 function, useful when host_en_fun_sel = 1'b0\n1'b1: enable frc mechanism\n1'b0: disable frc mechanism", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020D", "tx_disp_clk_mux_en", "specify whether to enable tx disp clk function, useful when host_en_fun_sel = 1'b0\n1'b1: enable tx disp clk mechanism\n1'b0: disable tx disp clk mechanism", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Digital Reg (0x02)", "FunctionalEnableSettings", "0x020D", "tx_clk_lb_mux_en", "specify whether to enable tx lb clk function, useful when host_en_fun_sel = 1'b0\n1'b1: enable tx lb clk mechanism\n1'b0: disable tx lb clk mechanism", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "ProtectKeySettings", "0x0311", "sscg_m_manual[15:8]", "define the mpll sscg M/N m value (pll ratio) manually, useful when mpll_mn_manual_en = 1'b1", "7-0", "RW", "0x08", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "ProtectKeySettings", "0x0312", "sscg_m_manual[7:0]", "define the mpll sscg M/N m value (pll ratio) manually, useful when mpll_mn_manual_en = 1'b1", "7-0", "RW", "0x00", "0x7B", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "ProtectKeySettings", "0x0314", "sscg_n_manual[15:8]", "define the mpll sscg M/N mpll n value (pll ratio) manually, useful when mpll_mn_manual_en = 1'b1", "7-0", "RW", "0x08", "0x00", "1"));
            myreg.Add(new TCON_REG("Analog (0x03)", "ProtectKeySettings", "0x0315", "sscg_n_manual[7:0]", "define the mpll sscg M/N mpll n value (pll ratio) manually, useful when mpll_mn_manual_en = 1'b1", "7-0", "RW", "0x00", "0x1B", "1"));
            myreg.Add(new TCON_REG("Analog (0x03)", "ProtectKeySettings", "0x0317", "phi_m_manual[15:8]", "define the mpll phi M/N mpll m value (pll ratio) manually, useful when mpll_mn_manual_en = 1'b1", "7-0", "RW", "0x08", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "ProtectKeySettings", "0x0318", "phi_m_manual[7:0]", "define the mpll phi M/N mpll m value (pll ratio) manually, useful when mpll_mn_manual_en = 1'b1", "7-0", "RW", "0x00", "0x7B", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "ProtectKeySettings", "0x031A", "phi_n_manual[15:8]", "define the mpll phi M/N mpll n value (pll ratio) manually, useful when mpll_mn_manual_en = 1'b1", "7-0", "RW", "0x08", "0x00", "1"));
            myreg.Add(new TCON_REG("Analog (0x03)", "ProtectKeySettings", "0x031B", "phi_n_manual[7:0]", "define the mpll phi M/N mpll n value (pll ratio) manually, useful when mpll_mn_manual_en = 1'b1", "7-0", "RW", "0x00", "0x1B", "1"));
            myreg.Add(new TCON_REG("Analog (0x03)", "ProtectKeySettings", "0x031C", "mcu_m_manual[7:0]", "define the mpll mcu M/N mpll m value (pll ratio) manually", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "ProtectKeySettings", "0x031D", "mcu_n_manual[7:0]", "define the mpll mcu M/N mpll m value (pll ratio) manually", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x031F", "mpll_ldo_manual[7:0]", "4 mpll internal ldo voltage adjustment by register settings", "7-0", "RW", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x031E", "mpll_ldo_manual[15:8]", "4 mpll internal ldo voltage adjustment by register settings", "7-0", "RW", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x0320", "mcu_m_manual[11:8]", "define the mpll mcu M/N mpll m value (pll ratio) manually", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x0320", "mcu_n_manual[11:8]", "define the mpll mcu M/N mpll m value (pll ratio) manually", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x0321", "ddr_m_manual[15:8]", "define the mpll ddr M/N mpll m value (pll ratio) manually", "7-0", "RW", "0x08", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x0322", "ddr_m_manual[7:0]", "define the mpll ddr M/N mpll m value (pll ratio) manually", "7-0", "RW", "0x00", "0xE1", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x0324", "ddr_n_manual[15:8]", "define the mpll ddr M/N mpll n value (pll ratio) manually", "7-0", "RW", "0x08", "0x00", "1"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x0325", "ddr_n_manual[7:0]", "define the mpll ddr M/N mpll n value (pll ratio) manually", "7-0", "RW", "0x00", "0x1B", "1"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x033B", "tx_rstb[7:0]", "OUTP/N[7:0] transmitter encoder reset control settings\n1'b1: disable reset; 1'b0: enable reset", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x033C", "tx_rstb[15:8]", "OUTP/N[15:8] transmitter encoder reset control settings\n\n1'b1: disable reset; 1'b0: enable reset", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x033D", "tx_rstb[23:16]", "OUTP/N[23:16] transmitter encoder reset control settings\n1'b1: disable reset; 1'b0: enable reset", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x033E", "tx_rstb[31:24]", "OUTP/N[31:24] transmitter encoder reset control settings\n\n1'b1: disable reset; 1'b0: enable reset", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0346", "PU_PORT_ABCD", "port clock tree gating [7:4]=[A,B,C,D]; 1'b1: power up; 1'b0: power down", "7-4", "RW", "0x00", "0x0F", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0347", "A_PU_BUF", " OUTP/N[7:0] transmitter power up control settings, 1'b1: power up; 1'b0: power down", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0348", "B_PU_BUF", " OUTP/N[15:8] transmitter power up control settings, 1'b1: power up; 1'b0: power down", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0349", "C_PU_BUF", " OUTP/N[23:16] transmitter power up control settings, 1'b1: power up; 1'b0: power down", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x034A", "D_PU_BUF", " OUTP/N[31:24] transmitter power up control settings, 1'b1: power up; 1'b0: power down", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x035F", "tx_sw_a0[6:5]", "Adjust TX port A0 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x035F", "tx_sw_a0[4:0]", "Adjust TX port A0 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0360", "tx_sw_a1[6:5]", "Adjust TX port A1 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0360", "tx_sw_a1[4:0]", "Adjust TX port A1 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0361", "tx_sw_a2[6:5]", "Adjust TX port A2 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0361", "tx_sw_a2[4:0]", "Adjust TX port A2 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0362", "tx_sw_a3[6:5]", "Adjust TX port A3 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0362", "tx_sw_a3[4:0]", "Adjust TX port A3 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0363", "tx_sw_a4[6:5]", "Adjust TX port A4 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0363", "tx_sw_a4[4:0]", "Adjust TX port A4 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0364", "tx_sw_a5[6:5]", "Adjust TX port A5 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0364", "tx_sw_a5[4:0]", "Adjust TX port A5 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0365", "tx_rstb_manual_en", "specify whether to enable transmitter reset control by register setting\n1'b1: control transmitter reset by register settings (0x3E[7:0], 0x3D[7:0])\n1'b0: transmitter will release reset after power on reset", "5", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0365", "vcom_sel[4:0]", "transmitter common mode voltage selection\n00000: 0.225V, 01001: 0.45V, 11111: 1.0V with 25mV step", "4-0", "RW", "0x09", "0x09", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0366", "tx_sw_a6[6:5]", "Adjust TX port A6 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0366", "tx_sw_a6[4:0]", "Adjust TX port A6 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0367", "tx_sw_a7[6:5]", "Adjust TX port A7 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0367", "tx_sw_a7[4:0]", "Adjust TX port A7 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0368", "tx_sw_b0[6:5]", "Adjust TX port B0 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0368", "tx_sw_b0[4:0]", "Adjust TX port B0 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0369", "tx_sw_b1[6:5]", "Adjust TX port B1 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0369", "tx_sw_b1[4:0]", "Adjust TX port B1 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x036A", "tx_sw_b2[6:5]", "Adjust TX port B2 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x036A", "tx_sw_b2[4:0]", "Adjust TX port B2 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x036B", "tx_sw_b3[6:5]", "Adjust TX port B3 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x036B", "tx_sw_b3[4:0]", "Adjust TX port B3 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x036C", "tx_sw_b4[6:5]", "Adjust TX port B4 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x036C", "tx_sw_b4[4:0]", "Adjust TX port B4 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x036D", "tx_sw_b5[6:5]", "Adjust TX port B5 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x036D", "tx_sw_b5[4:0]", "Adjust TX port B5 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x036E", "tx_sw_b6[6:5]", "Adjust TX port B6 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x036E", "tx_sw_b6[4:0]", "Adjust TX port B6 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x036F", "tx_sw_b7[6:5]", "Adjust TX port B7 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x036F", "tx_sw_b7[4:0]", "Adjust TX port B7 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0370", "tx_sw_c0[6:5]", "Adjust TX port C0 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0370", "tx_sw_c0[4:0]", "Adjust TX port C0 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0371", "tx_sw_c1[6:5]", "Adjust TX port C0 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0371", "tx_sw_c1[4:0]", "Adjust TX port C1 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0372", "tx_sw_c2[6:5]", "Adjust TX port C0 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0372", "tx_sw_c2[4:0]", "Adjust TX port C2 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0373", "tx_sw_c3[6:5]", "Adjust TX port C0 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0373", "tx_sw_c3[4:0]", "Adjust TX port C3 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0374", "tx_sw_c4[6:5]", "Adjust TX port C0 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0374", "tx_sw_c4[4:0]", "Adjust TX port C4 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0375", "tx_sw_c5[6:5]", "Adjust TX port C5 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0375", "tx_sw_c5[4:0]", "Adjust TX port C5 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0376", "tx_sw_c6[6:5]", "Adjust TX port C6 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0376", "tx_sw_c6[4:0]", "Adjust TX port C6 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0377", "tx_sw_c7[6:5]", "Adjust TX port C7 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0377", "tx_sw_c7[4:0]", "Adjust TX port C7 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0378", "tx_sw_d0[6:5]", "Adjust TX port D0 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0378", "tx_sw_d0[4:0]", "Adjust TX port D0 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0379", "tx_sw_d1[6:5]", "Adjust TX port D1 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x0379", "tx_sw_d1[4:0]", "Adjust TX port D1 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x037A", "tx_sw_d2[6:5]", "Adjust TX port D2 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x037A", "tx_sw_d2[4:0]", "Adjust TX port D2 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x037B", "tx_sw_d3[6:5]", "Adjust TX port D3 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x037B", "tx_sw_d3[4:0]", "Adjust TX port D3 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x037C", "tx_sw_d4[6:5]", "Adjust TX port D4 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x037C", "tx_sw_d4[4:0]", "Adjust TX port D4 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x037D", "tx_sw_d5[6:5]", "Adjust TX port D5 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x037D", "tx_sw_d5[4:0]", "Adjust TX port D5 swing (200mV VOD), FSwing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x037E", "tx_sw_d6[6:5]", "Adjust TX port D6 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x037E", "tx_sw_d6[4:0]", "Adjust TX port D6 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x037F", "tx_sw_d7[6:5]", "Adjust TX port D7 swing (200mV VOD), Swing coarse tune control by pair\n00: 100mV, 01:200mV, 10:320mV, 11: 400mV", "6-5", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL&TXsettings", "0x037F", "tx_sw_d7[4:0]", "Adjust TX port D7 swing (200mV VOD), Swing fine tune control by pair, 6.25%/LSB", "4-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03B8", "PRE_EMP_EN_A0[2:0]", "Pair 0 Pre-emphasis Enable - \n000 : De-emphasis disable (default) \n001 : 25% De-emphasis\n010 : 50% De-emphasis\n011 : 750% De-emphasis\n100 : 100% De-emphasis", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03B8", "PRE_EMP_EN_A1[2:0]", "Pair 1 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03B9", "PRE_EMP_EN_A2[2:0]", "Pair 2 Pre-emphasis Enable", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03B9", "PRE_EMP_EN_A3[2:0]", "Pair 3 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03BA", "PRE_EMP_EN_A4[2:0]", "Pair 4 Pre-emphasis Enable", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03BA", "PRE_EMP_EN_A5[2:0]", "Pair 5 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03BB", "PRE_EMP_EN_A6[2:0]", "Pair 6 Pre-emphasis Enable", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03BB", "PRE_EMP_EN_A7[2:0]", "Pair 7 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03BC", "PRE_EMP_EN_B0[2:0]", "Pair 8 Pre-emphasis Enable", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03BC", "PRE_EMP_EN_B1[2:0]", "Pair 9 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03BD", "PRE_EMP_EN_B2[2:0]", "Pair 10 Pre-emphasis Enable", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03BD", "PRE_EMP_EN_B3[2:0]", "Pair 11 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03BE", "PRE_EMP_EN_B4[2:0]", "Pair 12 Pre-emphasis Enable", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03BE", "PRE_EMP_EN_B5[2:0]", "Pair 13 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03BF", "PRE_EMP_EN_B6[2:0]", "Pair 14 Pre-emphasis Enable", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "TXPLL_Setting", "0x03BF", "PRE_EMP_EN_B7[2:0]", "Pair 15 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03C0", "sscg_ssc_mulfac", "specify mpll sscg ssc mulfac", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03C1", "sscg_ssc_period", "specify mpll sscg ssc period", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03C2", "phi_ssc_malfac", "specify mpll phi ssc mulfac", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03C3", "phi_ssc_period", "specify mpll phi ssc period", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03C4", "ddr_ssc_mulfac", "specify mpll ddr ssc mulfac", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03C5", "ddr_ssc_period", "specify mpll ddr ssc period", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03C6", "sscg_ssc_en", "specify mpll sscg ssc enable\n1'b0: disable ssc\n1'b1: enable ssc", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03C6", "phi_ssc_en", "specify mpll phi ssc enable\n1'b0: disable ssc\n1'b1: enable ssc", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03C6", "ddr_ssc_en", "specify mpll ddr ssc enable\n1'b0: disable ssc\n1'b1: enable ssc", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03C8", "PRE_EMP_EN_C0[2:0]", "Pair 0 Pre-emphasis Enable - \n000 : De-emphasis disable (default) \n001 : 25% De-emphasis\n010 : 50% De-emphasis\n011 : 750% De-emphasis\n100 : 100% De-emphasis", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03C8", "PRE_EMP_EN_C1[2:0]", "Pair 1 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03C9", "PRE_EMP_EN_C2[2:0]", "Pair 2 Pre-emphasis Enable", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03C9", "PRE_EMP_EN_C3[2:0]", "Pair 3 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03CA", "PRE_EMP_EN_C4[2:0]", "Pair 4 Pre-emphasis Enable", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03CA", "PRE_EMP_EN_C5[2:0]", "Pair 5 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03CB", "PRE_EMP_EN_C6[2:0]", "Pair 6 Pre-emphasis Enable", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03CB", "PRE_EMP_EN_C7[2:0]", "Pair 7 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03CC", "PRE_EMP_EN_D0[2:0]", "Pair 8 Pre-emphasis Enable", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03CC", "PRE_EMP_EN_D1[2:0]", "Pair 9 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03CD", "PRE_EMP_EN_D2[2:0]", "Pair 10 Pre-emphasis Enable", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03CD", "PRE_EMP_EN_D3[2:0]", "Pair 11 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03CE", "PRE_EMP_EN_D4[2:0]", "Pair 12 Pre-emphasis Enable", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03CE", "PRE_EMP_EN_D5[2:0]", "Pair 13 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03CF", "PRE_EMP_EN_D6[2:0]", "Pair 14 Pre-emphasis Enable", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Analog (0x03)", "MPLLSettings", "0x03CF", "PRE_EMP_EN_D7[2:0]", "Pair 15 Pre-emphasis Enable", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0600", "major_rev_num", "10h = DPCD Rev. 1.0.\n11h = DPCD Rev. 1.1.\n12h = DPCD Rev. 1.2.\n13h = DPCD Rev. 1.3 (for eDP v1.4 DPRX only).\n14h = DPCD Rev. 1.4.", "7-4", "R", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0600", "minor_rev_num", "", "3-0", "R", "0x01", "0x04", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0601", "MAX_LINK_RATE", "00h=Link Rate Table (eDP 1.4)\n06h = 1.62Gbps/lane.\n0Ah = 2.7Gbps/lane.\n14h = 5.4Gbps/lane.\n1Eh = 8.1Gbps/lane.", "7-0", "R", "0x0A", "0x0A", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0602", "ENHANCED_FRAME_CAP", "0 = Enhanced Framing symbol sequence for BS and SR is not supported.\n1 = Enhanced Framing symbol sequence for BS and SR is supported", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0602", "TPS3_SUPPORTED", "Indicates Link Training Pattern Sequence 3 (TPS3) support.\n0 = TPS3 is not supported.\n1 = TPS3is supported (mandatory for Downstream devices that support HBR2, optional for others).", "6", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0602", "POST_LT_ADJ_REQ_SUPPORTED", "0 = Post-Link Training Adjust Request is not supported.\n1 = Post-Link Training Adjust Request is supported", "5", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0602", "MAX_LANE_COUNT", "Sink Lane Count Cap.\n01h = 1 Lane\n02h = 2 Lane\n04h = 4 Lane", "4-0", "R", "0x04", "0x01", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0603", "TPS4_SUPPORTED", "Indicates Link Training Pattern Sequence 4 (TPS4) support.\n0 = TPS4 is not supported.\n1 = TPS4 is supported ", "7", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0603", "NO_AUX_HANDSHAKE_LINK_TRAINING", "0 = Requires AUX transactions to synchronize to a DPTX.\n1 = Does not require AUX transactions when the link configuration is\nalready known. A DPTX, when it activates its Main-Link, can transmit\nTPS1 and TPS2 (or TPS3 or TPS4) for the minimum of 500us each.", "6", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0603", "MAX_DOWNSPREAD", "0 = No down spread.\n1 = Up to 0.5% down-spread.", "0", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0604", "18V_DP_PWR_CAP", "0 = Downstream device is not capable of producing +18V ±10%.\n1 = Downstream device is capable of producing +18V ±10%\non the DP_PWR pin of its DP connector.", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0604", "12V_DP_PWR_CAP", "0 = Downstream device is not capable of producing +12V ±10%.\n1 = Downstream device is capable of producing +12V ±10%\non the DP_PWR pin of its DP connector.", "6", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0604", "5V_DP_PWR_CAP", "0 = Downstream device is not capable of producing +4.9 to +5.5V\non the DP_PWR pin of its DP connector.\n1 = Downstream device is capable of producing +4.9 to +5.5V\non the DP_PWR pin of its DP connector.", "5", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0604", "NORP", "Number of Receiver Ports = Value + 1.\n0 = One receiver port.\n1 = Two or more receiver ports (see Note below).", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0605", "DETAILED_CAP_INFO_AVAILABLE", "0 = DFP capability field is 1 byte per port, starting from DPCD Address 00080h.\n1 = DFP capability field is 4 bytes per port for detailed capability description starting from DPCD Address 00080h.", "4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0605", "FORMAT_CONVERSION", "0 = This Branch device does not have a format conversion block.\n1 = This DFP has a format conversion block.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0605", "DWN_STRM_PORT_TYPE", "Indicates the DFP type of DFP 0.\n00 = DisplayPort.\n01 = Analog VGA or analog video over DVI-I.\n10 = DVI, HDMI, or DP++.\n11 = Others (this DFP type might not have an EDID in the Sink device: For example, Sink devices on composite video and Svideo ports do not have an EDID, but Sink devices on a wireless or USB interface might).", "2-1", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0605", "DWN_STRM_PORT_PRESENT", "1 = Device is a Branch device and has downstream-facing port(s) (DFP(s)).", "0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0606", "ANSI_8B10B", "0: not support\n1: support", "0", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0607", "OUI_support", "0 = OUI is not supported.\n1 = OUI is supported (OUI and Device Identification mandatory for DPCD Rev. 1.2 and DPCD Rev. 1.4; for DPCD Rev. 1.3 (which is for eDP v1.4 DPRX), support for OUI is an implementation option).", "7", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0607", "MSA_TIMING_PAR_IGNORED", "0 = Sink device requires the MSA timing parameters \n1 = Sink device is capable of rendering the incoming video stream without the above-mentioned MSA timing parameters", "6", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0607", "DWN_STRM_PORT_COUNT", "Value = Number of DFPs.\n0h = No DFPs.", "3-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0608", "BUFFER_SIZE_PER_PORT_0", "Defines units used for defining the buffer size declared in the RECEIVE_PORT0_CAP_1 register (DPCD Address 00009h).\n0 = Buffer size is per-lane.\n1 = Buffer size is per-port and independent of the lane count.", "5", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0608", "BUFFER_SIZE_UNIT_0", "Defines the units to be used for defining the buffer size declared in the RECEIVE_PORT0_CAP_1 register (DPCD Address 00009h).\n0 = Units are in pixel counts.\n1 = Units are in byte counts.", "4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0608", "HBLANK_EXPANSION_CAPABLE_0", "0 = DPRX is not capable of Horizontal Blanking Expansion operation.\n1 = DPRX is capable of Horizontal Blanking Expansion operation.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0608", "ASSOCIATED_TO_PRECEDING_PORT_0", "0 = This port is used for the main isochronous stream. This bit must always be cleared to 0 for Receiver Port 0.\n1 = This port is used for the secondary isochronous stream of the main stream received in the preceding port.", "2", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0608", "LOCAL_EDID_PRESENT_0", "0 = This receiver port does not have a local EDID.\n1 = This receiver port has a local EDID.", "1", "R", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0609", "BUFFER_SIZE_0", "Buffer size = (Value+1) * 32 bytes per lane\nThe maximum is 8 Kbytes per lane.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x060A", "BUFFER_SIZE_PER_PORT_1", "Defines units used for defining the buffer size declared in the RECEIVE_PORT1_CAP_1 register (DPCD Address 0000Bh).\n0 = Buffer size is per-lane.\n1 = Buffer size is per-port and independent of the lane count.", "5", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x060A", "BUFFER_SIZE_UNIT_1", "Defines the units to be used for defining the buffer size declared in the RECEIVE_PORT1_CAP_1 register (DPCD Address 0000Bh).\n0 = Units are in pixel counts.\n1 = Units are in byte counts.", "4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x060A", "HBLANK_EXPANSION_CAPABLE_1", "0 = DPRX is not capable of Horizontal Blanking Expansion operation.\n1 = DPRX is capable of Horizontal Blanking Expansion operation.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x060A", "ASSOCIATED_TO_PRECEDING_PORT_1", "0 = This port is used for the main isochronous stream. This bit must always be cleared to 0 for Receiver Port 1.\n1 = This port is used for the secondary isochronous stream of the main stream received in the preceding port.", "2", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x060A", "LOCAL_EDID_PRESENT_1", "0 = This receiver port does not have a local EDID.\n1 = This receiver port has a local EDID.", "1", "R", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x060B", "BUFFER_SIZE_1", "Buffer size = (Value+1) * 32 bytes per lane\nThe maximum is 8 Kbytes per lane.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x060C", "DWN_STRM_PORT0_HPD", "0 = Downstream port is not HPD aware\n1 = Downstream port is HPD aware", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x060C", "DWN_STRM_PORT0_TYPE", "DWN_STRM_PORTX_TYPE\n000 = Displayport", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x060D", "DWN_STRM_PORT1_HPD", "Bit definition identical to that of DPCD 0x00080.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x060D", "DWN_STRM_PORT1_TYPE", "", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x060E", "DWN_STRM_PORT2_HPD", "Bit definition identical to that of DPCD 0x00080.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x060E", "DWN_STRM_PORT2_TYPE", "", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x060F", "DWN_STRM_PORT3_HPD", "Bit definition identical to that of DPCD 0x00080.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x060F", "DWN_STRM_PORT3_TYPE", "", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0610", "DWN_STRM_PORT4_HPD", "Bit definition identical to that of DPCD 0x00080.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0610", "DWN_STRM_PORT4_TYPE", "", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0611", "DWN_STRM_PORT5_HPD", "Bit definition identical to that of DPCD 0x00080.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0611", "DWN_STRM_PORT5_TYPE", "", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0612", "DWN_STRM_PORT6_HPD", "Bit definition identical to that of DPCD 0x00080.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0612", "DWN_STRM_PORT6_TYPE", "", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0613", "DWN_STRM_PORT7_HPD", "Bit definition identical to that of DPCD 0x00080.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0613", "DWN_STRM_PORT7_TYPE", "", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0614", "DWN_STRM_PORT8_HPD", "Bit definition identical to that of DPCD 0x00080.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0614", "DWN_STRM_PORT8_TYPE", "", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0615", "DWN_STRM_PORT9_HPD", "Bit definition identical to that of DPCD 0x00080.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0615", "DWN_STRM_PORT9_TYPE", "", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0616", "DWN_STRM_PORT10_HPD", "Bit definition identical to that of DPCD 0x00080.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0616", "DWN_STRM_PORT10_TYPE", "", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0617", "DWN_STRM_PORT11_HPD", "Bit definition identical to that of DPCD 0x00080.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0617", "DWN_STRM_PORT11_TYPE", "", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0618", "DWN_STRM_PORT12_HPD", "Bit definition identical to that of DPCD 0x00080.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0618", "DWN_STRM_PORT12_TYPE", "", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0619", "DWN_STRM_PORT13_HPD", "Bit definition identical to that of DPCD 0x00080.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0619", "DWN_STRM_PORT13_TYPE", "", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061A", "DWN_STRM_PORT14_HPD", "Bit definition identical to that of DPCD 0x00080.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061A", "DWN_STRM_PORT14_TYPE", "", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061B", "DWN_STRM_PORT15_HPD", "Bit definition identical to that of DPCD 0x00080.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061B", "DWN_STRM_PORT15_TYPE", "", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061C", "LINK_BW_SET", "Main-Link Bandwidth Setting = Value x 0.27Gbps/lane.\n06h = 1.62Gbps/lane\n0Ah = 2.7Gbps/lane\n14h = 5.4Gbps/lane\n1Eh = 8.1Gbps/lane", "7-0", "RW", "0x0A", "0x0A", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061D", "ENHANCED_FRAME_EN", "0 = Enhanced Framing symbol sequence is not enabled.\n1 = Enhanced Framing symbol sequence is enabled.", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061D", "POST_LT_ADJ_REQ_GRANTED", "An upstream device with a DPTX sets this bit to 1 to grant the POST_LT_ADJ_REQ procedure by the downstream DPRX if the downstream DPRX supports POST_LT_ADJ_REQ, but does not support TPS4.", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061D", "LANE_COUNT_SET", "Source Lane Count Setting\n01h = 1 Lane\n02h = 2 Lane\n04h = 4 Lane", "4-0", "RW", "0x01", "0x01", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061E", "SYMBOL_ERROR_COUNT_SEL", "00 = Count Disparity and Illegal Symbol errors\n01 = Count Disparity errors only\n10 = Count Illegal Symbol errors only\n11 = RESERVED", "7-6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061E", "SCRAMBLING_DISABLE", "0 = DPTX scrambles data symbols before transmission.\n1 = DPTX disables scrambler and transmits all symbols without scrambling.", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061E", "RECOVERED_CLOCK_OUT_EN", "0 = Recovered clock output from a test pad of DP RX is not enabled.\n1 = Recovered clock output from a test pad of DP RX enabled.", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061E", "TRAINING_PATTERN_SELECT", "For DPCD r1.1\n[1:0] TRAINING_PATTERN_SELECT\n00 = Training not in progress (or disabled).\n01 = Link Training Pattern Sequence 1.\n10 = Link Training Pattern Sequence 2.\n11 = RESERVED\n[3:2] LINK_QUAL_PATTERN_SET\n00 = Link quality test pattern not transmitted.\n01 = D10.2 test pattern (unscrambled) transmitted ( same as Link Training Pattern Sequence 1).\n10 = Symbol Error Rate measurement pattern transmitted.\n11 = PRBS7 transmitted\nFor DPCD r1.2 and DPCD r1.3\n[1:0] TRAINING_PATTERN_SELECT\n00 = Training not in progress (or disabled).\n01 = Link Training Pattern Sequence 1.\n10 = Link Training Pattern Sequence 2.\n11 = RESERVED\n[3:2] RESERVED\nFor DPCD r1.4\n0000 = Training not in progress (or disabled).\n0001 = Link Training Pattern Sequence 1.\n0010 = Link Training Pattern Sequence 2.\n0011 = Link Training Pattern Sequence 3.\n0111 = Link Training Pattern Sequence 4.\nAll other values are RESERVED.", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061F", "MAX_PRE_EMPHASIS_REACHED_0", "The transmitter must support at least three levels of pre-emphasis (levels 0, 1 and 2). Support of additional pre-emphasis level is optional.", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061F", "PRE_EMPHASIS_SET_0", "00 = Pre-emphasis level 0.\n01 = Pre-emphasis level 1.\n10 = Pre-emphasis level 2.\n11 = Pre-emphasis level 3.", "4-3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061F", "MAX_SWING_REACHED_0", "The transmitter must support at least three levels of voltage swing (levels 0, 1 and 2).", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x061F", "VOLTAGE_SWING_SET_0", "VOLTAGE SWING SET\n00 = Voltage swing level 0.\n01 = Voltage swing level 1.\n10 = Voltage swing level 2.\n11 = Voltage swing level 3.", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0620", "MAX_PRE_EMPHASIS_REACHED_1", "Bit definition identical to that of DPCD 0x00103.", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0620", "PRE_EMPHASIS_SET_1", "", "4-3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0620", "MAX_SWING_REACHED_1", "", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0620", "VOLTAGE_SWING_SET_1", "", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0621", "MAX_PRE_EMPHASIS_REACHED_2", "Bit definition identical to that of DPCD 0x00103.", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0621", "PRE_EMPHASIS_SET_2", "", "4-3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0621", "MAX_SWING_REACHED_2", "", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0621", "VOLTAGE_SWING_SET_2", "", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0622", "MAX_PRE_EMPHASIS_REACHED_3", "Bit definition identical to that of DPCD 0x00103.", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0622", "PRE_EMPHASIS_SET_3", "", "4-3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0622", "MAX_SWING_REACHED_3", "", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0622", "VOLTAGE_SWING_SET_3", "", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0623", "MSA_TIMING_PAR_IGNORED_EN", "0 = Source device will send valid data for the MSA Timing Parameters\n1 = Source device may send invalid data for these MSA Timing Parameters.", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0623", "SPREAD_AMP", "0 = Main link signal is not downspread\n1 = Main link signal is downspread by equal to or less than 0.5% with a modulation frequency in the range of 30kHz ~ 33kHz", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0624", "SET_ANSI_8B10B", "Selects the Main-Link channel coding specification, as specified in ANSI X3.230-1994, Clause 11.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0625", "SINK_COUNT[6]", "Total number of the Sink devices within this device and those connected to the Downstream ports of this device", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0625", "CP_READY", "Set to 1 when all of the Sink devices (local Sink and those connected to its Downstream ports) are CP-capable.", "6", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0625", "SINK_COUNT[5:0]", "Total number of the Sink devices within this device and those connected to the Downstream ports of this device", "5-0", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0626", "SINK_SPECIFIC_IRQ", "", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0626", "UP_REQ_MSG_RDY", "1 = Source device must read the UP_REQ_MSG from the UP_REQ_MSG DPCD locations and process the Sideband MSG.", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0626", "DOWN_REP_MSG_RDY", "1 = Source device must read the DOWN_REP_MSG from the\nDOWN_REP_MSG DPCD locations and process the Sideband MSG.", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0626", "MCCS_IRQ", "This bit is used by an optional MCCS system in the Sink device", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0626", "CP_IRQ", "This bit is used by an optional content protection system.", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0626", "TOUCH_INTERRUPT(forDPCDrev.1.3", "", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0627", "LANE1_SYMBOL_LOCKED", "Lane0 and Lane1 Link Status", "6", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0627", "LANE1_CHANNEL_EQ_DONE", "", "5", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0627", "LANE1_CR_DONE", "", "4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0627", "LANE0_SYMBOL_LOCKED", "", "2", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0627", "LANE0_CHANNEL_EQ_DONE", "", "1", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0627", "LANE0_CR_DONE", "", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0628", "LANE3_SYMBOL_LOCKED", "Lane2 and Lane3 Link Status", "6", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0628", "LANE3_CHANNEL_EQ_DONE", "", "5", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0628", "LANE3_CR_DONE", "", "4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0628", "LANE2_SYMBOL_LOCKED", "", "2", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0628", "LANE2_CHANNEL_EQ_DONE", "", "1", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0628", "LANE2_CR_DONE", "", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0629", "LINK_STATUS_UPDATED", "Link Status and Adjust Request updated since the last read. Set when updated and cleared after read", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0629", "DOWNSTREAM_PORT_STATUS_CHANGED", "Set in a Branch device when it detects a change in the connection status of any of its DFPs", "6", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0629", "POST_LT_ADJ_REQ_IN_PROGRESS", "1 = DPRX is conducting POST_LT_ADJ_REQ.", "1", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0629", "INTERLANE_ALIGN_DONE", "", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x062A", "RECEIVE_PORT_1_STATUS", "0 = SINK out of synchronization\n1 = SINK in synchronization", "1", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x062A", "RECEIVE_PORT_0_STATUS", "0 = SINK out of synchronization\n1 = SINK in synchronization", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x062B", "PRE_EMPHASIS_LANE1", "00 = Level 0\n01 = Level 1\n10 = Level 2\n11 = Level 3", "7-6", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x062B", "VOLTAGE_SWING_LANE1", "00 = Level 0\n01 = Level 1\n10 = Level 2\n11 = Level 3", "5-4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x062B", "PRE_EMPHASIS_LANE0", "00 = Level 0\n01 = Level 1\n10 = Level 2\n11 = Level 3", "3-2", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x062B", "VOLTAGE_SWING_LANE0", "00 = Level 0\n01 = Level 1\n10 = Level 2\n11 = Level 3", "1-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x062C", "PRE_EMPHASIS_LANE3", "Bit definition identical to that of DPCD 0x00206", "7-6", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x062C", "VOLTAGE_SWING_LANE3", "", "5-4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x062C", "PRE_EMPHASIS_LANE2", "", "3-2", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x062C", "VOLTAGE_SWING_LANE2", "", "1-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x062D", "Error_Count_0[7:0]", "00210h bits 7:0= Error Count Bits 7:0\n00211h bits 6:0 = Error Count Bits 14:8\n00211h bit 7 = Error count valid", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x062E", "Error_count_valid_0", "", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x062E", "Error_Count_0[14:8]", "", "6-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x062F", "Error_Count_1[7:0]", "Bit definition identical to that of DPCD 0x00210,211", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0630", "Error_count_valid_1", "", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0630", "Error_Count_1[14:8]", "", "6-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0631", "Error_Count_2[7:0]", "Bit definition identical to that of DPCD 0x00210,211", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0632", "Error_count_valid_2", "", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0632", "Error_Count_2[14:8]", "", "6-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0633", "Error_Count_3[7:0]", "Bit definition identical to that of DPCD 0x00210,211", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0634", "Error_count_valid_3", "", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0634", "Error_Count_3[14:8]", "", "6-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0635", "PHY_TEST_PATTERN", "1 = Requests the PHY test pattern as specified in the PHY_TEST_PATTERN register (DPCD Address 00248h).", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0635", "TEST_EDID_READ", "0 = No EDID read test is requested.\n1 = EDID read test is requested", "2", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0635", "TEST_PATTERN", "0 = No test pattern is requested.\n1 = Test pattern is requested.", "1", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0635", "TEST_LINK_TRAINING", "0 = No link training test is requested.\n1 = Link training test is requested.", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0636", "TEST_LINK_RATE", "06h = 1.62Gbps/lane\n0Ah = 2.7Gbps/lane\n14h = 5.4Gbps/lane\n1Eh = 8.1Gbps/lane", "7-0", "R", "0x0A", "0x0A", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0637", "TEST_LANE_COUNT", "01h = One lane\n02h = Two lanes\n04h = Four lanes", "4-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0638", "TEST_PATTERN1", "00h = No test pattern transmitted\n01h = Color ramps\n02h = Black and white vertical lines\n03h = Color square", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0639", "TEST_H_TOTAL[15:8]", "Horizontal total of transmitted video stream, in pixel count.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x063A", "TEST_H_TOTAL[7:0]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x063B", "TEST_V_TOTAL[15:8]", "Vertical total of transmitted video stream, in line count.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x063C", "TEST_V_TOTAL[7:0]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x063D", "TEST_H_START[15:8]", "Horizontal active start from Hsync start, in pixel count.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x063E", "TEST_H_START[7:0]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x063F", "TEST_V_START[15:8]", "Vertical active start from Vsync start, in line count.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0640", "TEST_V_START[7:0]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0641", "TEST_HSYNC_POLARITY", "Hsync polarity and width, in pixel count.", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0641", "TEST_HSYNC_WIDTH[14:8]", "", "6-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0642", "TEST_HSYNC_WIDTH[7:0]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0643", "TEST_VSYNC_POLARITY", "Vsync polarity and width, in line count.", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0643", "TEST_VSYNC_WIDTH[14:8]", "", "6-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0644", "TEST_VSYNC_WIDTH[7:0]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0645", "TEST_H_WIDTH[15:8]", "Horizontal active video width, in pixel count (e.g., 400h = 1024 active).", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0646", "TEST_H_WIDTH[7:0]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0647", "TEST_V_HEIGHT[15:8]", "Vertical active video height, in line count (e.g., 300h = 768 active).", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0648", "TEST_V_HEIGHT[7:0]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0649", "TEST_BIT_DEPTH", "Bits per component.\n000 = 6 bits.\n001 = 8 bits.\n010 = 10 bits.\n011 = 12 bits.\n100 = 16 bits.\nAll other values are RESERVED.", "7-5", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0649", "TEST_YCBCR_COEFFICIENTS", "0 = ITU601.\n1 = ITU709.", "4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0649", "TEST_DYNAMIC_RANGE", "0 = VESA range (from 0 to the maximum).\n1 = CEA range (as defined in CEA-861-F, Section 5).", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0649", "TEST_COLOR_FORMAT", "00 = RGB.\n01 = YCbCr 4:2:2.\n10 = YCbCr 4:4:4.\n11 = RESERVED.", "2-1", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0649", "TEST_SYNCHRONOUS_CLOCK", "0 = Link clock and stream clock are asynchronous.\n1 = Link clock and stream clock are synchronous.", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x064A", "TEST_INTERLACED", "0 = Non-interlaced\n1 = Interlaced", "1", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x064A", "TEST_REFRESH_DENOMINATOR", "0 = 1\n1 = 1.001", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x064B", "TEST_REFRESH_RATE_NUMERATOR", "Indicates the refresh rate requested by the Sink device (e.g. 60 = 60Hz numerator).\nRefresh rate = TEST_REFRESH_RATE_NUMERATOR / TEST_REFRESH_DENOMINATOR.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x064C", "TEST_CRC_R_Cr[7:0]", "Stores the 16-bit CRC value of the R or Cr component", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x064D", "TEST_CRC_R_Cr[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x064E", "TEST_CRC_G_Y[7:0]", "Stores the 16-bit CRC value of the G or Y component", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x064F", "TEST_CRC_G_Y[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0650", "TEST_CRC_B_Cb[7:0]", "Stores the 16-bit CRC value of the B or Cb component", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0651", "TEST_CRC_B_Cb[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0652", "TEST_CRC_SUPPORTED", "0 = Sink device does not support CRC.\n1 = Sink device supports CRC.", "5", "R", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0652", "TEST_CRC_COUNT", "4-bit wrap counter that increments each time the TEST_CRCx_x registers are updated.", "3-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0653", "PHY_TEST_PATTERN_SEL", "000 = No test pattern selected\n001 = D10.2 without scrambling\n010 = Symbol_Error_Measurement_Count\n011 = PRBS7\n100 = 80-bit custom pattern transmitted\n101 = CP2520 (HBR2 Compliance EYE pattern)\n110, 111 = RESERVED", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0654", "TEST_EDID_CHECKSUM_WRITE", "0 = No EDID checksum write to the TEST_EDID_CHECKSUM register (DPCD Address 00261h).\n1 = EDID checksum has been written to the TEST_EDID_CHECKSUM register.", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0654", "TEST_NAK", "0 = Writing 0 has no effect on the TEST_REQ state.\n1 = Negative acknowledgement of the TEST_REQ.", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0654", "TEST_ACK", "0 = Writing 0 has no effect on the TEST_REQ state.\n1 = Positive acknowledgement of the TEST_REQ.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0655", "TEST_EDID_CHECKSUM", "In TEST_EDID mode, the checksum of the last EDID block that was read is written here.", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0656", "PHY_SINK_TEST_LANE_EN", "1 = A specific lane on the Sink device is tested for crosstalk, with other lanes receiving a “clock” pattern at approximately half the bit rate.\nIn this mode, the receiver accumulates error counts for the enabled lane in:\n• SYMBOL_ERROR_COUNT_LANE0 register (DPCD Addresses 00210h and 00211h) for Lane 0\n• SYMBOL_ERROR_COUNT_LANE1 register (DPCD Addresses 00212h and 00213h) for Lane 1\n• SYMBOL_ERROR_COUNT_LANE2 register (DPCD Addresses 00214h and 00215h) for Lane 2\n• SYMBOL_ERROR_COUNT_LANE3 register (DPCD Addresses 00216h and 00217h) for Lane 3", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0656", "PHY_SINK_TEST_LANE_SEL", "When the PHY_SINK_TEST_LANE_EN bit (bit 7) is set to 1 (i.e., only one lane is enabled for jitter tolerance tests), this field indicates which lane is enabled.\n00 = Lane 0\n01 = Lane 1\n10 = Lane 2\n11 = Lane 3", "5-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0656", "TEST_SINK_START", "0 = Stop calculating CRC on the next frame\n1 = Start calculating CRC on the next frame", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0657", "SOURCE_IEEE_OUI[7:0]", "intr?", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0658", "SOURCE_IEEE_OUI[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0659", "SOURCE_IEEE_OUI[23:16]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x065A", "SINK_IEEE_OUI[7:0]", "", "7-0", "R", "0x00", "0x38", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x065B", "SINK_IEEE_OUI[15:8]", "", "7-0", "R", "0x00", "0xEC", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x065C", "SINK_IEEE_OUI[23:16]", "", "7-0", "R", "0x00", "0x11", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x065D", "BRANCH_IEEE_OUI[7:0]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x065E", "BRANCH_IEEE_OUI[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x065F", "BRANCH_IEEE_OUI[23:16]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0660", "SET_POWER_STATE", "Must be programmed to 001 (binary) upon power-on reset or an upstream device disconnect.\n001 = Set local Sink device and all downstream Sink devices to D0 (normal operation mode).\n010 = Set local Sink device and all downstream Sink devices to D3 (power-down mode).\n101 = Set Main-Link for local Sink device and all downstream Sink devices to D3 (power-down mode), keep AUX block fully powered, ready to reply within a Response Timeout period of 300us.\nAll other values are RESERVED.", "2-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0661", "DPCD_DISPLAY_CONTROL_CAPABLE", "1 = Indicates that the Display Control registers located at DPCD Addresses 00700h through 007FFh are enabled.", "3", "R", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0661", "FRAMING_CHANGE_CAPABLE", "The FRAMING_CHANGE option for eDP has been deprecated.", "1", "R", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0661", "ALTERNATE_SCRAMBLER_RESET_CAPABLE", "1 = Indicates that this is an eDP device that can use the eDP alternate scrambler reset value of FFFEh.", "0", "R", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0662", "PANEL_SELF_TEST_ENABLE", "Source sets to 1 to enable optional LCD Panel Self Test (see Section 10.2).\nPower-on default value = 0.\nIntended for use as a test mode only.\nChanging the value of this bit while the link is active may produce unpredictable results.", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0662", "FRAMING_CHANGE_ENABLE", "The FRAMING_CHANGE option for eDP has been deprecated.", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0662", "ALTERNATE_SCRAMBLER_RESET_ENABLE", "0 = Disable Alternate Scrambler Seed Reset (ASSR; Method 3a).\n1 = Enable Alternate Scrambler Seed Reset (ASSR; Method 3a).", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0663", "EDP_REV", "00h = eDP v1.1 or lower.\n01h = eDP v1.2.\n02h = eDP v1.3.\n03h = eDP v1.4.\n04h = eDP v1.4a\n05h = eDP v1.4b", "7-0", "R", "0x00", "0x04", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0664", "SET_POWER_CAPABLE", "0 = Indicates that the SET_POWER_STATE field in the SET_POWER & SET_DP_PWR_VOLTAGE register (DPCD Address 00600h, bits 2:0; see DP v1.3) has no effect on the panel.\n1 = Indicates that the panel power state can be controlled through the SET_POWER_STATE field in the SET_POWER & SET_DP_PWR_VOLTAGE register (DPCD Address 00600h, bits 2:0).", "7", "R", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0664", "COLOR_ENGINE_CAPABLE", "1 = Indicates that the Sink device includes color engine capability which is controlled by the COLOR_ENGINE_ENABLE bit in the EDP_DISPLAY_CONTROL register (DPCD Address 00720h, bit 3).", "6", "R", "0x01", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0664", "FRC_ENABLE_CAPABLE", "1 = Indicates that the panel supports the FRC_ENABLE bit in the EDP_DISPLAY_CONTROL register (DPCD Address 00720h, bit 2).", "5", "R", "0x01", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0664", "PANEL_SELF_TEST_AUX_ENABLE_CAPABLE", "1 = Indicates that the panel supports the PANEL_SELF_TEST_ENABLE bit in the eDP_CONFIGURATION_SET register (DPCD Address 0010Ah, bit 7).", "4", "R", "0x01", "0x01", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0664", "PANEL_SELF_TEST_PIN_ENABLE_CAPABLE", "1 = Indicates that the panel supports the LCD_Self_Test eDP connector pin, as described in Section 10.2.", "3", "R", "0x01", "0x01", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0664", "BACKLIGHT_AUX_ENABLE_CAPABLE", "1 = Indicates that the Sink device supports display backlight enable through the BACKLIGHT_ENABLE bit in the EDP_DISPLAY_CONTROL register (DPCD Address 00720h, bit 0).", "2", "R", "0x01", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0664", "BACKLIGHT_PIN_ENABLE_CAPABLE", "1 = Indicates that the Sink device supports display backlight enable through the BL_ENABLE eDP connector pin", "1", "R", "0x01", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0664", "TCON_BACKLIGHT_ADJUSTMENT_CAPABLE", "0 = Indicates that the BL_PWM_DIM eDP connector pin directly controls the backlight controller (the TCON is bypassed).\n1 = Indicates that the TCON has brightness and/or PWM frequency control capabilities for the backligh", "0", "R", "0x01", "0x01", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0665", "VBLANK_BACKLIGHT_UPDATE_CAPABLE", "0 = Indicates that the panel can only apply new settings immediately.\n1 = Indicates that the panel supports the application of all new backlight settings to the next vertical blanking period, as controlled by the VBLANK_BACKLIGHT_UPDATE_ENABLE bit in the EDP_DISPLAY_CONTROL register (DPCD Address 00720h, bit 7).", "7", "R", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0665", "DYNAMIC_BACKLIGHT_CAPABLE", "1 = Indicates that the Sink device includes dynamic backlight control capability through the assertion of the DYNAMIC_BACKLIGHT_ENABLE bit in the EDP_BACKLIGHT_MODE_SET register (DPCD Address 00721h, bit 4).", "6", "R", "0x01", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0665", "BACKLIGHT_FREQ_AUX_SET_CAPABLE", "1 = Indicates that the Source device can set the PWM frequency of the backlight current Source device through the EDP_BACKLIGHT_FREQ_SET register (DPCD Address 00728h).", "5", "R", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0665", "BACKLIGHT_FREQ_PWM_PIN_PASS_THRU_CAPABLE", "1 = Indicates that the ability to directly pass the PWM frequency applied to the BL_PWM_DIM eDP connector pin to the backlight current Source device.\nThis operation is enabled with the BACKLIGHT_FREQ_PWM_PIN_PASS-THRU_ENABLE bit in the EDP_BACKLIGHT_MODE_SET register (DPCD Address 00721h, bit 2).", "4", "R", "0x01", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0665", "BACKLIGHT_AUX_PWM_PRODUCT_CAPABLE", "1 = Indicates that the Source device can combine the backlight brightness levels set through AUX and the BL_PWM_DIM eDP connector pin (through the BACKLIGHT_BRIGHTNESS_CONTROL_MODE field in the EDP_BACKLIGHT_MODE_SET register setting (DPCD Address 00721h, bits 1:0, changing from 00 to 11). This mode of operation uses the product of the two values to set the panel brightness.", "3", "R", "0x01", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0665", "BACKLIGHT_BRIGHTNESS_BYTE_COUNT", "0 = Indicates that the Sink device supports a 1-byte setting for backlight brightness, using only the EDP_BACKLIGHT_BRIGHTNESS_MSB register (DPCD Address 00722h) value.\n1 = Indicates that the Sink device supports a 2-byte setting for the backlight brightness, using both the EDP_BACKLIGHT_BRIGHTNESS_MSB and EDP_BACKLIGHT_BRIGHTNESS_LSB register (DPCD Addresses 00722h and 00723h, respectively) values.", "2", "R", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0665", "BACKLIGHT_BRIGHTNESS_AUX_SET_CAPABLE", "1 = Indicates that the Sink device supports backlight adjustment through only the EDP_BACKLIGHT_BRIGHTNESS_MSB register (1-byte support), or both the EDP_BACKLIGHT_BRIGHTNESS_MSB and\nEDP_BACKLIGHT_BRIGHTNESS_LSB registers (2-byte support) (DPCD Addresses 00722h and 00723h, respectively).", "1", "R", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0665", "BACKLIGHT_BRIGHTNESS_PWM_PIN_CAPABLE", "1 = Indicates that the Sink device supports backlight brightness adjustment through the BL_PWM_DIM eDP connector pin", "0", "R", "0x01", "0x01", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0666", "BACKLIGHT_BRIGHTNESS_BIT_ALIGN", "This field indicates how the sink device interprets the values written into EDP_BACKLIGHT_BRIGHTNESS_MSB and EDP_BACKLIGHT_BRIGHTNESS_LSB registers (DPCD Addresses 00722h and 00723h, respectively).\nSee section 10.1 for full details.\n00 = No indication of behavior. (Note that this value will become reserved in a future revision of the eDP specification.)\n01 = Active control bits are aligned to the most significant bits of EDP_BACKLIGHT_BRIGHTNESS_MSB/_LSB\n10 = Active control bits are aligned to the least significant bits of EDP_BACKLIGHT_BRIGHTNESS_MSB/_LSB\n11 = Reserved", "2-1", "R", "0x00", "0x02", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0666", "OVERDRIVE_ENGINE_ENABLED", "1 = Indicates that the Sink device includes LCD Overdrive functionality.", "0", "R", "0x01", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0667", "VBLANK_BACKLIGHT_UPDATE_ENABLE", "Source device sets this bit to 1 to enable the panel to apply all new backlight settings at the start of the next vertical blanking interval.", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0667", "COLOR_ENGINE_ENABLE", "Source device sets this bit to 1 to enable color engine feature in the Sink device", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0667", "FRC_ENABLE", "Source device sets this bit to 1 to enable 2-bit Frame Rate Control from TCON output that drives column drivers", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0667", "BLACK_VIDEO_ENABLE", "Source device sets this bit to 1 to enable Black Video on display (input video data is overwritten).", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0667", "BACKLIGHT_ENABLE", "Source device sets this bit to 1 to enable the display backlight. This bit has no effect on other display functions.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0668", "UpdateRegionBrightness", "When cleared to 0, the regional backlight values controlled\nwith the REGIONAL_BACKLIGHT_BRIGHTNESS_0 through\nREGIONAL_BACKLIGHT_BRIGHTNESS_14 registers (DPCD\nAddresses 00741h through 0074Fh) can be changed; however, the Sink device\nmust not use the new values to affect backlight brightness.\nWhen set to 1, all updates to the REGIONAL_BACKLIGHT_BRIGHTNESS_0\nthrough REGIONAL_BACKLIGHT_BRIGHTNESS_14 registers\ntake effect immediately, or on the next Vblank, as controlled by the\nVBLANK_BACKLIGHT_UPDATE_ENABLE bit in the\nEDP_DISPLAY_CONTROL register (DPCD Address 00720h, bit 7).", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0668", "REGIONAL_BACKLIGHT_ENABLE", "The Source device sets this bit to 1 to enable the regional\nbacklight feature. When this bit is cleared to 0, the regional backlight control\nregisters have no effect on backlight brightness. Registers located at DPCD\nAddresses 00740h through 0074Fh can still be read and written, even while the\nregional backlight feature is disabled.", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0668", "DYNAMIC_BACKLIGHT_ENABLE", "Source device sets this bit to 1 to enable the dynamic backlight feature in the Sink device.", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0668", "BACKLIGHT_FREQ_AUX_SET_ENABLE", "Source device sets this bit to 1 to control backlight frequency with the EDP_BACKLIGHT_FREQ_SET register (DPCD Address 00728h).\nOverrides the BACKLIGHT_FREQ_PWM_PIN_PASS-THRU_ENABLE bit in the EDP_BACKLIGHT_MODE_SET register (DPCD Address 00721h, bit 2) setting.", "3", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0668", "BACKLIGHT_FREQ_PWM_PIN_PASS_THRU_ENABLE", "When the BACKLIGHT_BRIGHTNESS_CONTROL_MODE field (bits 1:0) is programmed to 00, the Source device sets this bit to 1 to enable the display backlight frequency to be controlled by the BL_PWM_DIM eDP connector pin.\nDoes not apply when the BACKLIGHT_BRIGHTNESS_CONTROL_MODE field is programmed to 01, 10, or 11.\nWrites to this bit are ignored when the BACKLIGHT_FREQ_PWM_PIN_PASS-THRU_CAPABLE bit in the EDP_BACKLIGHT_ADJUSTMENT_CAPABILITIES register (DPCD Address 00702h, bit 4) is cleared to 0, or BACKLIGHT_FREQ_AUX_SET_ENABLE bit in the EDP_BACKLIGHT_MODE_SET register (DPCD Address 00721h, bit 3) is set to 1.", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0668", "BACKLIGHT_BRIGHTNESS_CONTROL_MODE", "00 = Backlight is controlled by the BL_PWM_DIM eDP connector pin.\n01 = Backlight brightness pre-set level (panel default level).\n10 = Backlight is controlled by the EDP_BACKLIGHT_BRIGHTNESS_MSB and EDP_BACKLIGHT_BRIGHTNESS_LSB registers (DPCD Addresses 00722h and 00723h, respectively).\n11 = Backlight is controlled by the product of the BL_PWM_DIM eDP connector pin and the EDP_BACKLIGHT_BRIGHTNESS_MSB and", "1-0", "RW", "0x00", "0x02", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0669", "DISPLAY_BACKLIGHT_BRIGHTNESS_CONTROL[15:8]", "Display backlight brightness control(MSB).", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x066A", "DISPLAY_BACKLIGHT_BRIGHTNESS_CONTROL[7:0]", "Display backlight brightness control(LSB).", "7-0", "RW", "0x00", "0xFF", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x066B", "EDP_PWMGEN_BIT_COUNT", "Source used to program the number of active control bits for DPCD 0x00722 & 723.\nIf the value of bits 4:0 is less than bits 4:0 of DPCD 0x00725, the value of that register will apply.\nIf the value of bits 4:0 is more than bits 4:0 of DPCD 0x00726, the value of that register will apply.", "4-0", "RW", "0x00", "0x08", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x066C", "EDP_PWMGEN_BIT_COUNT_CAP_MIN", "the minimum allowed value for bits 4:0 of DPCD 0x00724. This value is set by the Sink and must have a value of 1 or greater.", "4-0", "R", "0x00", "0x08", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x066D", "EDP_PWMGEN_BIT_COUNT_CAP_MAX", "the maximum allowed value for bits 4:0 of DPCD 0x00724. This value is set by the Sink and must have a value greater than or equal to DPCD 0x00725.", "4-0", "R", "0x00", "0x08", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x066E", "EDP_BACKLIGHT_CONTROL_STATUS", "0 = Indicates normal operation.\n1 = Indicates a backlight fault condition that prevents proper operation of the backlight.", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x066F", "EDP_BACKLIGHT_FREQ_SET", "Display backlight PWM frequency control value.", "7-0", "RW", "0x00", "0x80", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0670", "EDP_BACKLIGHT_FREQ_CAP_MIN[17:10]", "EDP_BACKLIGHT_FREQ_CAP_MIN_MSB", "7-0", "R", "0x00", "0x02", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0671", "EDP_BACKLIGHT_FREQ_CAP_MIN[9:2]", "EDP_BACKLIGHT_FREQ_CAP_MIN_MID", "7-0", "R", "0x00", "0xA3", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0672", "EDP_BACKLIGHT_FREQ_CAP_MIN[1:0]", "EDP_BACKLIGHT_FREQ_CAP_MIN_LSB", "1-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0673", "EDP_BACKLIGHT_FREQ_CAP_MAX[17:10]", "EDP_BACKLIGHT_FREQ_CAP_MAX_MSB", "7-0", "R", "0x00", "0xFF", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0674", "EDP_BACKLIGHT_FREQ_CAP_MAX[9:2]", "EDP_BACKLIGHT_FREQ_CAP_MAX_MID", "7-0", "R", "0x00", "0xFF", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0675", "EDP_BACKLIGHT_FREQ_CAP_MAX[1:0]", "EDP_BACKLIGHT_FREQ_CAP_MAX_LSB", "1-0", "R", "0x00", "0x03", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0676", "EDP_DBC_MINIMUM_BRIGHTNESS_SET", "the minimum backlight brightness level", "4-0", "RW", "0x00", "0x08", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0677", "EDP_DBC_MAXIMUM_BRIGHTNESS_SET", "the maximum backlight brightness level", "4-0", "RW", "0x00", "0x14", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0678", "PSR_SUPPORT_AND_VERSION", "00h = Panel Self Refresh Capability is not supported (default).\n01h = Panel Self Refresh capability is supported, PSR version is 01h (PSR).\n02h = Panel Self Refresh with Selective Update (SU) capability is supported, PSR version is 02h (PSR2). Y-coordinates for SU are not supported. Supported by eDP v1.4 (and higher).\n03h = Panel Self Refresh with SU capability and Y-coordinate supported, PSR version is 03h (PSR2 + Y-coordinate). Supported by eDP v1.4a.", "7-0", "R", "0x01", "0x01", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0679", "PSR2_SU_GRANULARITY_REQUIREMENT", "Panel Self Refresh 2 Selective Update Granularity Required\nNew to eDP v1.4b.\n0 = SU coordinates are not required to adhere to any granularity\n1 = SU coordinates are required to adhere to the granularity specified in DPCD Addresses 00072h through 00074h.", "5", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0679", "Y_COORDINATE_REQUIREMENT", "0 = Y-coordinate is not required for PSR2 SU (default).\n1 = Y-coordinate is required for PSR2 SU.", "4", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0679", "PSR_SETUP_TIME", "0h = 330μs. Default.\n1h = 275μs\n2h = 220μs\n3h = 165μs\n4h = 110μs\n5h = 55μs\n6h = 0μs\n7h = RESERVED", "3-1", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0679", "LINK_TRAINING_REQUIREMENT", "0 = Needs training on PSR exit when the Main-Link is disabled (default).\n1 = No Link Training is needed on PSR exit when the Main-Link is disabled.\nThe Sink device must be able to lock within five Idle Patterns after the Main-Link is turned ON.", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067A", "ENABLE_PSR2_PROTOCOL", "New to eDP v1.4a for PSR2 support. Bit description updated in eDP v1.4b.\n0 = Enable PSR.\n1 = Enable PSR2. Set this bit when the Source device will be enabling PSR2 operation, as indicated by the VSC SDP.", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067A", "IRQ_HPD_WITH_LINK_CRC_ERRORS", "New to eDP v1.4 for PSR2 support.\nNote: This bit is applicable only to PSR2. For PSR, the Sink device shall ignore this bit.\n0 = Do not generate an IRQ_HPD when there is a CRC mismatch (default).\n1 = Generate an IRQ_HPD upon finding a CRC mismatch.", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067A", "SU_REGION_SCAN_LINE_CAPTURE_INDICATION", "New to eDP v1.4 for PSR2 support.\nNote: This bit is applicable only to PSR2. For PSR, the Sink device shall ignore this bit.\n0 = Sink device must capture the SU region, starting with the active scan line, and immediately followed by a BE symbol after the PSR SDP. Similarly, with END indication, the Sink device must stop after completely capturing the modification in the scan line followed by a BE symbol after the PSR SDP.\n1 = Sink device must capture the SU region, starting with the second active scan line, and immediately followed by a BE symbol after the PSR SDP. Similarly, with END indication, the Sink device must stop after completely capturing the modification in the second scan line followed by a BE symbol after the PSR SDP.", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067A", "FRAME_CAPTURE_INDICATION", "0 = Sink device must capture the first active frame after PSR entry indication is received (default).\n1 = Sink device must capture the second active frame after PSR entry indication is received. The Sink device can use the additional time for powering up the RFB.", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067A", "CRC_VERIFICATION_IN_PSR_ACTIVE", "0 = CRC verification is performed by the Source device. The Sink device must calculate CRC, but is not required to compare the CRCs received from the Source device on the Main-Link with internally generated CRCs, and update the LINK CRC ERROR bit in the SU/PSR2 ERROR STATUS register (DPCD Address 02006h, bit 0). The Source device will not send CRCs to the Sink device. \n1 = CRC verification is performed by the Sink device.", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067A", "SOURCE_TRANSMITTER_STATE_IN_PSR_ACTIVE", "0 = Source device can shut down the Main-Link transmitter after the BS symbol sequence of the ninth line after the end of the static frame transmitted to the Sink device with entry into a PSR active state (default).\n1 = Main-Link transmitter remains active during PSR active states", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067A", "SOURCE_ENABLE_SELF_REFRESH_FEATURE_IN_SINK", "0 = Disable (default).\n1 = Enable. The Sink device will honor the VSC SDP’s PSR fields. Setting this bit does not automatically force the Sink device into a PSR active state.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067B", "VSCSDPUNCORRECTABLEERROR", "", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067B", "RFB_STORAGE_ERROR", "0 = No internal error\n1 = Internal Error", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067B", "LINK_CRC_ERROR", "0 = No CRC error\n1 = CRC mismatch or CRC not received from Source", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067C", "SINK_PSR_CAPABILITY_CHANGE", "0 = No PSR/PSR2 capability change.\n1 = Sink device requested PSR/PSR2 capability change", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067D", "SINK_SELF_REFRESH_STATUS", "0h = PSR_State 0: Sink PSR inactive state. Default.\n1h = PSR_State 1: Sink PSR active capture and display on Source timing\n2h = PSR_State 2: Sink PSR active display from RFB\n3h = PSR_State 3: Sink PSR active Capture and display on Sink timing\n4h = PSR_State 4: Sink PSR active Capture and display, timing resync\n5h = Reserved\n6h = Reserved\n7h = SINK INTERNAL ERROR. The Sink must generate an IRQ_HPD and must report “7” until the Source disables the PSR function.", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067E", "LAST_ACTUAL_SYNCHRONIZATION_LATENCY_IN_SINK", "0h = Sink will synchronize by the first frame received after PSR exit.\n1h = Sink will synchronize by the second frame received after PSR exit.\n2h = Sink will synchronize by the third frame received after PSR exit.\n3h = Sink will synchronize by the fourth frame received after PSR exit.\n…\n7h = Sink will synchronize by the eighth frame received after PSR exit.\n8h = Maximum number of frames for Sink to synchronize is more than 8 frames.", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067E", "MAX_RESYNC_FRAME_COUNT", "0h = Sink has synchronized to the first frame received after PSR exit.\n1h = Sink has synchronized to the second frame received after PSR exit.\n2h = Sink has synchronized to the third frame received after PSR exit.\n3h = Sink has synchronized to the fourth frame received after PSR exit.\n…\n7h = Sink has synchronized to the eighth frame received after PSR exit.\n8h = Sink took more than 8 frames to synchronize.", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067F", "AUX_Y_Coordinate_Valid", "Current value of the Y-Coordinate_Valid bit in the Sink device.", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067F", "AUX_Last_Line_of_SU", "Last scan line of the SU region was received.", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067F", "AUX_First_Line_of_SU", "First scan line of the SU region was received.", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067F", "AUX_SU_Valid", "Current value of the SU_VALID bit in the Sink device.", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067F", "AUX_CRC_Valid", "Current value of the CRC_VALID bit in the Sink device.", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067F", "AU_Update_RFB", "Current value of the UPDATE_RFB or Selective Update bit in the Sink device.", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x067F", "AUX_PSR_state", "Current value of the PSR_STATE bit in the Sink device.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0680", "LINK_QUAL_LANE0_SET", "000 = Link quality test pattern not transmitted.\n001 = D10.2 test pattern (unscrambled) transmitted (same as Link Training Pattern Sequence 1).\n010 = Symbol Error Rate Measurement Pattern transmitted.\n011 = PRBS7 transmitted.\n100 = 80-bit custom pattern transmitted.\n101 = CP2520 (HBR2 Compliance EYE pattern) transmitted.\n110, 111 = RESERVED.", "2-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0681", "LINK_QUAL_LANE1_SET", "Bit definition identical to that of DPCD 0x0010B.", "2-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0682", "LINK_QUAL_LANE2_SET", "Bit definition identical to that of DPCD 0x0010B.", "2-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0683", "LINK_QUAL_LANE3_SET", "Bit definition identical to that of DPCD 0x0010B.", "2-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0684", "i2c_speed", "00000001b = 1Kbps.\n00000010b = 5Kbps.\n00000100b = 10Kbps.\n00001000b = 100Kbps.\n00010000b = 400Kbps.\n00100000b = 1Mbps.\n01000000b = RESERVED.\n10000000b = RESERVED.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0685", "I2C_SPEED_CONTROL_BIT_MAP", "If the I2C Speed Control Capabilities Bit Map register (DPCD Address 0000Ch) is 00h (indicating that the DPRX does not implement a physical I2C bus or does not support I2C speed control), then a write to this register is ignored and a read returns 00h. Otherwise, bit values in this register are assigned to I2C speeds.\n00000001b = 1Kbps.\n00000010b = 5Kbps.\n00000100b = 10Kbps.\n00001000b = 100Kbps.\n00010000b = 400Kbps.\n00100000b = 1Mbps.\n01000000b = RESERVED.\n10000000b = RESERVED", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0686", "LANE1_MAX_POST_CURSOR2_REACHED", "", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0686", "LANE1_POST_CURSOR2_SET", "", "5-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0686", "LANE0_MAX_POST_CURSOR2_REACHED", "", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0686", "LANE0_POST_CURSOR2_SET", "", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0687", "LANE1_MAX_POST_CURSOR2_REACHED", "", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0687", "LANE1_POST_CURSOR2_SET", "", "5-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0687", "LANE0_MAX_POST_CURSOR2_REACHED", "", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0687", "LANE0_POST_CURSOR2_SET", "", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0688", "dp_dpcd_0030c", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0689", "dp_dpcd_00320", "for MBO application", "7-0", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x068A", "dp_dpcd_00321", "for MBO application", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x068C", "SRMV[7:0]", "SRMV: Mutex Value M ", "7-0", "W", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x068D", "SRMV[15:8]", "", "7-0", "W", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x068E", "SRMV[23:16]", "", "7-0", "W", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x068F", "SRMV[31:24]", "", "7-0", "W", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0690", "NLSC:NLTStopCapable", "1: Sink support receive NLT STOP from the source.", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0690", "NCC:NLTcapableConfiguration", "1: Sink has saved link training & equalization settings for the link configuration as currently set and is capable of completing NLT in the selected configuration.", "2", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0690", "CCDN:ConfigurationchangesduringNLT", "1: Sink is capable of accepting changes in the set link configuration(lanes/link speed) during NLT transition.", "1", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0690", "NLTC:NoLinkTrainingCapability", "1: Sink is capable of No Link Training", "0", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0691", "MLIR:MaxLCDImageRetentionTime", "MLIR[7:0]: The maximum amount of time is us for which the sink will allow imahe retention.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0694", "NLTO:NLTStop", "Source set 1 before power down the link to indicate the Source will NOT use NLT to restore to Link On State.", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0694", "NLST:NLTStart", "1: the source is requesting to initiate No Link Training protocal Exit from Link Off. ", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0695", "SRCP:resynccapanility", "0: Immediately resync or double buffering\n2:Frame lock alignment method (Required)", "7-5", "R", "0x00", "0x02", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0695", "SXR:SRExitRequest", "SRC support signaling from the GC to indicate exit the Self-Refresh. All method provided can be used simultaneously.\n0: Unsupported\n2. Sideband. Signaling SR EXIT via the AUX/I2C BUS", "4-3", "R", "0x00", "0x02", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0695", "SER:SREnterRequest", "SRC support signaling from the GC to indicate entry into Self-Refresh. All method provided can be used simultaneously.\n0: Unsupported\n2. Sideband. Signaling SR EXIT via the AUX/I2C BUS", "2-1", "R", "0x00", "0x02", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0695", "SRCC:Sparedrefreshcapability", "GC would read this bit at LCD power on \n1: Sparse Self refresh capable", "0", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0696", "SCL:SRCCompressedLFB", "1: SRC support the use of compression", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0696", "S3D:SRD3DStereo", "1: SRC support catching L/R stereoscopic frames", "6", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0696", "STD:SRCPlayBack", "1: SRC suppport catching 2 or more frames to support repeated pattern playback within the SRC.", "5", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0696", "SPD:SRCPanelDither", "1: SRC support dither", "4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0696", "SEL:SREntryLatency", "The minimum number of frames required from SR Entry Request until the SRC has cached the frame\n0: 1 frame", "3-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0697", "SRGC:GCPowercontrol", "Support GC power/sleep control signals", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0697", "SRSS:SpreadSpectrum", "Support Spread Spectrum", "6", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0697", "SRED:SRCinterruptonSR:EntryDone", "Support SRC generating an interrupt on SR-Enter Done ISND", "5", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0697", "SREC:SRCinterruptonSR:EntryCaching", "Support SRC generating an interrupt on SR-Enter Caching ISCD", "4", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0697", "SRFL:ConfigurableFrameLock", "Support generating the SRC on different timing events as defined by SRFE", "3", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0697", "SRFC:SRCFrameLock", "Support SRC control of the frame start by holding/stalling GC's start of frame. The mode is controlled via SBFE bit.", "2", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0697", "SRBR:BrustRefresh", "Support Maximum link speed with buffering from GC-SRC interfaces.", "1", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0697", "SSPC:SeparatePixelClocks", "Separate pixel clock & timing domain are supported for GC-SRC & SRC-Panel Timings. This is required for full Burst mode support.", "0", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0698", "SRBS:SRBufferSize", "SRC LFB size in 100's KB minus 1. 255=25.6MB", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0699", "SMPC:MaxPixelClock[7:0]", "The maximum pixel clock supported by the GC-SRC side of the interface in units of 20KHz e.q: 65535=1310700MHz", "7-0", "R", "0x00", "0x78", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x069A", "SMPC:MaxPixelClock[15:8]", "", "7-0", "R", "0x00", "0x69", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x069B", "SRCL:SRRequesttoCacheLatency[7:0]", "The latency or mimimum timing requirement in Lines from a SR Entry Request until the beginning of frame caching.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x069C", "SRCL:SRRequesttoCacheLatency[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x069D", "SRBL:BurstSRRequesttoCacheLatency[7:0]", "Definition Same as SRCL as in Burst mode.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x069E", "SRBL:BurstSRRequesttoCacheLatency[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x069F", "SIMF", "SIMF: Immediately Frame Lock Capability\nThis bit indicates the SRC’s ability to support the Immediate FRAME_LOCK# Edge feature defined in SRFI\n0 - Not supported\n1 - Supports Immediate FRAME_LOCK# Edge", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x069F", "SRBV", "SRBV: SRC send VSync signal to Backlight controller only by caching frame\n0 – Not supported\n1 – Support sending VSync signal to Backlight controller only by caching frame", "6", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x069F", "SCSC:CrashSyncCapabilities", "0: unknow\n1: Support Crash Sync type 1(SRCS& SRFP) only while outside the active region.\n2. Support Crash Sync Typ21 as well as Type3 (Immediately) allowing reset at any point during the frame\n3: Support a combined Crash Sync Type1 & SR update as a single atomic operation\n7: Support a combined Crash Sync Type1 & Type3 & SR update as a single atomic operation", "4-2", "R", "0x00", "0x03", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x069F", "SRAO:SREnteratPowerOn", "Support performing SR Enter on power on is set", "1", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x069F", "SRNV:SRFBRetention", "Support preserving SRC LFB & SRC State in low-power standby mode and self-initializing display after power on.", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A0", "SEXM:SRExitMask", "1: enable the setting of 0x340[6]", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A0", "SEXR:SRExitRequest", "1: SR exit request", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A0", "SEYM:SREntryMask", "1: enable the setting of 0x340[4]", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A0", "SER:SREntryRequest", "1: SR entry request", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A0", "SRM:SRResyncMak", "1: enable the setting of 0x340[2]", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A0", "SRDR:SRDisableResync", "1: disable resync \n0: enable resync", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A0", "SENM:SRenableMask", "1: enable the setting of 0x340[0]", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A0", "SEC:SREnableControl", "1: SR enable\n0: SR disable", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A1", "SXSM:SidebandExitMask", "1: enable the setting of 0x341[6]", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A1", "SXSE:SidebandExitSelect", "1: allows the sideband interface to initiate an SR Exit Request through SRC control register", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A1", "SESM:SidebandEntryMask", "1: enable the setting of 0x341[4]", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A1", "SESE:SidebandEntrySelect", "1: allows the sideband interface to initiate an SR Entry Request through SRC control register", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A1", "SPTM:SRTimingLatchMask", "1: enable the setting of 0x341[2]", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A1", "SPTL:SRC:PanelTimingLatch", "Same as GSTL but controll the SRC to panel timing", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A1", "GSTM:GSTimingLatchMask", "1: enable the setting of 0x341[0]", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A1", "GSTL:GC:SRCTimingLatch", "Detetmine wheather the GC-SRC Timing Control register changes are buffered and applied on the start of the next frame or applied immediately in the current frame.\n0: changes are applied on the vertical frame after the upcoming FRAME_LOCK# or GC Vsync in which they are latched.\n1: the update of Vsync is disable allowing software to asynchronously change the timing registers, however the timings are still latched and only applied after a write operation to the PTVB/PTVSB register.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A2", "SSDE:SRCSideDitherenable", "1: dither enable\n0: dither disable", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A2", "SBFE:GPUorSRCframeLock", "1: SRC FRAME_Lock#: SRC is required to stall/hold-off generation of the start of next frame until the GC sends Vsync only when the GC-SRC interface is active.\n0: GC FRAME_Lock#: SRC will generate a FRAME_LOCK# as needed for the GC.", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A2", "SBSE:Buffered", "1:enable Buffered/Burst Refresh mode", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A2", "S3DS:3DStereoEnable", "1: 3D enable", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A2", "SCNF:CaptureFrames", "The number of frames to capture minus 1. 0: one frame to be captured", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A3", "ISVM:SRverticalblankIRQmask", "1: enable the setting of 0x343[6]", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A3", "ISVB:interruptonSRverticalblank", "1: SRC shall assert IRQ on the interface when the SRC is at the end of active raster and beginning of SRC driven vertical blank.", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A3", "ISBM:SRbufferoverflowIRQmask", "1: enable the setting of 0x343[4]", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A3", "ISBO:InterruptonSRbufferoverflow", "1: SRC shall assert IRQ on the interface when the SR buffer overflow.", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A3", "ISXM:SRExit", "1: enable the setting of 0x343[2]", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A3", "ISXD:interruptonSRExitResyncDone", "1: SRC shall assert IRQ on the interface when the SR Exit and Resync is complete.", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A3", "ISEM:SRentryIRQmask", "1: enable the setting of 0x343[0]", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A3", "ISEF:InterruptonSRentryFailure", "1: SRC shall assert IRQ on the interface when the SR Entry can not be completed.SRC can not enter SR on the next Vsync.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A4", "ISXM:ExtensionEventIRQMask", "1: enable the setting of 0x344[6]", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A4", "ISXE:InterruptonExtensionEvent", "1: SRC shall assert IRQ on the interface if any of the functions in the interface entensions needs to signal an event.", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A4", "ISNM:SREntryDoneIRQMask", "1: enable the setting of 0x344[4]", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A4", "ISND:InterruptonSREntryDone", "1: SRC shall assert IRQ on the interface when the SR Entry is done the frame is cached.", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A4", "ISCM:SREntryCachingIRQMask", "1: enable the setting of 0x344[2]", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A4", "ISCD:InterruptonSREntryCaching", "1: SRC shall assert IRQ on the interface when the SR Entry is in progress the frame is being cached.", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A4", "IEAM:InterruptEnableMask", "1: enable the setting of 0x344[0]", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A4", "IEAC:GlobalInterruptEnable", "1: Enables the HPD_IRQ line to be asserted on the events listed & enabled as below and above.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A5", "ISPM:PnaelEventIRQMask", "1: enable the setting of 0x345[0]", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A5", "ISPE:InterruptonPanelEvent", "1: SRC shall assert IRQ on the interface if any component on TCON-external component busses,signals an IRQ event.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A6", "SRRD:ResyncDelay", "Sparse Frame-Lock Resync mode: The source specifies to the SRC the number of additional Source(GC) frames to delay before Switch Commit of scan-out control back to the GC.\nBuffered/Burst Refresh mode:The source specifies to the SRC the number of additional Source(GC) frames to to delay after FRAME-LCOK# before the Source output should be cached in SRC-lock frame-buffer.", "7-6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A6", "SRCF:ContinuousFrameLock", "1: Frame-Lock# signal is output continuous\n0: Frame-Lock# is output once.", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A6", "SRRM:ResyncMethod", "0: immediate resync\n2: Frame-Lock# resync mode", "2-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A7", "SVCB", "SVCB: SRC VSync signal Control to Backlight controller\n0 – SRC sends VSync signal to BLCs per frame VSync\n1 – SRC sends VSync signal to BLCs only when caching frame", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A7", "SRFI", "SRFI: FRAME_LOCK# Edge Immediately\nControls when the FRAME_LOCK# Edge is generated in response to the SR-Update/SR-Exit request.\n0 - Generated based on SRFE setting (default)\n1 - Generated immediately when SRC received SR-Update/SR-Exit request", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A7", "SRFE:Frame_LockEdgeSelect", "0: Generate on the leading edge of SRC Vsync\n1: Generate on the trailing edge of SRC Vsync\n2: Generate on the leading edge of SRC Vblk\n3: Generate on the trailing edge of SRC Vblk", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A8", "SRBO:Bufferoverrun", "1: buffer overflow", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A8", "SRBS:BrustRefreshstate", "0: reserved\n1: SR burst resync\n2 & 3: reserved", "6-5", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A8", "SRSF:SRStateFailurecondition", "0: No error\n1: SR Entry triggered but not ready to enter SR: SR entry Fail\n2: SR resync fail\n3:Re-Enter request during Resync", "4-3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A8", "SRST:SelfRefreshstate", "0: SR disable\n1: SR idle\n2: SR entry triggered\n3: SR entry/caching\n4. SR entry ready\n5: SR Active\n7: SR exit triggered\n8: SR resync", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A9", "SRCT:PanelcomponentEvent", "0: No Actions\n1: GC action is requested by the panel", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A9", "SRCR:Panel:drivenRefreshRequired", "0: No Actions\n1: GC driven refresh is requested by the panel", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A9", "SRCV:DuringBlank", "0: SRC raster is within the Active Display period\n1: SRC raster scan out is within the Hblanking\n2: SRC raster scan out is within the Vblanking", "4-3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A9", "SCOM:CompressionActive", "1: SRC is now using compression", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A9", "SINM:InterruptMask", "1: enable the setting of 0x349[0]", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06A9", "SINT:InterruptStatus", "1: Indicates the HPD_IRQ has asserted due to an SRC generated event", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06AA", "SPST:SRCLCDInversionPattern", "0: negative polarity\n1: positive polaruty", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06AA", "SPS4:SRCLCDExtendedInversionPattern", "Combined with SPST reflect the inversion pattern when 3 or 4 phase patterns are in use.", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06AA", "SRS4:SRCFBRetention", "0: No retention\n1: SRC LFB content shall be reatained while powering down. Requires SRNV\n2: 1: SRC LFB content shall be reatained after powering down.Requires SRNV & SRAO", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06AB", "SRIS:SRCInterruptSource", "Bit 0: SR State Event\nBit 1: SR State Failure\nBit 2: Buffer overflow\nBit 3: Blanking interval\nBit 4: Extension event\nBit 5: Panel driving event", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06B0", "SRPC:pixelclock[7:0]", "The pixel clolck in Hz divided by 20k supporting a maximum pixel clock of a value 65535=1310700MHz", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06B1", "SRPC:pixelclock[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06B2", "SRHA:HorizontalActive[7:0]", "Hactive in pixels", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06B3", "SRHA:HorizontalActive[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06B4", "SRHBL:HorizontalBlanking[7:0]", "Hblk in pixels", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06B5", "SRHBL:HorizontalBlanking[15:7]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06B6", "SRHFP:HorizontalFrontPorch[7:0]", "H front porch in pixels", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06B7", "SRHFP:HorizontalFrontPorch[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06B8", "SRHBP:HorizontalBackPorch[7:0]", "H back porch in pixels", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06B9", "SRHBP:HorizontalBackPorch[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06BA", "SRHS:HozizontalSync", "H sync in pixels", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06BB", "SRHSP:HorizontalSyncPolarity", "1: positive going sync pluse", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06BB", "SRHB:HorizontalBorder", "H border in pixels", "6-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06BC", "SRVA:VerticalActive[7:0]", "Vactive in lines", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06BD", "SRVA:VerticalActive[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06BE", "SRVBL:verticalblanking[7:0]", "Vblk in lines", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06BF", "SRVBL:verticalblanking[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06C0", "SRVFP:VerticakFrontPorch[7:0]", "V front porch in lines", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06C1", "SRVFP:VerticakFrontPorch[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06C2", "SRVBP:VerticakBackPorch[7:0]", "V back porch in lines", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06C3", "SRVBP:VerticakBackPorch[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06C4", "SRVS:Verticalsync[7:0]", "V sync in lines", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06C5", "SRVP:VerticalSyncPolarity", "1: positive going sync pluse", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06C5", "SRVB:VerticalBorder", "V border in lines", "6-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06C6", "SRFP:FieldPolarityRequest", "0: normal inversion pattern sequencing\n1: repeat same polarity pattern as the last frame\n2: other values reserved for the feature", "5-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06C6", "SRCS:CeashSyncRequest", "000: normal\n001: Type1 reset when outside of the Active/Fetching region(delayed reset)\n011: Type 3 reset immediately\n101: Combined: Reset outside the Active and initiate an SR update\n111: Combined: Reset immediately and initiate an SR update", "2-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06C8", "SCSRCpixelclock[7:0]", "Same as SRC-panel Timing", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06C9", "SCSRCpixelclock[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06CA", "PTHA:Hotizontalactuve[7:0]", "Hactive in pixels", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06CB", "PTHA:Hotizontalactuve[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06CC", "PTHBL:HorizontalBlanking[7:0]", "Hblk in pixels", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06CD", "PTHBL:HorizontalBlanking[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06CE", "PTHFP:HorizontalFrontPorch[7:0]", "H front porch in pixels", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06CF", "PTHFP:HorizontalFrontPorch[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06D0", "PTHBP:HorizontalBackPorch[7:0]", "H back porch in pixels", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06D1", "PTHBP:HorizontalBackPorch[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06D2", "PTHS:HorizontalSync", "H sync in pixels", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06D3", "PTHSP:HorizontalSyncPolarity", "1: positive going sync pluse", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06D3", "PTHB:HorizontalBorder", "H border in pixels", "6-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06D4", "PTVA:VeritcalActive[7:0]", "Vactive in lines", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06D5", "PTVA:VeritcalActive[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06D6", "PTBL:Verticalblanking[7:0]", "Vblk in lines", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06D7", "PTBL:Verticalblanking[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06D8", "PTVFP:veriticalfrontporch[7:0]", "V front porch in lines", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06D9", "PTVFP:veriticalfrontporch[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06DA", "PTVBP:veriticalbackporch[7:0]", "V back porch in lines", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06DB", "PTVFP:veriticalbackporch[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06DC", "PTVS:verticalsync", "V sync in lines", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06DD", "PTVSP:verticalsyncpolarity", "1: positive going sync pluse", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06DD", "PTVB:verticalborder", "V border in lines", "6-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E0", "GMLI", "GMLI: GC Main Link Indicator\nThis bit indicates the state of GC main-link. \nGC shall update this bit while the panel is in self-refresh to indicate GC’s main-link status. \nThe SRC/TCON can use this bit to turn-on/off its main-link drivers and start/stop monitoring main-link.\nSRC/TCON should use this bit as a GC main-link status only when in self-refresh mode.\nWhen set to 0 indicates GC’s main link is either powered-off or invalid.\nWhen set to 1 indicates GC’s main link is powered-on and valid.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E1", "GMOC", "GMOC: Gamut Mapping Capable", "3", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E1", "TMOC", "TMOC: ITU BT-2390 tone-mapping Capable", "2", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E1", "PQDC", "PQDC: Decoding SMPTE ST 2084 Capable", "1", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E1", "RBAC", "RBAC: Automatic Regional Backlight Capable", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E2", "GMOE", "GMOE: Gamut Mapping Enable", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E2", "TMOE", "TMOE: ITU BT-2390 tone-mapping Enable", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E2", "PQDE", "PQDE: Decoding SMPTE ST 2084 Enable", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E2", "HDRO", "HDRO: HDR Blocks override", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E2", "RBAE", "RBAE: Automatic Regional Backlight Enable", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E3", "RMDB", "RMDB: Minimum Dimming Backlight", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E4", "RXDB", "RXDB: Maximum Dimming Backlight", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E5", "RBUL", "RBUL: Regional Backlight Update Latency\nThe latency, or minimum time required, in lines, from the end of all regional backlight updates until the beginning of active video period, which SRC and BLC need for regional backlight setup.", "7-0", "R", "0x00", "0x14", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E6", "RBYE", "RBYE: Regional Backlight Y region extension\nThis field extends the MSB of Y_REGION_CAP by 2 bits\nFor example, 00704h bit 7:4 = 0x7, 00386h bit 7:6 = 0x2\nThen X region is (0x2 << 4 | 0x7) = 39, i.e. 40 regions", "7-6", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E6", "RBXE", "RBXE: Regional Backlight X region extension\nThis field extends the MSB of X_REGION_CAP by 2 bits\nFor example, 00704h bit 3:0 = 0x3, 00386h bit 5:4 = 0x1\nThen X region is (0x1 << 4 | 0x3) = 19, i.e. 20 regions", "5-4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E6", "RBRE", "RBRE: Regional Backlight Region Extended\n0: Support VESA eDP standard\n1: Support RBXE and RBYE", "3", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E6", "RBSC", "RBSC: Regional Backlight SDP Capability\n0 – Only support VESA eDP RBL control from DPCD registers if DPCD 00704h supported.\n1 – Support Regional Backlight Control SDP.", "2", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E6", "RBUC", "RBUC: Regional Backlight Update Trigger Capabilities\n0 – Follow VESA eDP v1.4 and above, using DPCD 00721, bit 6 (Update Region Brightness) as a trigger to update regional backlight brightness.\n1 – Support DPCD offset 00740 bit 7 as update trigger instead of 00721 bit 6.\n2 – Support ignoring any specific DPCD trigger (in VESA eDP v1.4 and above, that is, ignore DPCD 00721 bit 6).\n The SRC is expected to ack immediately after a DPCD burst write and should not wait for the other backlight settings to be applied.\n3 – Support both 1 and 2", "1-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E7", "RBSE", "RBSE: Regional Backlight SDP Enable\nThe panel shall enable processing the Extension SDP packets for RBL updates based on this bit being set and NVIDIA OUI being written to DPCD registers 0300h-0302h.\n0 – Disable SDP, and using VESA eDP RBL control from DPCD registers if DPCD 00704h supported.\n1 – Enable Regional Backlight Control SDP for RBL control.", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E7", "RBUM", "RBUM: Regional Backlight Update Trigger Mode\nThis field specifies the update trigger mode for DPCD based regional backlight updates.\n0 – Follow VESA eDP v1.4 and above, using DPCD 00721, bit 6 (Update Region Brightness) as a trigger to update regional backlight brightness.\nTCON drives backlight PWM duty-cycle - The regional settings for all the regions set via REGIONAL_BACKLIGHT_BRIGHTNESS_0 through EGIONAL_BACKLIGHT_BRIGHTNESS_14 registers,\nwill take effect immediately or on the following Vblank after the trigger write, as controlled by the VBLANK_BACKLIGHT_UPDATE_ENABLE bit in the EDP_DISPLAY_CONTROL_REGISTER register (DPCD Address 00720h, bit 7).\nExternal Back Light Controllers (BLC) manages the backlight/PWM duty cycle - TCON shall send regional backlight brightness data to BLCs upon the trigger.\nThe brightness data in BLCs take will be effective on the following VSync (observed via SRC_VSync signal from SRC/TCON).\n1 – Enable to use DPCD offset 00740 bit 7 as update trigger instead of 00721 bit 6.\nTCON drives backlight PWM duty-cycle – The behavior is same as for mode 0\nExternal Back Light Controllers (BLC) manages the backlight PWM duty-cycle– The behavior is same as for mode 0\n2 – Ignore any specific DPCD trigger (in VESA eDP v1.4 and above, that is, ignore DPCD 00721 bit 6). \nThe SRC is expected to ack immediately after a DPCD burst write and should not wait for the other backlight settings to be applied.\nTCON drives backlight PWM duty-cycle - then REGIONAL_BACKLIGHT_BRIGHTNESS_0 through REGIONAL_BACKLIGHT_BRIGHTNESS_14 registers take effect immediately (shows up on the panel), or on the next Vblank, as controlled by the VBLANK_BACKLIGHT_UPDATE_ENABLE bit in the EDP_DISPLAY_CONTROL_REGISTER register (DPCD Address 00720h, bit 7).\nExternal Back Light Controllers (BLC) manages the backlight/PWM duty cycle - TCON shall send regional backlight brightness data to BLCs immediately upon receiving from GC and should be ready to receive the next DPCD burst from GC in parallel.\nThe brightness data in BLCs takes effect (shows up on the panel) on the following VSync (observed via SRC_VSync signal from SRC/TCON).\n3 – Reserved.", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E8", "VBWM:VeritcalBlackingMin[7:0]", "Minumin Vblk in lines", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06E9", "VBWM:VeritcalBlackingMin[15:8]", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06EA", "VBMX:VeritcalBlackingMax[7:0]", "Maximum Vblk in lines", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06EB", "VBMX:VeritcalBlackingMax[15:8]", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06EC", "HBMN:HorizontalBlackingMin[7:0]", "Minumin Hblk in pixels", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06ED", "HBMN:HorizontalBlackingMin[15:8]", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06EE", "HBMX:HorizontalBlankingMax[7:0]", "Maximum Hblk in pixels", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06EF", "HBMX:HorizontalBlankingMax[15:8]", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06F0", "DSFC:LastSelftrfreshframecount[7:0]", "The number of frames since in Self Refresh.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06F1", "DSFC:LastSelftrfreshframecount[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06F2", "DSFC:LastSelftrfreshframecount[23:16]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06F3", "DSRD:RolloverDetect", "Set to 1 if the lower bits has rolled over since the last read of the reigster.", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06F3", "DSFC:LastSelftrfreshframecount[30:24]", "The number of frames since in Self Refresh.", "6-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06F4", "XTCSL:CurrentScanLine[7:0]", "The current scanline from line 0 at the leading edge of Vsync and counting through the blanking, active and blanking region.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06F5", "XTCSL:CurrentScanLine[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06F6", "XTCSL:CurrentScanLine[23:16]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06F7", "SRTS:SRCPanelSideTimingStaus", "0: idle (pass through mode)\n1: Active region\n2: Hblk\n3: Vblk", "2-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06F8", "FRTF:TotalSelf:RefreshFramCount[7:0]", "The total number of frames since in self refresh.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06F9", "FRTF:TotalSelf:RefreshFramCount[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06FA", "FRTF:TotalSelf:RefreshFramCount[23:16]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06FB", "FRRD:RolloverDetect", "Set to 1 if the lower bits has rolled over since the last read of the reigster.", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06FB", "FRTF:TotalSelf:RefreshFramCount[30:24]", "The total number of frames since in self refresh.", "6-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06FC", "SRCX:Extensionregisters[7:0]", "Value of X means the offset of the NVSR extension registers.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06FD", "SRCX:Extensionregisters[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06FE", "SRCX:Extensionregisters[23:16]", "", "7-0", "R", "0x00", "0x0F", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x06FF", "SRCX:Extensionregisters[31:24]", "", "7-0", "R+F705", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0700", "EXTENDED_RECEIVER_CAPABILITY_FIELD_PRESENT", "0 = Not present.\n1 = Present at DPCD Addresses 02200h through 022FFh.", "7", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0700", "TRAINING_AUX_RD_INTERVAL", "Link Status/Adjust Request read interval during Main-Link Training.\n00h = 100us for the Main-Link Clock Recovery phase and 400us for\nthe Main-Link Channel Equalization phase.\n01h = 4ms all.\n02h = 8ms all.\n03h = 12ms all.\n04h = 16ms all.\nAll other values are RESERVED", "6-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0701", "ALTERNATE_I2C_PATTERN_CAP", "0 = Does not support alternate I2C patterns.\n1 = Supports alternate I2C patterns.", "1", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0701", "FORCE_LOAD_SENSE_CAP", "0 = Does not support VGA force load adaptor sense mechanism.\n1 = Supports VGA force load adaptor sense mechanism.", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0702", "SUPPORTED_LINK_RATE1_LSB(1.62G)", "Indicates that the receiver supports a nominal per-lane link rate\non the Main-Link equal to (16-bit link rate capability value) × 200kHz.", "7-0", "R", "0x00", "0xA4", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0703", "SUPPORTED_LINK_RATE1_MSB", "", "7-0", "R", "0x00", "0x1F", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0704", "SUPPORTED_LINK_RATE2_LSB(2.16G)", "Indicates that the receiver supports a nominal per-lane link rate\non the Main-Link equal to (16-bit link rate capability value) × 200kHz.", "7-0", "R", "0x00", "0x30", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0705", "SUPPORTED_LINK_RATE2_MSB", "", "7-0", "R", "0x00", "0x2A", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0706", "SUPPORTED_LINK_RATE3_LSB(2.43G)", "Indicates that the receiver supports a nominal per-lane link rate\non the Main-Link equal to (16-bit link rate capability value) × 200kHz.", "7-0", "R", "0x00", "0x76", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0707", "SUPPORTED_LINK_RATE3_MSB", "", "7-0", "R", "0x00", "0x2F", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0708", "SUPPORTED_LINK_RATE4_LSB(2.7G)", "Indicates that the receiver supports a nominal per-lane link rate\non the Main-Link equal to (16-bit link rate capability value) × 200kHz.", "7-0", "R", "0x00", "0xBC", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0709", "SUPPORTED_LINK_RATE4_MSB", "", "7-0", "R", "0x00", "0x34", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x070A", "SUPPORTED_LINK_RATE5_LSB(3.24G)", "Indicates that the receiver supports a nominal per-lane link rate\non the Main-Link equal to (16-bit link rate capability value) × 200kHz.", "7-0", "R", "0x00", "0x48", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x070B", "SUPPORTED_LINK_RATE5_MSB", "", "7-0", "R", "0x00", "0x3F", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x070C", "SUPPORTED_LINK_RATE6_LSB(4.32G)", "Indicates that the receiver supports a nominal per-lane link rate\non the Main-Link equal to (16-bit link rate capability value) × 200kHz.", "7-0", "R", "0x00", "0x60", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x070D", "SUPPORTED_LINK_RATE6_MSB", "", "7-0", "R", "0x00", "0x54", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x070E", "SUPPORTED_LINK_RATE7_LSB(5.4G)", "Indicates that the receiver supports a nominal per-lane link rate\non the Main-Link equal to (16-bit link rate capability value) × 200kHz.", "7-0", "R", "0x00", "0x78", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x070F", "SUPPORTED_LINK_RATE7_MSB", "", "7-0", "R", "0x00", "0x69", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0710", "SUPPORTED_LINK_RATE8_LSB(8.1G)", "Indicates that the receiver supports a nominal per-lane link rate\non the Main-Link equal to (16-bit link rate capability value) × 200kHz.", "7-0", "R", "0x00", "0x34", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0711", "SUPPORTED_LINK_RATE8_MSB", "", "7-0", "R", "0x00", "0x9E", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0712", "PM_State2aSupport", "0 = PM_State 2a (FW_STANDBY) is not supported.\n1 = PM_State 2a (FW_STANDBY) is supported.", "1", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0712", "ALPM_CAP", "0 = Receiver does not support ALPM (default).\n1 = Receiver supports ALPM; PM_State 3a (FW_SLEEP) is supported, by default", "0", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0713", "AUX_FRAME_SYNC_CAP", "0 = AUX_FRAME_SYNC is not supported (default).\n1 = AUX_FRAME_SYNC is supported.", "0", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0714", "GUID", "• DPCD Address 00030h contains the first octet (time_low, MSB)\n• DPCD Address 0003Fh contains the last octet (node(5))", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0724", "RX_GTC_VALUE_0", "RX_GTC_VALUE[7:0]", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0725", "RX_GTC_VALUE_1", "RX_GTC_VALUE[15:8]", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0726", "RX_GTC_VALUE_2", "RX_GTC_VALUE[23:16]", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0727", "RX_GTC_VALUE_3", "RX_GTC_VALUE[31:24]", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0728", "TX_GTC_VALUE_PHASE_SKEW_EN", "0 = DPTX resets its GTC value to the received RX_GTC_VALUE and uses the delta between its GTC value and the received RX_GTC_VALUE to frequency adjust its GTC value.\n1 = DPTX resets its GTC value to the received RX_GTC_VALUE, but does NOT use the delta between its GTC value and the received RX_GTC VALUE to frequency adjust its GTC value; in other words, the RX_GTC_VALUE is used for phase adjust only.", "1", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0728", "RX_GTC_MSTR_REQ", "0 = RX does not request to be a GTC Master.\n1 = RX requests to be a GTC Master.", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0729", "RX_GTC_FREQ_LOCK_DONE", "0 = DPRX has not realized the GTC_FREQ_LOCK_DONE\n1 = DPRX has realized the GTC_FREQ_LOCK_DONE\nUsed only when the DPTX is the GTC Master.", "0", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x072A", "RX_GTC_PHASE_SKEW_OFFSET_0", "RX_GTC_PHASE_SKEW_OFFSET7:0", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x072B", "RX_GTC_PHASE_SKEW_OFFSET_1", "RX_GTC_PHASE_SKEW_OFFSET15:8", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x072C", "UPSTREAM_IS_SRC", "0 = Upstream device is either a Source device predating DP Standard Ver.1.2 or a Branch device.\n1 = Set to 1 by a DP Source device to indicate to the downstream device the presence of a Source device, not a Branch device.", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x072C", "UP_REQ_EN", "0 = Prohibits the Downstream DPRX from originating/forwarding an UP_REQ message transaction.\n1 = Allows the Downstream DPRX to originating/forwarding an UP_REQ message transaction.", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x072C", "MST_EN", "0 = UFP will transmit audio/visual data in Single Stream Format.\n1 = UFP will transmit audio/visual data in Multi-Stream Format.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x072D", "TX_GTC_SLAVE_CAP", "0 = DPTX cannot operate as a GTC Slave.\n1 = DPTX can operate as a GTC Slave.", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x072D", "TX_GTC_CAP", "0 = DPTX does not have the GTC capability.\n1 = DPTX has the GTC capability.", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x072D", "LINK_RATE_SET", "See eDP v1.4.", "2-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x072E", "ALPMLockErrorIRQ_HPDEnable", "0 = IRQ_HPD on ALPM lock timeout error is not enabled (default).\n1 = IRQ_HDP on ALPM lock timeout is enabled.", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x072E", "ALPMEnable", "0 = ALPM is not enabled (default).\n1 = ALPM is enabled.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x072F", "IRQ_HPDEnable", "0 = IRQ_HPD is not enabled (default).\n1 = IRQ_HPD is enabled.", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x072F", "AUX_FRAME_SYNCEnable", "0 = AUX_FRAME_SYNC is not enabled (default).\n1 = AUX_FRAME_SYNC is enabled. Leave this bit set to enable the", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0730", "DPRX_SLEEP_WAKE_TIMEOUT_PERIOD_GRANTED", "0 = An upstream DP device has not granted the extended wake timeout period\n1 = An upstream DP device has granted the wake timeout period requested by a downstream DP device ", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0731", "TX_GTC_VALUE7:0", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0732", "TX_GTC_VALUE15:8", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0733", "TX_GTC_VALUE23:16", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0734", "TX_GTC_VALUE31:24", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0735", "RX_GTC_VALUE_PHASE_SKEW_EN", "0 = DPRX resets its GTC value to the received TX_GTC_VALUE (TX_GTC_VALUE7:0, TX_GTC_VALUE15:8, TX_GTC_VALUE23:16, and TX_GTC_VALUE31:24 registers (DPCD Addresses 00154h through 00157h, respectively)) and uses the delta between its GTC value and the received TX_GTC_VALUE to frequency adjust its GTC value.\n1 = DPRX resets its GTC value to the received TX_GTC_VALUE, but does NOT use the delta between its GTC value and the received TX_GTC_VALUE to frequency adjust its GTC value; in other words, the TX_GTC_VALUE is used only for GTC value phase adjust only.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0736", "TX_GTC_FREQ_LOCK_DONE", "0 = DPTX has not realized the GTC_FREQ_LOCK_DONE.\n1 = DPTX has realized the GTC_FREQ_LOCK_DONE.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0737", "TX_GTC_PHASE_SKEW_OFFSET7:0", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0738", "TX_GTC_PHASE_SKEW_OFFSET15:8", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0739", "TX_VBE_MASTER_VALUE7:1", "", "7-1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0739", "AUX_FRAME_SYNCValid", "", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x073A", "TX_VBE_MASTER_VALUE15:8", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x073B", "TX_VBE_MASTER_VALUE23:16", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x073C", "TX_VBE_MASTER_VALUE31:24", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x073D", "TRAINING_SCORE_LANE0", "Usage is Sink device implementation-specific.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x073E", "TRAINING_SCORE_LANE1", "Usage is Sink device implementation-specific.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x073F", "TRAINING_SCORE_LANE2", "Usage is Sink device implementation-specific.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0740", "TRAINING_SCORE_LANE3", "Usage is Sink device implementation-specific.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0741", "DeviceIdentificationString", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0747", "HardwareMajorRevision", "", "7-4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0747", "HardwareMinorRevision", "", "3-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0748", "Firmware", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0749", "Firmware", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x074A", "CEC_IRQ", "1 = CEC-Tunneling-over-AUX status changed", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x074A", "LOCK_ACQUISITION_REQUEST", "0 = DPRX is not requesting a DPTX to initiate lock acquisition.\n1 = DPRX is requesting a DPTX to initiate lock acquisition.", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x074A", "RX_GTC_MSTR_REQ_STATUS_CHANGE", "The status of RX_GTC_MSTR_REQ has changed (readable in the RX_GTC_MSTR_REQ bit in the RX_GTC_MSTR_REQ register (DPCD Address 00058h, bit 0)", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x074B", "CONNECTED_OFF_ENTRY_REQUESTED", "1 = A downstream DP device sets this bit to 1 and generates an IRQ_HPD pulse to request entry to the CONNECTED_OFF power state.", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x074B", "HDMI_LINK_STATUS_CHANGED", "1 = Upstream DP device must read the downstream HDMI link status registers of the DP-to-HDMI protocol converter.", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x074B", "STREAM_STATUS_CHANGED", "1 = Upstream Source device must re-check the Stream Status with the QUERY_STREAM_ENCRYPTION_STATUS message", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x074B", "LINK_STATUS_CHANGED", "1 = Upstream device must read the Link/Sink Device Status field (DPCD Addresses 00200h through 002FFh; see Table 2-141)", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x074B", "RX_CAP_CHANGED", "1 = Upstream device must read the Receiver Capability field (DPCD Addresses 00000h through 000FFh; see Table 2-139).", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x074C", "ALPMLockTimeoutErrorStatus", "0 = No error (default).\n1 = ALPM lock timeout error.\nIf set to 1, the error status persists until cleared.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x074D", "ForDPCDRev.1.0throughDPCDRev.1.2andDPCDRev.1.4LANE0_1_STATUS_ESI(DPCD0x202)ForDPCDRev.1.3(eDPv1.4DPRX)onlyforDPCDrev.1.3", "", "7-0", "R\n\nRW\n", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x074E", "AUX_FRAME_SYNCLOCKERROR", "1 = Indicates that the Sink device either failed to achieve AUX_FRAME_SYNC lock, or could not successfully maintain lock, during periods of Main-Link video stream inactivity.", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x074F", "DPRX_SLEEP_WAKE_TIMEOUT_PERIOD", "00h = 1ms.\n01h = 20ms.\n02h = 40ms.\n03h = 60ms.\n04h = 80ms.\n05h = 100ms.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0750", "mcu_reseved_oui_0", "Nvidia : MCU_SOURCE_OUI[7:0]", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0751", "mcu_reseved_oui_1", "Nvidia : MCU_SOURCE_OUI[15:8]", "7-0", "RW", "0x00", "0x04", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0752", "mcu_reseved_oui_2", "Nvidia : MCU_SOURCE_OUI[23:16]", "7-0", "RW", "0x00", "0x4B", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0753", "mcu_reseved_oui2_0", "Intel : MCU_SOURCE_OUI2[7:0]", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0754", "mcu_reseved_oui2_1", "Intel : MCU_SOURCE_OUI2[15:8]", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0755", "mcu_reseved_oui2_2", "Intel : MCU_SOURCE_OUI2[23:16]", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0756", "mcu_reseved_oui3_0", "AMD : MCU_SOURCE_OUI3[7:0]", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0757", "mcu_reseved_oui3_1", "AMD : MCU_SOURCE_OUI3[15:8]", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0758", "mcu_reseved_oui3_2", "AMD : MCU_SOURCE_OUI3[23:16]", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0759", "mcu_reseved_oui_default", "0=intel\n1=Nvidia\n2=AMD", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x075A", "hbr3ForcePhase2LTFail", "1 – Force sink to simulate failure in phase 2 of link training for test\n0 – Normal operation", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x075A", "hbr3ForcePhase1LTFail", "1 – Force sink to simulate failure in phase 1 of link training for test\n0 – Normal operation", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x075E", "TableRevision", "AMD=0x04", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x075F", "PayloadSize", "AMD=0x18", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0760", "freeSyncSpdInfoframe", "1 – Sending FreeSync defined SPD Infoframe\n0 – SPD InfoFrame using spec definition", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0760", "adapterFreeSyncSupported", " 1 – Supports FreeSync\n0 – Does not support FreeSync ", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0761", "enableFlickerOptimization", "1 - Enable optimization0 - Disable optimization", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0761", "enableFreeSyncForStatic", "1 - Enable Static Screen use case0 - Disable Static Screen use case", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0761", "disableFreeSync", "1 – Disable FreeSync0 – Enable FreeSync", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0761", "changeInCapability", "1 – Change in capability0 – No capability change", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0762", "optimizationMinRefreshRate", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0763", "optimizationEntryRefreshRate", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0765", "sinkSupportDisplayHDR", "1 - Sink supports DisplayHDR and is capable of automatic dimming the panel for tunnel test patterns.\n0 - Sink cannot natively support DisplayHDR and tunnel test patterns.", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0765", "sinkSupportGradualBacklightRamping", "1 – Sink supports gradual ramping of backlight level. When Source request backlight update by writing target backlight level to DPCD 320h, Sink must smoothly and gradually ramp backlight from current level to target level by the transition time in ms as indicated by DPCD 324h.\n0 – Sink cannot support gradual backlight ramping. Source request for backlight update by writing target backlight level to DPCD 320h must be applied as quickly as possible by Sink.", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0765", "sinkHDRBacklightSupportMethod", "0 – Sink supports backlight adjust via PWM during HDR mode\n1 – Sink supports backlight adjust via AUX during HDR mode. Source may request backlight level update by writing new backlight level in millinits to DPCD 320h. Sink shall begin backlight level update.", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0765", "sinkSDRBacklightSupportMethod", "0 – Sink supports backlight adjust via PWM during SDR mode\n1 – Sink supports backlight adjust via AUX during SDR mode. Source may request backlight level update by writing new backlight level in millinits to DPCD 320h. Sink shall begin backlight level update.", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0766", "BacklightLevelInMilliNits:Byte0", "If Sink reports sinkSupportBacklightThroughAux = 1, Source may write to DPCD 320h - 323h to request update of backlight level.", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0767", "BacklightLevelInMilliNits:Byte1", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0768", "BacklightLevelInMilliNits:Byte2", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0769", "BacklightLevelInMilliNits:Byte3", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x076A", "BacklightTransitionTimeInMs:Byte0", "If Sink reports sinkSupportGradualBacklightRamping = 1 , Source may write to DPCD 324h - 325h to specify gradual ramping time of the backlight for future backlight update requests.Transition time of 0 indicates a request to update backlight to the requested target level as quickly as possible", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x076B", "BacklightTransitionTimeInMs:Byte1", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x076C", "CurrentPeakBacklightLevelInMilliNits", "If Sink reports sinkSupportBacklightThroughAux = 1, Sink must report the current peak backlight level in millinits by populating DPCD 326h - 329h.Peak backlight level is defined as the backlight measured with 10% white square on black backgroundIf backlight gradual ramping is supported and active, Sink shall report the current intermediate backlight level driven to the panel as opposed to the final target level.", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x076D", "CurrentPeakBacklightLevelInMilliNits", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x076E", "CurrentPeakBacklightLevelInMilliNits", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x076F", "CurrentPeakBacklightLevelInMilliNits", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0770", "CurrentAvgBacklightLevelInMilliNits", "If Sink reports sinkSupportBacklightThroughAux = 1, Sink must report the current average backlight level in millinits by populating DPCD 32Ah - 32Dh.Average backlight level is defined as average backlight of each section when local dimming is enabled. Average backlight shall be equivalent to peak backlight if no local dimming.If backlight gradual ramping is supported and active, Sink shall report the current intermediate backlight level driven to the panel as opposed to the final target level.", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0771", "CurrentAvgBacklightLevelInMilliNits", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0772", "CurrentAvgBacklightLevelInMilliNits", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0773", "CurrentAvgBacklightLevelInMilliNits", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0774", "backlightControlMethod", "0 – Sink shall switch to backlight control via PWM. Sink shall ignore AUX backlight control registers DPCD 320h - 32Dh.1 – Sink shall switch to backlight control via AUX. Sink shall ignore Backlight PWM control signals.", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0788", "PDID", "Device ID[7:0]", "7-0", "R", "0x00", "0xFB", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x0789", "reserved", "Device ID[15:8]", "7-0", "R", "0x00", "0x24", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x078A", "PVID", "Vendor ID[7:0]", "7-0", "R", "0x00", "0x7E", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x078B", "PVER", "Version\n01h= nVSR 1.0", "7-0", "R", "0x00", "0x02", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x078C", "TFC[7:0]", "TFC: Total Frame Count\nTFRD: Rollover Detect", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x078D", "TFC[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x078E", "TFC[23:16]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x078F", "TFRD", "", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x078F", "TFC[30:24]", "", "6-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x079C", "SPRN[7:0]", "SPRN: Clinet Value R ", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x079D", "SPRN[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x079E", "SPRN[23:16]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x079F", "SPRN[31:24]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07A0", "intel_edphdr_caps_0", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07A1", "intel_edphdr_caps_1", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07A2", "intel_edphdr_caps_2", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07A3", "intel_edphdr_caps_3", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07A4", "intel_edphdr_getset_0", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07A5", "intel_edphdr_getset_1", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07A6", "intel_edphdr_cont_lumi_0", "Maximum luminance", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07A7", "intel_edphdr_cont_lumi_1", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07A8", "intel_edphdr_cont_lumi_2", "minimum luminance", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07A9", "intel_edphdr_cont_lumi_3", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07AA", "intel_edphdr_panel_lumi_over_0", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07AB", "intel_edphdr_panel_lumi_over_1", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07AC", "intel_edphdr_panel_lumi_over_2", "Maximum luminance", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07AD", "intel_edphdr_panel_lumi_over_3", "Maximum luminance", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07AE", "intel_edphdr_panel_lumi_over_4", "max full frame luminance", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07AF", "intel_edphdr_panel_lumi_over_5", "max full frame luminance", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07B0", "intel_edphdr_panel_lumi_over_6", "reserved", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07B1", "intel_edphdr_panel_lumi_over_7", "reserved", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07B9", "Y_REGION_CAP", "Defines the number of independently controllable 1D backlight regions that the panel supports, in the vertical direction.\nThis value is programmed to the number of regions, minus 1.\nA value of 0 represents no regional backlight support in the vertical direction.", "7-4", "R", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07B9", "X_REGION_CAP", "Defines the number of independently controllable 1D backlight regions that the panel supports, in the horizontal direction.\nThis value is programmed to the number of regions, minus 1.\nA value of 0 represents no regional backlight support in the horizontal direction.", "3-0", "R", "0x00", "0x0E", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07BA", "REGIONAL_BACKLIGHT_BASE", "Region Index Offset", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07BB", "REGIONAL_BACKLIGHT_BRIGHTNESS_0", "Region Index Offset+0 Backlight Brightness", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07BC", "REGIONAL_BACKLIGHT_BRIGHTNESS_1", "Region Index Offset +1 Backlight Brightness", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07BD", "REGIONAL_BACKLIGHT_BRIGHTNESS_2", "Region Index Offset +2 Backlight Brightness", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07BE", "REGIONAL_BACKLIGHT_BRIGHTNESS_3", "Region Index Offset +3 Backlight Brightness", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07BF", "REGIONAL_BACKLIGHT_BRIGHTNESS_4", "Region Index Offset +4 Backlight Brightness", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07C2", "inteledpsdrluminancelevel0", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07C3", "inteledpsdrluminancelevel1", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07C4", "inteledpbrightnessnits0", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07C5", "inteledpbrightnessnits1", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07C6", "inteledpbrightnessnits2", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07C7", "inteledpbrightnessnits3", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07C8", "inteledpbrightnessoptimization0", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07C9", "inteledpbrightnessoptimization1", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07CA", "REGIONAL_BACKLIGHT_BRIGHTNESS_5", "Region Index Offset +5 Backlight Brightness", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07CB", "REGIONAL_BACKLIGHT_BRIGHTNESS_6", "Region Index Offset +6 Backlight Brightness", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07CC", "REGIONAL_BACKLIGHT_BRIGHTNESS_7", "Region Index Offset +7 Backlight Brightness", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07CD", "REGIONAL_BACKLIGHT_BRIGHTNESS_8", "Region Index Offset +8 Backlight Brightness", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07CE", "PSR2SELECTIVEUPDATEXGRANULARITYCAPABILITY[7:0]", "Sets the grid pattern granularity in the X direction.\nA value of 0 indicates that no X-coordinate granularity requirement exists other than the standard restrictions, wherein the:\n• Starting X-coordinate must be evenly divisible by 16\n• Rectangle width must be evenly divisible by 4\nA non-zero value indicates that the X-coordinate must be evenly divisible by SU_X_GRANULARITY (i.e., mod(x_coordinate, SU_X_GRANULARITY) must be 0).\nThe SU region width (VSC DB10 – DB11) must be evenly divisible by SU_X_GRANULARITY.\nThe active video width must also be evenly divisible by SU_X_GRANULARITY.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07CF", "PSR2SELECTIVEUPDATEXGRANULARITYCAPABILITY[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07D0", "PSR2SELECTIVEUPDATEYGRANULARITYCAPABILITY", "Sets the grid pattern granularity in the Y direction.\nA value of 00h or 01h indicates that there are no restrictions to the Y-coordinate (VSC DB12 – DB13) of the SU region.\nA value of 00h, 01h, 02h, or 04h should be supported by the Sink device to ensure interoperability with various Source devices.\nA value of 08h or 10h may be considered for system-specific implementations.\nA value of 02h or higher indicates that the Y-coordinate must be evenly divisible by SU_Y_GRANULARITY (i.e., mod(y_coordinate, SU_Y_GRANULARITY) must be 0).\nThe SU region height must be evenly divisible by SU_Y_GRANULARITY.\nThe active video height must also be evenly divisible by SU_Y_GRANULARITY.", "7-0", "R", "0x00", "0x04", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07D1", "SourceDeviceIdentificationString", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07D7", "SourceHardwareMajorRevision", "", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07D7", "SourceHardwareMinorRevision", "", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07D8", "SourceFirmware", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07D9", "SourceFirmware", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07DC", "intel_adaptive_sync[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07DD", "intel_adaptive_sync[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07DE", "intel_adaptive_sync[23:16]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07DF", "intel_adaptive_sync[31:24]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07E0", "host_mutex_value[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07E1", "host_mutex_value[15:8]", "", "7-0", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07E2", "host_mutex_value[23:16]", "", "7-0", "RW", "0x00", "0x02", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07E3", "host_mutex_value[31:24]", "", "7-0", "RW", "0x00", "0x03", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07E4", "upd_region_br_interrupt", "", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07E4", "write_srmv_interrupt", "", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07E4", "read_tfc_interrupt", "", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07E7", "edp_lane3_err_cnt_rst", "reset lane 3 error count, write 1 toggle reset", "7", "W", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07E7", "edp_lane2_err_cnt_rst", "reset lane 2 error count, write 1 toggle reset", "6", "W", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07E7", "edp_lane1_err_cnt_rst", "reset lane 1 error count, write 1 toggle reset", "5", "W", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07E7", "edp_lane0_err_cnt_rst", "reset lane 0 error count, write 1 toggle reset", "4", "W", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07E8", "edp_lane0_err_cnt", " Lane 0 error count", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07E9", "edp_lane1_err_cnt", " Lane 1 error count", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07EA", "edp_lane2_err_cnt", " Lane 2 error count", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07EB", "edp_lane3_err_cnt", " Lane 3 error count", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07EC", "VSC_EXT_VESA_SDP_MAX_CHAINING_COUNT", "When the VSC_EXT_VESA_SDP_SUPPORTED bit in the DPRX_FEATURE_ENUMERATION_LIST register (DPCD Address 02210h, bit 5) is set to 1, a DP Sink device supports the maximum number of SDP\nchaining equal to 64 plus the value in this register", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07ED", "VSC_EXT_CEA_SDP_MAX_CHAINING_COUNT", "When the VSC_EXT_CEA_SDP_SUPPORTED bit in the DPRX_FEATURE_ENUMERATION_LIST register (DPCD Address 02210h, bit 7) is set to 1, a DP Sink device supports the maximum number of SDP\nchaining equal to 64 plus the value in this register.", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07EE", "SUP_LO_FRM_CAP", "Super Low Frame Rate Capability \nSource device may read DPCD address 0x004FE[0] for Super Low Frame Rate Capability of sink side. \nIf SUP_LO_FRM_CAP = 1, Source device may enable low frame rate of sink device. \nIf SUP_LO_FRM_CAP = 0, Source device may not enable low frame rate of sink device. ", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07EF", "SUP_LO_FRM_EN", "Super Low Frame Enable \nIf SUP_LO_FRM_CAP = 1 ,source device may write 1’b1 to DPCD address 0x004FF[0] to enable Super Low Frame Rate of sink device. \nIf SUP_LO_FRM_CAP = 0, don’t care the signal. ", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07F0", "dpcd_isp_code", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07F1", "dpcd_select_i2c_pin", "", "7-6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07F1", "dpcd_select_edid_from_ram", "", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07F1", "dpcd_select_edid_1632_mode", "", "4", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07F1", "dpcd_select_i2c_1632_mode", "", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07F1", "dpcd_select_1632_mode_en", "", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07F6", "REGIONAL_BACKLIGHT_BRIGHTNESS_9", "Region Index Offset +9 Backlight Brightness", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07F7", "REGIONAL_BACKLIGHT_BRIGHTNESS_10", "Region Index Offset +10 Backlight Brightness", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07F8", "REGIONAL_BACKLIGHT_BRIGHTNESS_11", "Region Index Offset +11 Backlight Brightness", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07F9", "REGIONAL_BACKLIGHT_BRIGHTNESS_12", "Region Index Offset +12 Backlight Brightness", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FA", "REGIONAL_BACKLIGHT_BRIGHTNESS_13", "Region Index Offset +13 Backlight Brightness", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FB", "REGIONAL_BACKLIGHT_BRIGHTNESS_14", "Region Index Offset +14 Backlight Brightness", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FC", "VSC_EXT_CEA_SDP_CHAINING_SUPPORTED", "Shall support up to 64 VSC_EXT_CEA SDP chaining for DP Sink devices that support chaining. DP Sink devices that support more than 64 SDPs of chaining indicate the maximum chaining count beyond 64 in the VSC_EXT_CEA_SDP_MAX_CHAINING_COUNT field in the VSC_EXT_CEA_SDP_MAX_CHAINING register (DPCD Address 02213h, bits 7:0).\n0 = Not supported.\n1 = Supported.", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FC", "VSC_EXT_CEA_SDP_SUPPORTED", "0 = Not supported.\n1 = Supported.", "6", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FC", "VSC_EXT_VESA_SDP_CHAINING_SUPPORTED", "Shall support up to 64 VSC_EXT_VESA SDP chaining for DP Sink devices that support chaining. DP Sink devices that support more than 64 SDPs of chaining indicate the maximum chaining count beyond 64 in the VSC_EXT_VESA_SDP_MAX_CHAINING_COUNT field in the VSC_EXT_VESA_SDP_MAX_CHAINING register (DPCD Address 02212h, bits 7:0).\n0 = Not supported.\n1 = Supported.", "5", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FC", "VSC_EXT_VESA_SDP_SUPPORTED", "0 = Not supported.\n1 = Supported.", "4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FC", "VSC_SDP_EXTENSION_FOR_COLORIMETRY_SUPPORTED", "A DP Source device, upon detecting this bit being set to 1 by a DP Sink device, can set the MISC1 field, bit 6, of an MSA Packet to 1 to indicate that pixel encoding format and colorimetry format are indicated in the VSC SDP.\n0 = Not supported.\n1 = Supported.", "3", "R", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FC", "AV_SYNC_CAP", "A DP device indicates support of the AV Sync capability through audio delay insertion by setting this bit. The AV Sync feature is defined in Section 2.12.\n0 = Not supported.\n1 = Supported.", "2", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FC", "SST_SPLIT_SDP_CAP", "A DPRX indicates support for SDP splitting in SST mode by setting this bit.\nThe SST mode SDP Splitting feature is defined in Section 2.2.5.12.\n0 = Not supported.\n1 = Supported.", "1", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FC", "GTC_CAP", "A DPRX indicates support for the GTC feature by setting this bit. The GTC feature is defined in Section 2.13.\n0 = Not supported.\n1 = Supported.", "0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FD", "edp_flag_0200d_active", "1: when edp_flag_manual=1, dpcd 0x200d equal to 8'h0\n0: when edp_flag_manual=1, dpcd 0x200d equal to dpcd 0x203", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FD", "edp_flag_0200c_active", "1: when edp_flag_manual=1, dpcd 0x200c equal to {7'b0, AUX_FRAME_SYNC_LOCK_ERROR}\n0: when edp_flag_manual=1, dpcd 0x200c equal to dpcd 0x202", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FD", "edp_flag_00201_active", "1: when edp_flag_manual=1, dpcd 0x201[1] (0x2003[1]) equal to TOUCH_INTERRUPT\n0: when edp_flag_manual=1, dpcd 0x201[1] (0x2003[1]) equal to AUTOMATED_TEST_REQUEST", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FD", "edp_flag_manual", "1: enable version flag manual mode, for registers which has different difinition to edp1.4a & DP1.3, refer to manual registers\n0: disable version flag manual mode, for registers which has different difinition to edp1.4a & DP1.3, refer to 0x700 & 0x0 directly", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FE", "DPCDwriteprotect", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FF", "dpcd_edid_16_32_mode", "dpcd_edid_16_32_mode XOR TCON register 0x529[1] =EDID16/32 mode selection", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FF", "dpcd_aux_sel", "1: 當aux_sel_en = 1時, AUX-Over-I2C會通過TCON I2C\n0: 當aux_sel_en =1時, AUX-Over_I2C會通過EE I2C\nDPCD 0048B[6] XOR TCON register 0x1c3[2]", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FF", "Throughmodedisable", "I2C Through Mode Disable\nDPCD 0048B[5] XOR TCON register\n1: disable through mode\n0: enable through mode", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FF", "dpcd_i2c_sel_en", "1: AUX-Over-I2C 可以選擇通過EE I2C or TCON I2C\n0: AUX-Over-I2C EE I2C 和 TCON I2C都會通過\nDPCD 0048B[4] XOR TCON register 0x1c3[3]", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FF", "dpcd_edid_from_ram", "0: Read EDID from EEPROM with I2C cmd, 1:EDID read from SRAM in eDP\nDPCD 0048B[3] XOR TCON register 0x529[0]", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x07FF", "2'b01:isp_enter_en2'b10:isp_exit_en", "", "2-1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1200", "XICC:ImageCheckCaps", "0: interface not supported\n1: can report checksums,CRC\n2:reserved", "7-6", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1200", "XUSC:UpscallingCpas", "0: interface not supported\n1: support upscaling of pixels in frames within SRC LFB\n2: reserved", "5-4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1200", "XRTC:RotationCpas", "0: interface not supported\n1: support rotation of pixels in frames within SRC LFB\n2: reserved", "3-2", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1200", "XCAP:ExtendedPanelCaps", "0: interface not supported\n1: support entended info on the panel capability", "1-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1201", "XFSI:FastSerialInterface", "0: interface not supported\n1: support SPI\n2: reserved", "5-4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1201", "XPAR:PartialFrameUpdates", "0: interface not supported\n1: supports displaying a vertical region\n2: supports displaying arbitrary dirty rectangle\n3: supports both region & rectangles", "3-2", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1201", "XCCC:CompressionCaps", "0: interface not supported\n1: support compression control\n2: reserved", "1-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1202", "XPBI:PulsedBacklight", "0: interface not supported\n1: Pulse Backlight at aligned intervals\n2: reserved", "3-2", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1208", "XCPO:ExtendedPanelCapsOffser[7:0]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1209", "XCPO:ExtendedPanelCapsOffser[15:8]", "", "7-0", "R", "0x00", "0x08", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x120E", "XPAO:Partialupdateoffset[7:0]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x120F", "XPAO:Partialupdateoffset[15:8]", "", "7-0", "R", "0x00", "0xF0", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1210", "XFSO:FastSerialinterfaceOffset[7:0]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1211", "XFSO:FastSerialinterfaceOffset[15:8]", "", "7-0", "R", "0x00", "0x09", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1216", "XPBO:pulsedBacklightOffset[7:0]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1217", "XPBO:pulsedBacklightOffset[15:8]", "", "7-0", "R", "0x00", "0x0A", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x122D", "reserved", "", "7-0", "R", "0x00", "0x0F", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1230", "XPMC:MinPnaelPixelClock[7:0]", "The minimun pixel clock support by the SRC-Panel side of the interface in units of 20KHz", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1231", "XPMC:MinPnaelPixelClock[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1234", "XPXC:MaxPnaelPixelClock[7:0]", "The maximum pixel clock support by the SRC-Panel side of the interface in units of 20KHz", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1235", "XPXC:MaxPnaelPixelClock[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1236", "XPSA:SpreadAmplitude", "0: Not selectable\n1:+/- 0.25%\n2: +/- 0.5%\n3: +/- 0.75%\n4: +/- 1%", "7-4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1236", "XPSS:SpreadSpectrumcapabilitied", "Bit 0: Can follow GC spread\nBit 1: Generate Spread in self-refresh mode while SRC is driving the panel\nBit 2: Generate spread all the time in pass-through and self-refresh modes.", "3-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1237", "XPAS:Spreadsprectrumselection", "0: disbel SRC Spread \n1: +/- 0.25%\n2: +/- 0.5%\n3: +/- 0.75%\n4: +/- 1.0%\n5: +/- 1.25%\n6: +/-1.5%\n7: +/- 1.75%\n8: +/- 2.0%", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1237", "XPSS:SpreadSpretcrumSelection", "0: Follow GC Spread\n1: Generate Spread in self refresh mode while SRC is driving the panel\n2: Generate Spread all the time, in pass through and seld refersn modes.", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1238", "XPCE:compressionerror", "1: compression failed to fit image\n0: compression no use or no error", "7", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1238", "XPCM:CompressionMode", "0: Compression not being used\n1: Loss-less compression only\n2: Visually loss less compression\n4: Lossy compression", "6-4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1238", "XPCC:CompressionCaps", "0: Compression not support\n1: Lossy less compression\n2: visually loss less compression\n3: lossy compression", "3-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1239", "XPCQ:CompressionQualitySelection", "0: Compression disable\n1: Loss less compression\n2: visually loss less or better\n3: Lossy compression or better", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1240", "XUPR:updatebefore", "0: update is triggered only while before the region from 0 to (XYOF-1)\n1: update is triggered only while after the region XYOF to (XYOF+XYSZ)", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1240", "XUPM:repeatupdates", "0: one shot\n1: repeated", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1240", "XURC:repeatcapable", "0: one shot only\n1: one shot & repeated frame updates", "5", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1240", "XUSB:signalingmethod", "0: sideband signaling\n1: reserved", "4", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1240", "XUPU:offset&sizeunitcapability", "0: XYOF/XYSZ units must be even\n1: Odd/even co-ordinate units spport", "3", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1240", "XUPS:PartialUpdateLatch:lessSetup", "0 - XUPL is used to latch partial region co-ordinates (default)\n1 - Interface latches partial region setup when the Update is triggered (e.g. Burst Update) and XUPL is not required", "2", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1240", "XUPD:Paritalupdates", "0: Full screen\n1: region update\n3: rectangular update", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1241", "XUPL:updateoffsettrigger", "", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1241", "XUPP:paddingregion", "", "6-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1242", "XYOF:Yoffset[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1243", "XYOF:Yoffset[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1244", "XYSZ:VerticalHeight[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1245", "XYSZ:VerticalHeight[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1246", "XXOF:Xoffset[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1247", "XXOF:Xoffset[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1248", "XXSZ:HWidth[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1249", "XXSZ:HWidth[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1250", "XSIS:SRCserialinterfacespeedssupported", "0: < 12MHz\n1: 12MHz~20MHz\n2: 20MHz~30MHz\n4: 30MHz~50MHz", "5-3", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1250", "XSIC:BufferedTransceiver", "0: Multiple transcations using XSTO>-1\n1: single operation only (XSTO max is 1)", "2", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1250", "XSIC:serialinterfacecaps", "0: none\n1: SPI", "1-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1251", "XSSS:Slavedevicesupport", "For SPI, this represents the number of slave select pins minus 1, which determines the number of possible devices.", "4-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1252", "XSIF:SlaveDeviceSpeedLimit", "The speed range enumerated in XSIS may be selected, entering the maximum speed desired (value 0~3). Unsupported values will defer to the maximum supported speed.", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1252", "XSBO:BitOrder", "When set to ‘1’ enables LSBit first (default is MSB first)", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1252", "XSCH:ClockEdge", "When set to ‘1’ enables the CPHA = 1 mode of the data-clocking edge (default is 0, data is sampled on the Clock leading edge, the rising edge when CPOL = 0)", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1252", "XSCP:ClockPolarity", "When set to ‘1’ enables the CPOL = 1 mode of the Clock polarity (default is 0, Clock idle = low)", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1252", "XSCE:ClockEnable", "When set to ‘1’ enables the SPI Clock", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1252", "XSPE:SerialInterfaceControl", "Selects the interface, and enables clocking. When not selected, the interface remains powered-down and I/O in Hi-Z tri-stated mode.\n0 – Disabled\n1 – Enable SPI\n2~3 Reserved", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1253", "XSIA:indexedaccess", "1:data starts sampling at the middle\n0: data starts at the end", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1253", "XSIZ:Indexsize", "0:7bits\n1: 15bits", "4-3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1253", "XSDZ:Datasize", "0: 8bits\n1: 16bits", "2-1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1253", "XSRW:DataDirection", "0: Read from SPI Slave device\n1: Write to SPI Slave Device", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1255", "XSDS:SlaveDeviceSelect", "Asserts the SS pins selecting the slave device. Default is ‘0’ which selects the first slave device.", "4-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1256", "XSPI:Registerindex[7:0]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1257", "XSPI:Registerindex[15:8]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1258", "XSPW:RegisterWrData(0)[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1259", "XSPW:RegisterWrData(0)[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x125A", "XSW1:RegisterWrData(1)[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x125B", "XSW1:RegisterWrData(1)[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x125C", "XSW2:RegisterWrData(2)[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x125D", "XSW2:RegisterWrData(2)[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x125E", "XSW3:RegisterWrData(3)[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x125F", "XSW3:RegisterWrData(3)[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1260", "XSW4:RegisterWrData(4)[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1261", "XSW4:RegisterWrData(4)[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1262", "XSW5:RegisterWrData(5)[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1263", "XSW5:RegisterWrData(5)[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1264", "XSTM:TransactionMask", "Always reads as ‘0’. If set to ‘1’ enables setting of the above bits.", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1264", "XSTO:TransactionStart", "Sets the number of sequential operations to be performed. When set to greater than or equal to ‘1’, the transactions loaded in the Index/Data registers are executed.\nThe bit-field is cleared when the transactions complete. Data to be sent to Slave device must be written to XSPW before this field value is set. A value of ‘1’ implies a single transaction. A maximum of ‘6’ supports up to 6 operations in a single transaction regardless of XSDZ data size. The value in this register shall be decremented to ‘0’ by the time all pending transactions are complete – whereupon Data to be read from Slave device can be retrieved from XSPR\nFor writes this sends XSPW~XSW5, in order. During reads XSPR~XSR5 are filled in order.\nIf indexed access is enabled, the index XSPI is automatically incremented by 1 for each operation if XSDZ = 0 (8bit register data), or by 2 if XSDZ = 1 (16bit register)", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1266", "XSPR:RegisterRdData(0)[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1267", "XSPR:RegisterRdData(0)[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1268", "XSR1:RegisterRdData(1)[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1269", "XSR1:RegisterRdData(1)[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x126A", "XSR2:RegisterRdData(2)[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x126B", "XSR2:RegisterRdData(2)[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x126C", "XSR3:RegisterRdData(3)[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x126D", "XSR3:RegisterRdData(3)[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x126E", "XSR4:RegisterRdData(4)[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x126F", "XSR4:RegisterRdData(4)[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1270", "XSR5:RegisterRdData(5)[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1271", "XSR5:RegisterRdData(5)[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1280", "XPBE:pulsedBacklightControl", "0: Normal\n1: Alternate PWM Backlight\n2: Boots Backlight", "2-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1282", "XBHV:BacklightHighValue[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1283", "XBHV:BacklightHighValue[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1284", "XBHL:BacklightHighLine[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1285", "XBHL:BacklightHighLine[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1286", "XBLV:BacklightLowValue[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1287", "XBLV:BacklightLowValue[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1288", "XBLL:BacklightLOWLine[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1289", "XBLL:BacklightlowLine[15:8]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1290", "DSC_SUPPORT", "0 = Decompression using DSC is not supported.\n1 = Decompression using DSC is supported.", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1291", "DSC_VERSION_MINOR", "This value contains the minor version of DSC.", "7-4", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1291", "DSC_VERSION_MAJOR", "This value contains the major version of DSC.", "3-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1292", "RC_BUFFER_BLOCK_SIZE", "Rate control buffer block size.\n00 = 1KB.\n01 = 4KB.\n10 = 16KB.\n11 = 64KB.", "1-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1293", "RC_BUFFER_SIZE", "Buffer size (in blocks) = value + 1.", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1294", "slice_4", "0 = 4 slices/line is not supported.\n1 = 4 slices/line is supported.", "3", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1294", "slice_2", "0 = 2 slices/line is not supported.\n1 = 2 slices/line is supported.", "1", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1294", "slice_1", "0 = 1 slice/line is not supported.\n1 = 1 slice/line is supported.", "0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1295", "LINE_BUFFER_BIT_DEPTH", "Contains the bit depth used by the Sink device to store the reconstructed pixels\nwithin the line buffer.\n000 = 9 bits each for Y, Co, and Cg.\n001 = 10 bits each for Y, Co, and Cg.\nAll other values are RESERVED.", "2-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1296", "BLOCK_PREDICTION_SUPPORT", "0 = Block prediction is not supported.\n1 = Block prediction is supported.", "0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1297", "BITS_PER_PIXEL_70", "Contains the lower eight bits of the maximum bits_per_pixel that the Sink device\ncan support.", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1298", "BITS_PER_PIXEL_98", "Contains the upper two bits of the maximum bits_per_pixel that the Sink device\ncan support.", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1299", "YCBCR_4_2_2_SUPPORT", "0 = YCbCr 4:2:2 is not supported.\n1 = YCbCr 4:2:2 is supported.", "2", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1299", "YCBCR_4_4_4_SUPPORT", "0 = YCbCr 4:4:4 is not supported.\n1 = YCbCr 4:4:4 is supported.", "1", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x1299", "RGB_SUPPORT", "A Sink device supporting DSC must support RGB color format.\n0 = RGB is not supported.\n1 = RGB is supported.", "0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x129A", "BITS_PER_COLOR_SUPPORT_12", "0 = 12 bits per color is not supported.\n1 = 12 bits per color is supported.", "3", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x129A", "BITS_PER_COLOR_SUPPORT_10", "0 = 10 bits per color is not supported.\n1 = 10 bits per color is supported.", "2", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x129A", "BITS_PER_COLOR_SUPPORT_8", "A Sink device supporting DSC must support 8 bits per color.\n0 = 8 bits per color is not supported.\n1 = 8 bits per color is supported.", "1", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x129B", "DSCENABLE", "0 = Decompression is not enabled.\n1 = Decompression is enabled.", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x129C", "CHUNK_LENGTH_ERROR_0020f", "0 = No error.\n1 = Chunk Length error. Sticky until cleared by a write of 1.", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x129C", "RC_BUFFER_OVER_FLOW_0020f", "0 = No error.\n1 = Buffer overflow. Sticky until cleared by a write of 1.", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x129C", "RC_BUFFER_UNDER_RUN_0020f", "0 = No error.\n1 = Buffer under-run. Sticky until cleared by a write of 1.", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x129D", "CHUNK_LENGTH_ERROR_02011", "0 = No error.\n1 = Chunk Length error. Sticky until cleared by a write of 1.", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x129D", "RC_BUFFER_OVER_FLOW_02011", "0 = No error.\n1 = Buffer overflow. Sticky until cleared by a write of 1.", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x129D", "RC_BUFFER_UNDER_RUN_02011", "0 = No error.\n1 = Buffer under-run. Sticky until cleared by a write of 1.", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A0", "BIT_ERROR_COUNT_CAPABLE", "0 = Not capable.\n1 = Capable.", "3", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A0", "CORRECTED_BLOCK_ERROR_COUNT_CAPABLE", "0 = Not capable.\n1 = Capable.", "2", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A0", "UNCORRECTED_BLOCK_ERROR_COUNT_CAPABLE", "0 = Not capable.\n1 = Capable.", "1", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A0", "FEC_CAPABLE", "0 = Not capable.\n1 = Capable.", "0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A1", "FEC_ERROR_LANE_SEL", "00 = Lane 0.\n01 = Lane 1.\n10 = Lane 2.\n11 = Lane 3.", "5-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A1", "FEC_ERROR_COUNT_SEL", "000 = FEC_ERROR_COUNT_DIS.\n001 = UNCORRECTED_BLOCK_ERROR_COUNT.\n010 = CORRECTED_BLOCK_ERROR_COUNT.\n011 = BIT_ERROR_COUNT.\nAll other values are RESERVED.", "3-1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A1", "FEC_READY", "0 = Not ready. A DP Source device shall set this bit to 1 and initiate Link training\nbefore start FEC encoding.\n1 = Ready. A DP Source may start FEC encoding without having to re-initiate\nLink Training.", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A2", "FEC_DECODE_DIS_DETECTED", "A DPRX sets this bit when it detects the FEC_DECODE_DIS link\nsymbol sequence over the Main-Link.\n0 = Not detected.\n1 = Detected", "1", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A2", "FEC_DECODE_EN_DETECTED", "A DPRX sets this bit when it detects the FEC_DECODE_EN link\nsymbol sequence over the Main-Link.\n0 = Not detected.\n1 = Detected.", "0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A3", "FEC_ERROR_COUNT_7_0", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A4", "FEC_ERROR_COUNT_VALID", "0 = Not valid.\n1 = Valid.", "7", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A4", "FEC_ERROR_COUNT_14_8", "", "6-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A5", "INDEPENDENT_LINK_BIT", "0h = MSO SST Links depend on one EDID timing (not independent). One EDID\nrepresents the timing for all SST Links.\neDP v1.4a (and higher) further specifies:\n• SST Links are arranged only horizontally, in raster-scan order\n• Raster scan appears from the lower- to higher-numbered Lanes\n1h = MSO SST Links are independent. (RESERVED for future use.)", "3", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A5", "NUMBER_OF_LINKS", "Number of SST Links (Panel Segments) contained within the Sink device.\n0h = Sink device requires one SST Link (not segmented).\n2h = Sink device supports two SST Links (two Panel Segments).\n4h = Sink device supports four SST Links (four Panel Segments).\nAll other values are RESERVED", "2-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A6", "TEST_CRC_R_Cr_MSO_2_0_7", "Stores the 16-bit CRC value of the R or Cr component for the 2nd Multi-SST Link.", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A7", "TEST_CRC_R_Cr_MSO_2_8_15", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A8", "TEST_CRC_G_Cr_MSO_2_0_7", "Stores the 16-bit CRC value of the G or Y component for the 2nd Multi-SST Link.\nNew to eDP v1.4b for Multi-SST Operation.", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12A9", "TEST_CRC_G_Cr_MSO_2_8_15", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12AA", "TEST_CRC_B_Cr_MSO_2_0_7", "Stores the 16-bit CRC value of the B or Cb component for the 2nd Multi-SST Link.\nNew to eDP v1.4b for Multi-SST Operation.", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12AB", "TEST_CRC_B_Cr_MSO_2_8_15", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12AC", "TEST_CRC_SUPPORTED_MSO_2", "0 = Sink device’s SST Link does not support CRC.\n1 = Sink device’s SST Link supports CRC.", "5", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12AC", "TEST_CRC_COUNT_MSO_2", "4-bit wrap counter that increments each time that the TEST_CRC_x_y_MSO_2\nregisters are updated. Cleared to 0 when the TEST_SINK_START bit in the\nTEST_SINK_START register (DPCD Address 00270h, bit 0; see DP v1.3) is 0.", "3-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12AD", "TEST_CRC_R_Cr_MSO_3_0_7", "Stores the 16-bit CRC value of the B or Cb component for the 3rd Multi-SST Link.\nNew to eDP v1.4b for Multi-SST Operation.", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12AE", "TEST_CRC_R_Cr_MSO_3_8_15", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12AF", "TEST_CRC_G_Cr_MSO_3_0_7", "Stores the 16-bit CRC value of the G or Y component for the 3rd Multi-SST Link.\nNew to eDP v1.4b for Multi-SST Operation.", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12B0", "TEST_CRC_G_Cr_MSO_3_8_15", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12B1", "TEST_CRC_B_Cr_MSO_3_0_7", "Stores the 16-bit CRC value of the B or Cb component for the 3rd Multi-SST Link.\nNew to eDP v1.4b for Multi-SST Operation.", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12B2", "TEST_CRC_B_Cr_MSO_3_8_15", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12B3", "TEST_CRC_SUPPORTED_MSO_3", "0 = Sink device’s SST Link does not support CRC.\n1 = Sink device’s SST Link supports CRC.", "5", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12B3", "TEST_CRC_COUNT_MSO_3", "4-bit wrap counter that increments each time that the TEST_CRC_x_y_MSO_3\nregisters are updated. Cleared to 0 when the TEST_SINK_START bit in the\nTEST_SINK_START register (DPCD Address 00270h, bit 0; see DP v1.3) is 0.", "3-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12B4", "TEST_CRC_R_Cr_MSO_4_0_7", "Stores the 16-bit CRC value of the B or Cb component for the 4nd Multi-SST Link.\nNew to eDP v1.4b for Multi-SST Operation.", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12B5", "TEST_CRC_R_Cr_MSO_4_8_15", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12B6", "TEST_CRC_G_Cr_MSO_4_0_7", "Stores the 16-bit CRC value of the G or Y component for the 4nd Multi-SST Link.\nNew to eDP v1.4b for Multi-SST Operation.", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12B7", "TEST_CRC_G_Cr_MSO_4_8_15", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12B8", "TEST_CRC_B_Cr_MSO_4_0_7", "Stores the 16-bit CRC value of the B or Cb component for the 4nd Multi-SST Link.\nNew to eDP v1.4b for Multi-SST Operation.", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12B9", "TEST_CRC_B_Cr_MSO_4_8_15", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12BA", "TEST_CRC_SUPPORTED_MSO_4", "0 = Sink device’s SST Link does not support CRC.\n1 = Sink device’s SST Link supports CRC.", "5", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12BA", "TEST_CRC_COUNT_MSO_4", "4-bit wrap counter that increments each time that the TEST_CRC_x_y_MSO_4\nregisters are updated. Cleared to 0 when the TEST_SINK_START bit in the\nTEST_SINK_START register (DPCD Address 00270h, bit 0; see DP v1.3) is 0.", "3-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12BB", "THROUGHPUT_MODE_1", "", "7-4", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12BB", "THROUGHPUT_MODE_0", "", "3-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12BC", "DSC_MAX_SLICE_WIDTH", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12BD", "SLICES_PER_DP_DSC_SINK_DEVICE_24", "", "2", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12BD", "SLICES_PER_DP_DSC_SINK_DEVICE_20", "", "1", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12BD", "SLICES_PER_DP_DSC_SINK_DEVICE_16", "", "0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("DPCD(0x6, 0x7, 0x12)", "DPCD", "0x12BE", "BITS_PER_PIXEL_INCREMENT", "", "2-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08A0", "hact[15:8]", "Horizontal active pixel number per line. Resolution setting for in-processor. ", "7-0", "RW", "0x00", "0x07", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08A1", "hact[7:0]", "Horizontal active pixel number per line. Resolution setting for in-processor", "7-0", "RW", "0x00", "0x80", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08A2", "vact[15:8]", "Vertical active line number per frame. Resolution setting for in-processor", "7-0", "RW", "0x00", "0x04", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08A3", "vact[7:0]", "Vertical active line number per frame. Resolution setting for in-processor", "7-0", "RW", "0x00", "0x38", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08A4", "htot[15:8]", "Horizontal total pixel number per line. Resolution setting for in-processor", "7-0", "RW", "0x00", "0x08", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08A5", "htot[7:0]", "Horizontal total pixel number per line. Resolution setting for in-processor", "7-0", "RW", "0x00", "0x98", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08A6", "vtot_nor[15:8]", "Vertical total line number per frame. Resolution setting for in-processor", "7-0", "RW", "0x00", "0x04", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08A7", "vtot_nor[7:0]", "Vertical total line number per frame. Resolution setting for in-processor", "7-0", "RW", "0x00", "0x65", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08A8", "htot_min[15:8]", "Horizontal minimum total pixel number", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08A9", "htot_min[7:0]", "Horizontal minimum total pixel number", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08AA", "htot_max[15:8]", "Horizontal maxmum total pixel number", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08AB", "htot_max[7:0]", "Horizontal maxmum total pixel number", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08AC", "vtot_min[15:8]", "Vertical minimum total line number", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08AD", "vtot_min[7:0]", "Vertical minimum total line number", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08AE", "vtot_max[15:8]", "Vertical maxmum total line number", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc", "DE_PROC", "0x08AF", "vtot_max[7:0]", "Vertical maxmum total line number", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08B2", "r_htot_sr[15:8]", "Htotal used for Self-Refresh free timing generator.", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08B3", "r_htot_sr[7:0]", "see above", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08B6", "r_vfp_sr[15:8]", "V Front Porch for Self-Refresh free timing generator.", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08B7", "r_vfp_sr[7:0]", "see above", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08B8", "r_vsw_sr[15:8]", "V Sync Width for Self-Refresh free timing generator.", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08B9", "r_vsw_sr[7:0]", "see above", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BA", "r_vbp_sr[15:8]", "V Back Porch for Self-Refresh free timing generator.", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BB", "r_vbp_sr[7:0]", "see above", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BC", "r_force_mute", "0: normal operation, 1: force abnormal to enter mute state.", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BC", "r_dur_ini_all_dis", "1: no need to wait LUT download finish to switch to normal data\n0: need to wait LUT download finish to switch to normal data", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BC", "r_idf_mute_sel", "design option, to select if idf_mute is bypass to IO in multi-tcon mode 0:Enable", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BC", "r_dis_ini_sw", "0: ctrl page download完後，會打固定的free-run frames才進normal，請參考0xC0\n1: ctrl page download完後，可直接進normal", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BC", "r_v_mute_ext[4:3]", "the mute period extension by lines", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BD", "r_v_mute_ext[2:0]", "the mute period extension by lines", "7-5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BD", "r_fr_mute_ext[4:0]", "the mute period extension by frames", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BE", "r_dp_lock", "Control dp_lock signal without eDP RX for PSR self test mode.", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BE", "r_chk_msa_valid_dis", "related to mn_sel and mpll_ref_sel function.\nbefore switch to dp mn, check msa is valid(hact is correct) or not.\n1: disable checking msa valid.\n0: enable checking msa valid", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BE", "r_htot_ref_for_vs", "specify which htot is used to generate rx vs\n1: htot (0xa4, 0xa5)\n0: latched htot", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BE", "r_htot_ref_htot_latch", "specify which htot is used to generate rx vs when r_htot_ref_for_vs = 0\n1: latch in_proc output de htot\n0: switch between lb output htot and free gen htot", "4", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BE", "r_aln_prd_chk_stb_dis", "specify whether to check align_period with clk_stable or not\n1: no check clk stable\n0: check clk stable", "3", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BE", "r_dur_ctrl_sel", "mtcon case, select internal dur_ctrl_set source\n1: align_period\n0: ~clk_stable", "2", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BE", "r_mn_abnor_dis", "0: enable detection of abnormal mn\n1: disable detection of abnormal mn", "1", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BE", "r_host_mute_dis", "0: enable host force mute(refresh mode)\n1: disable host force mute(refresh mode)", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BF", "r_sh_hdisp_dis", "0: enable detection of short hdisp \n1: disable detection of short hdisp", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BF", "r_ln_hdisp_dis", "0: enable detection of long hdisp \n1: disable detection of long hdisp", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BF", "r_dw_fail_dis", "0: enable mute condition, host download fail \n1: disable mute condition, host download fail", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BF", "r_sh_htot_dis", "0: enable detection of short htotal\n1: disable detection of short htotal", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BF", "r_ln_htot_dis", "0: enable detection of long htotal \n1: disable detection of long htotal", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BF", "r_sh_vtot_dis", "0: enable detection of short vtotal \n1: disable detection of short vtotal", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BF", "r_ln_vtot_dis", "0: enable detection of long vtotal\n1: disable detection of long vtotal", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("In_Proc(0x08)", "DE_PROC", "0x08BF", "r_dp_lock_dis", "0: enable abnormal detection of dp unlock\n1: disable abnormal detection of dp unlock", "0", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A30", "msa_mvid[23:16]", "MSA mvid value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A31", "msa_mvid[15:8]", "MSA mvid value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A32", "msa_mvid[7:0]", "MSA mvid value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A33", "msa_nvid[23:16]", "MSA nvid value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A34", "msa_nvid[15:8]", "MSA nvid value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A35", "msa_nvid[7:0]", "MSA nvid value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A36", "msa_htotal[15:8]", "MSA htotal value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A37", "msa_htotal[7:0]", "MSA htotal value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A38", "msa_hstart[15:8]", "MSA hstart value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A39", "msa_hstart[7:0]", "MSA hstart value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A3A", "msa_hwidth[15:8]", "MSA hwidth value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A3B", "msa_hwidth[7:0]", "MSA hwidth value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A3C", "msa_vtotal[15:8]", "MSA vtotal value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A3D", "msa_vtotal[7:0]", "MSA vtotal value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A3E", "msa_vstart[15:8]", "MSA vstart value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A3F", "msa_vstart[7:0]", "MSA vstart value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A40", "msa_vhei[15:8]", "MSA vhei value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A41", "msa_vhei[7:0]", "MSA vhei value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A42", "misc0[7:0]", "misc0 value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A43", "misc1[7:0]", "misc1 value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A44", "msa_hsp_hsw[15:8]", "MSA hsp_hsw value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A45", "msa_hsp_hsw[7:0]", "MSA hsp_hsw value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A46", "msa_vsp_vsw[15:8]", "MSA vsp_vsw value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A47", "msa_vsp_vsw[7:0]", "MSA vsp_vsw value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A48", "msa_res0", "MSA res0 value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A49", "msa_res1", "MSA res1 value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A4A", "msa_res2", "MSA res2 value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("LinkLayer0(0x0A)", "eDPLinkLayer0", "0x0A4B", "msa_mn_shift[7:0]", "", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B60", "cm2_mode", "Pure color pixel will do peaking\n0: pure color bypass, 1: do peaking", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B60", "de_cg_dis", "disable clock gated during no data enable region\n0: Gated, 1: non-Gated", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B60", "cm2_lp_v", "disable low-power check flag\n0: disable low power\n1: enable low power", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B60", "cm2_lp_dis", "disable low-power check switch\n0: select cm2_lp_v\n1: auto-matic enable low power when cm2 is disableed", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B60", "cm2_brightness_en", "Brightness Adjust Function Enable\n0: Disable, 1: Enable", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B60", "cm2_hue_en", "Hue Adjust Function Enable\n0: Disable, 1: Enable", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B60", "cm2_sat_en", "Saturation Adjust Function Enable\n0: Disable, 1: Enable", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B60", "cm2_int_en", "Intensity Adjust Function Enable\n0: Disable, 1: Enable", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B61", "cm2_hue", "This parameter is active when CM_HUE_EN is active. The value is from 00h to 78h, one step means 1.5 degree. Bit 7 is sign bit:\n0: clockwise (negative rotation), 1: counterclockwise (positive rotation)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B62", "cm2_sat", "This parameter is active when CM_SATURATION_EN is active. The value is from 00 h to FF h.", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B63", "cm2_int", "This parameter is active when CM_INTENSITY_EN is active. The value is from 00 h to FF h. (0~2)", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B64", "cm2_brightness", "This parameter is active when CM_BRIGHTNESS_EN is active.\nThe value is from 00 h to FF h.", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B65", "cm2_h2h_2x_en", "Increase Hue adjust angle:\n0: disable, -15 ~ 15 degree \n1: enable, -30 ~ 30 degree (same with 890)", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B65", "cm2_h2h_en", "Hue-Hue map, 0: disable , 1: enable", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B65", "cm2_h2s_en", "Hue-Saturation map, 0: disable , 1: enable", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B65", "cm2_h2i_en", "Hue-Intensity map, 0: disable, 1: enable", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B65", "cm2_sub_en", "CM local Color Enhancement enable\n0: disable, 1: enable", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B66", "cm2_y2c_smooth_en", "Y2C smooth enable", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B66", "cm2_c2c_smooth_en", "C2C smooth enable", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B66", "cm2_c_smooth_de_noise_en", "C smooth suppress chroma at low luma and low saturation\n0: enable, 1: disable", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B66", "cm2_y_smooth_en", "Y smooth enable", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B66", "cm2_y_min_mode", "0: 0, 1: 64", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B66", "cm2_y_max_mode", "0: 1023, 1: 875", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B66", "cm2_c_stretch_en", "C stretch enable", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B66", "cm2_y_strech_en", "Y stretch enable", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B67", "cm2_y_strectch", "This parameter is active when both FCM and FYSTRETCH is active. The value is from 0(00 h) to 0.996(FF h) ; (0~255/256)", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B68", "cm2_c_stretch", "The value is from 0(00 h) to 0.996(FF h) ;(0~255/256)", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B69", "cm2_y_smooth_gain", "The value is from 0(00 h) to 7.969(FF h) ;(0~255/32)", "7-0", "RW", "0x40", "0x40", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B6A", "cm2_y_smooth_offset", "The value is from 0(00 h) to 255(FF h)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B6B", "cm2_c2c_smooth_gain", "The value is from 0(00 h) to 63.75(FF h) ;(0~255/4)", "7-0", "RW", "0x60", "0x60", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B6C", "cm2_c2c_smooth_offset", "The value is from 0(00 h) to 255(FF h)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B6D", "cm2_y2c_smooth_gain", "The value is from 0(00 h) to 15.94(FF h) ;(0~255/16)", "7-0", "RW", "0x40", "0x40", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B6E", "cm2_y2c_smooth_offset", "The value is from 0(00 h) to 255(FF h)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B6F", "y2r_compen", "YCbCr to RGB compensation", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B6F", "cm2_hue_dir", "Hue adjust direction\n1: counterclockwise\n2: clockwise", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B6F", "cm2_hue_mode2", "0: use cm2 hue region definition, 1: use CM2_HUE_MODE to select", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B6F", "cm2_hue_mode", "0: cm2 hue region definition, 1: cm hue region definition", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B6F", "cm2_lp_enb", "disable low-power", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B70", "cm2_h2h_00", "LUT - 1, HH map region 0", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B71", "cm2_h2h_01", "LUT - 1, HH map region 1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B72", "cm2_h2h_02", "LUT - 1, HH map region 2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B73", "cm2_h2h_03", "LUT - 1, HH map region 3", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B74", "cm2_h2h_04", "LUT - 1, HH map region 4", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B75", "cm2_h2h_05", "LUT - 1, HH map region 5", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B76", "cm2_h2h_06", "LUT - 1, HH map region 6", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B77", "cm2_h2h_07", "LUT - 1, HH map region 7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B78", "cm2_h2h_08", "LUT - 1, HH map region 8", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B79", "cm2_h2h_09", "LUT - 1, HH map region 9", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B7A", "cm2_h2h_0a", "LUT - 1, HH map region 10", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B7B", "cm2_h2h_0b", "LUT - 1, HH map region 11", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B7C", "cm2_h2h_0c", "LUT - 1, HH map region 12", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B7D", "cm2_h2h_0d", "LUT - 1, HH map region 13", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B7E", "cm2_h2h_0e", "LUT - 1, HH map region 14", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B7F", "cm2_h2h_0f", "LUT - 1, HH map region 15", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B80", "cm2_h2h_10", "LUT - 1, HH map region 16", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B81", "cm2_h2h_11", "LUT - 1, HH map region 17", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B82", "cm2_h2h_12", "LUT - 1, HH map region 18", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B83", "cm2_h2h_13", "LUT - 1, HH map region 19", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B84", "cm2_h2h_14", "LUT - 1, HH map region 20", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B85", "cm2_h2h_15", "LUT - 1, HH map region 21", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B86", "cm2_h2h_16", "LUT - 1, HH map region 22", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B87", "cm2_h2h_17", "LUT - 1, HH map region 23", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B88", "cm2_h2s_00", "LUT - 1, HS map region 0", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B89", "cm2_h2s_01", "LUT - 1, HS map region 1", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B8A", "cm2_h2s_02", "LUT - 1, HS map region 2", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B8B", "cm2_h2s_03", "LUT - 1, HS map region 3", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B8C", "cm2_h2s_04", "LUT - 1, HS map region 4", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B8D", "cm2_h2s_05", "LUT - 1, HS map region 5", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B8E", "cm2_h2s_06", "LUT - 1, HS map region 6", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B8F", "cm2_h2s_07", "LUT - 1, HS map region 7", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B90", "cm2_h2s_08", "LUT - 1, HS map region 8", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B91", "cm2_h2s_09", "LUT - 1, HS map region 9", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B92", "cm2_h2s_0a", "LUT - 1, HS map region 10", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B93", "cm2_h2s_0b", "LUT - 1, HS map region 11", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B94", "cm2_h2s_0c", "LUT - 1, HS map region 12", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B95", "cm2_h2s_0d", "LUT - 1, HS map region 13", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B96", "cm2_h2s_0e", "LUT - 1, HS map region 14", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B97", "cm2_h2s_0f", "LUT - 1, HS map region 15", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B98", "cm2_h2s_10", "LUT - 1, HS map region 16", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B99", "cm2_h2s_11", "LUT - 1, HS map region 17", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B9A", "cm2_h2s_12", "LUT - 1, HS map region 18", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B9B", "cm2_h2s_13", "LUT - 1, HS map region 19", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B9C", "cm2_h2s_14", "LUT - 1, HS map region 20", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B9D", "cm2_h2s_15", "LUT - 1, HS map region 21", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B9E", "cm2_h2s_16", "LUT - 1, HS map region 22", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0B9F", "cm2_h2s_17", "LUT - 1, HS map region 23", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BA0", "cm2_h2i_00", "LUT - 1, HI map region 0", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BA1", "cm2_h2i_01", "LUT - 1, HI map region 1", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BA2", "cm2_h2i_02", "LUT - 1, HI map region 2", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BA3", "cm2_h2i_03", "LUT - 1, HI map region 3", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BA4", "cm2_h2i_04", "LUT - 1, HI map region 4", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BA5", "cm2_h2i_05", "LUT - 1, HI map region 5", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BA6", "cm2_h2i_06", "LUT - 1, HI map region 6", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BA7", "cm2_h2i_07", "LUT - 1, HI map region 7", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BA8", "cm2_h2i_08", "LUT - 1, HI map region 8", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BA9", "cm2_h2i_09", "LUT - 1, HI map region 9", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BAA", "cm2_h2i_0a", "LUT - 1, HI map region 10", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BAB", "cm2_h2i_0b", "LUT - 1, HI map region 11", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BAC", "cm2_h2i_0c", "LUT - 1, HI map region 12", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BAD", "cm2_h2i_0d", "LUT - 1, HI map region 13", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BAE", "cm2_h2i_0e", "LUT - 1, HI map region 14", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BAF", "cm2_h2i_0f", "LUT - 1, HI map region 15", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB0", "cm2_h2i_10", "LUT - 1, HI map region 16", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB1", "cm2_h2i_11", "LUT - 1, HI map region 17", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB2", "cm2_h2i_12", "LUT - 1, HI map region 18", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB3", "cm2_h2i_13", "LUT - 1, HI map region 19", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB4", "cm2_h2i_14", "LUT - 1, HI map region 20", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB5", "cm2_h2i_15", "LUT - 1, HI map region 21", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB6", "cm2_h2i_16", "LUT - 1, HI map region 22", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB7", "cm2_h2i_17", "LUT - 1, HI map region 23", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB8", "yeak_w_en", "luma weight enable", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB8", "pk_tx_en", "Allow peak and txt enhancement work simutaneously", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB8", "pk_lp_dis", "disable low-power", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB8", "pk_reg_ch0_mask_mode", "For text enhance debug", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB8", "pk_reg_ch0_text_enhance_en", "These bits enable the text enhancement, priority hight than Luma peaking (LUMA_PEAK_EN) \n0: disabled , 1: enabled", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB8", "pk_reg_ch0_ypeak_en", "This bit enables the luma horizontal peaking control , \n0: disabled , 1: enabled", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB9", "pk_reg_ch0_ycoring", "To control Luma Signal throshold ( coring )", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BB9", "pk_remap_en", "For luma peaking\n0: disable remapping curve\n1: enable reampping curve", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BBA", "pk_reg_ch0_ygain", "Strength of luma peaking\npeaking_gain = peaking * ygain >> 10", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BBB", "pk_reg_ch0_noise_th", "Luminace Noise Threshold Recommended value to 20h (10 bits)", "7-0", "RW", "0x20", "0x20", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BBC", "pk_reg_ch0_luma_enhance_more", "1: double the Y enhanced value", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BBC", "pk_reg_ch0_luma_level", "", "6-4", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BBC", "pk_reg_ch0_inverse_filter", "To enhance white on black text, default:disable", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BBC", "pk_reg_ch0_under_shoot_clamping_en", "Under shoot clamping enable", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BBC", "pk_reg_ch0_chroma_level", "Chrominance Threshold Level,higher level enhances more color pixels, \n00: 128 01: 256\n10: 512 11: 1024", "1-0", "RW", "0x03", "0x03", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BBD", "pure_color_en", "Pure color check enable, 0: disable, 1: enable", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BBE", "pure_color_r_max", "Used for check pure RGB criterion\nEX: pure R color\n(R>0) & (G≦Pure_color_g_max) & (B≦Pure_color_b_max)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BBF", "pure_color_g_max", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BC0", "pure_color_b_max", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BC1", "pure_color_w_max", "Used for check pure White criterion\n((|R-G|, |G-B|, |B-R|)≦Pure_color_w_max)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BC2", "pk_tap[0]", "Coefficents of multi-bend filter\npeaking = ∑(in[n] * pk_tap[abs(n)]), n ∈ [-4, 4]\n\nnote: pk_tap[*] are signed integer", "7-0", "RW", "0x34", "0x34", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BC3", "pk_tap[1]", "", "7-0", "RW", "0x0E", "0xF2", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BC4", "pk_tap[2]", "", "7-0", "RW", "0x09", "0xF7", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BC5", "pk_tap[3]", "", "7-0", "RW", "0x02", "0xFE", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BC6", "pk_tap[4]", "", "7-0", "RW", "0x01", "0xFF", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BC7", "pk_remap[0][11:4]", "pk_remap_en = 1, \n peaking_out = peaking_curve\nelse,\n peaking_out = peaking_gain\n\nPeaking_gain ∈ [-2048, 2047] is divided into 32 pieces, pk_remap[0]~pk_remap[33] are the values of turning points\npk_remap[*] ∈ [-2048, 2047]", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BC8", "pk_remap[0][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BC8", "pk_remap[1][11:8]", "", "3-0", "RW", "0x08", "0x08", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BC9", "pk_remap[1][7:0]", "", "7-0", "RW", "0x00", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BCA", "pk_remap[2][11:4]", "", "7-0", "RW", "0x90", "0x90", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BCB", "pk_remap[2][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BCB", "pk_remap[3][11:8]", "", "3-0", "RW", "0x09", "0x09", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BCC", "pk_remap[3][7:0]", "", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BCD", "pk_remap[4][11:4]", "", "7-0", "RW", "0xA0", "0xA0", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BCE", "pk_remap[4][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BCE", "pk_remap[5][11:8]", "", "3-0", "RW", "0x0A", "0x0A", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BCF", "pk_remap[5][7:0]", "", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BD0", "pk_remap[6][11:4]", "", "7-0", "RW", "0xB0", "0xB0", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BD1", "pk_remap[6][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BD1", "pk_remap[7][11:8]", "", "3-0", "RW", "0x0B", "0x0B", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BD2", "pk_remap[7][7:0]", "", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BD3", "pk_remap[8][11:4]", "", "7-0", "RW", "0xC0", "0xC0", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BD4", "pk_remap[8][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BD4", "pk_remap[9][11:8]", "", "3-0", "RW", "0x0C", "0x0C", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BD5", "pk_remap[9][7:0]", "", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BD6", "pk_remap[10][11:4]", "", "7-0", "RW", "0xD0", "0xD0", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BD7", "pk_remap[10][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BD7", "pk_remap[11][11:8]", "", "3-0", "RW", "0x0D", "0x0D", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BD8", "pk_remap[11][7:0]", "", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BD9", "pk_remap[12][11:4]", "", "7-0", "RW", "0xE0", "0xE0", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BDA", "pk_remap[12][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BDA", "pk_remap[13][11:8]", "", "3-0", "RW", "0x0E", "0x0E", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BDB", "pk_remap[13][7:0]", "", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BDC", "pk_remap[14][11:4]", "", "7-0", "RW", "0xF0", "0xF0", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BDD", "pk_remap[14][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BDD", "pk_remap[15][11:8]", "", "3-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BDE", "pk_remap[15][7:0]", "", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BDF", "pk_remap[16][11:4]", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BE0", "pk_remap[16][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BE0", "pk_remap[17][11:8]", "", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BE1", "pk_remap[17][7:0]", "", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BE2", "pk_remap[18][11:4]", "", "7-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BE3", "pk_remap[18][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BE3", "pk_remap[19][11:8]", "", "3-0", "RW", "0x01", "0x01", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BE4", "pk_remap[19][7:0]", "", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BE5", "pk_remap[20][11:4]", "", "7-0", "RW", "0x20", "0x20", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BE6", "pk_remap[20][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BE6", "pk_remap[21][11:8]", "", "3-0", "RW", "0x02", "0x02", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BE7", "pk_remap[21][7:0]", "", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BE8", "pk_remap[22][11:4]", "", "7-0", "RW", "0x30", "0x30", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BE9", "pk_remap[22][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BE9", "pk_remap[23][11:8]", "", "3-0", "RW", "0x03", "0x03", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BEA", "pk_remap[23][7:0]", "", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BEB", "pk_remap[24][11:4]", "", "7-0", "RW", "0x40", "0x40", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BEC", "pk_remap[24][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BEC", "pk_remap[25][11:8]", "", "3-0", "RW", "0x04", "0x04", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BED", "pk_remap[25][7:0]", "", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BEE", "pk_remap[26][11:4]", "", "7-0", "RW", "0x50", "0x32", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BEF", "pk_remap[26][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BEF", "pk_remap[27][11:8]", "", "3-0", "RW", "0x05", "0x05", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BF0", "pk_remap[27][7:0]", "", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BF1", "pk_remap[28][11:4]", "", "7-0", "RW", "0x60", "0x60", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BF2", "pk_remap[28][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BF2", "pk_remap[29][11:8]", "", "3-0", "RW", "0x06", "0x06", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BF3", "pk_remap[29][7:0]", "", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BF4", "pk_remap[30][11:4]", "", "7-0", "RW", "0x70", "0x70", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BF5", "pk_remap[30][3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BF5", "pk_remap[31][11:8]", "", "3-0", "RW", "0x07", "0x07", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BF6", "pk_remap[31][7:0]", "", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BF7", "pk_remap[32][11:4]", "", "7-0", "RW", "0x7F", "0x7F", "0"));
            myreg.Add(new TCON_REG("CM(0x0B)", "CM", "0x0BF8", "pk_remap[32][3:0]", "", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C00", "en_po_mask", "enable power on mask PWMO", "7", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C00", "po_mask_value", "PWMO = po_mask_value when power on.", "6", "RW", "0x01", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C00", "po_mask_pwmo_frame", "power on 時, PWMO遮敝的frame 數", "5-0", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C01", "en_pwmi_bound_min", "disable low-power check switch", "7", "RW", "0x01", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C01", "bound_min_type", "0 : 當PWMI_duty < PWM_min時, 視同輸入PWM_min\n1 : 將 PWMI 0%~100%, remapping 到 PWM_min ~ 100%", "6", "RW", "0x01", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C01", "PWMI_filter", "enable PWMI filter, 31 osc_clk", "5", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C01", "PWMI_12:bit", "0 : PWMI 只有8-bit準確度, 相當於沒有ECO\n1 : PWMI 提高12-bit準確度, ECO", "4", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C01", "pwmi_stable_cnt", "pwmi 需連續穩定幾個cycle,才算穩定\n* 當pwmi_stable_cnt == 4’d0, function off", "3-0", "RW", "0x01", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C02", "en_duty0_offDBC", "當PWM_max duty = 0%, 關閉DBC功能", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C02", "en_lowduty_offDBC", "當PWM_max duty低於 pwm_min,關閉DBC功能", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C02", "pwmi_duty_diff", "設定PWMI_duty差距多少階內,不更新", "5-0", "RW", "0x01", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C03", "en_inv_pwmo", "反相輸出PWMO", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C03", "pwmo_bound_min", "將輸出限制在min_duty", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C03", "pwmo_dither_mode", "0 : 不升頻\n1 : PWMO升四倍頻, 改以dither 的方式產生需要的duty\n2 : PWMO升四倍頻, resolution降至10bits", "5-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C03", "prd_sel(int)", "選擇內部頻率的基頻\n0. vsync\n1. hsync\n2. 50Hz頻率\n3. 將PWMI resync後當做基頻 *for debug", "3-2", "RW", "0x02", "0x02", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C03", "prd_divider[9:8]", "將內部基頻倍頻, PWMO頻率 = 基頻 * prd_divider[9:0]", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C04", "prd_divider[7:0]", "將內部基頻倍頻, PWMO頻率 = 基頻 * prd_divider[9:0]", "7-0", "", "0x04", "0x28", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C05", "on_duty_sel", "當DBCEN=1時,選擇PWMO duty\n0. algorithm result\n1. pwmi duty\n2. pwm_max *for debug\n3. alogithm result * pwmi_duty", "7-6", "RW", "0x00", "0x03", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C05", "on_en_internal_freq", "1. PWMO頻率由內部產生(internal), \n0. PWMO頻率由PWMI產生(external)", "5", "RW", "0x01", "0x01", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C05", "on_bypass_pwmi", "PWMO = PWMI", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C05", "off_duty_sel", "當DBCEN=0時,選擇PWMO duty\n0. off_pwm_set(0x11h)\n1. pwmi duty\n2. pwm_max = max(pwm_min,pwm_max)\n3. off_pwm_set(0x11h) * pwmi_duty", "3-2", "RW", "0x00", "0x03", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C05", "off_en_int_freq", "當DBCEN=0時,選擇PWMO freq\n1. PWMO頻率由內部產生(internal), \n0. PWMO頻率由PWMI產生(external)", "1", "RW", "0x01", "0x01", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C05", "off_bypass_pwmi", "CABC off時, PWMO = PWMI", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C06", "max_duty_from_reg", "0 : max_duty = pwmi_duty\n1 : max_duty = register setting (0x07H)", "7", "RW", "0x01", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C06", "tmp_prd_divider[6:0]", "Used Valuse when CABC pin Enable\nMCU搬值用, 若tmp_prd_divider[9:0] = 0x000, 則Default會由MCU寫0x028到pre_divider[9:0] Register\nUsed Valuse when CABC pin Enable\nMCU搬值用, 若tmp_prd_divider[9:0] = 0x000, 則Default會由MCU寫0x028到pre_divider[9:0] Register\n", "6-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C07", "max_duty", "duty最大值", "7-0", "RW", "0xFF", "0xE6", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C08", "min_duty", "duty最小值", "7-0", "RW", "0x33", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C09", "offduty", "cabc off時, algorithm out", "7-0", "RW", "0xFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C0A", "tmp_prd_divider[9:7]", "Used Valuse when CABC pin Enable\nMCU搬值用, 若tmp_prd_divider[9:0] = 0x000, 則Default會由MCU寫0x028到pre_divider[9:0] Register", "6-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C0A", "guard_operational_value", "operational_value差距多少以內不動作", "3-0", "RW", "0x01", "0x01", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C0B", "average_ratio", "設定參考frame 平均值的比例 (0~8)\n1 : 15/16 maximum Luminance + 1/16 average Luminance\n2 : 14/16 maximum Luminance + 2/16 average Luminance\n…\n15 : average Luminance", "7-4", "RW", "0x0F", "0x0F", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C0B", "allow_distort", "0 : maximum Luminance\n1 : allow distrot 0.39% pixels\n2 : allow distort 0.78% pixels\n…\n15 : allow distort 5.8% pixels", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C0C", "Adjust_frame_rate", "PWMO一次穩定幾個frame\nAdjust_frame_rate = 0, PWMO duty穩定1個frame", "7-4", "RW", "0x04", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C0C", "turning_pt_step", "轉折點改變速度\n當step = 4’h0, 4 frame到target", "3-0", "RW", "0x01", "0x01", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C0D", "duty_step", "duty改變速度\n當step = 4’h0, 與turning point 同時到target", "7-4", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C0D", "data_comp_step", "資料補償改變速度\n當step = 4’h0, 與duty 同時到target", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C0E", "patt_det_step", "pattern detect改變速度\n當step = 4’h0, 4frame 到target", "7-4", "RW", "0x01", "0x0D", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C0E", "max_algorithm_mode", "0 : max value algorithm tracking 快\n1 : max value algorithm tracking 慢", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C0E", "en_duty_change_rstdbc", "max_duty改變時, reset DBC", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C0E", "edp_tak_control", "部份設定值改由eDP register控制", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C0F", "manual_turning_pt", "當manual_turning_pt !=0時,決定轉折點位置", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C10", "enhance_ratio", "控制turning point/2 以下的 gain = enhnace_ratio/128", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C11", "pattern_det_th", "利用opernational_color +/- pattern_det_th 的數量來控制data compensation curve,當數量越多, data compensation越強,灰階越不smooth", "7-0", "RW", "0x00", "0x10", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C12", "modify_rgb", "是否依Algorithm 結果改變輸出的RGB", "7", "RW", "0x01", "0x01", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C12", "datacompensationmode", "3 : Reserved\n2 : 使用以上兩種畫面補償方式\n1 : 使用靜態畫面補償方式\n0 : 使用動態畫面補償方式", "6-5", "RW", "0x02", "0x02", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C12", "en_6bit", "enable 6bit in", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C12", "en_pixel_base_average", "0 : 計算average時, pixel color = average(R,G,B)\n1 : 計算average時, pixel color = maximum(R,G,B)", "3", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C12", "dithermode", "0 : no dither, 10bits out\n1 : 12à10 dither, 10 bits out\n2 : 10à8 dither, 8 bits out\n3 : Reserved", "1-0", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C13", "en_soft_on", "開啟soft on 功能", "7", "RW", "0x01", "0x01", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C13", "en_soft_off", "開啟soft off 功能", "6", "RW", "0x01", "0x01", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C13", "cabc_off_pwm_path_sel", "當CABC OFF時, PWMO選擇CABC內部 gen 還是 directly bypass PWMI\n0 : 看CABC ON/OFF決定, 既然是CABC OFF就是 directly bypass PWMI\n1 : 選擇CABC內部 gen (要注意要有OSC CLK)", "5", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C13", "cabc_off_data_path_sel", "當CABC OFF時, output pixel data 選擇 CABC 補償 還是 bypass input pixel \n0 : 看CABC ON/OFF決定, 既然是CABC OFF就是 bypass input pixel \n1 : 選擇 CABC 補償結果 (要注意要有sscg CLK)", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C13", "off_frame_rate", "當soft on/off時,PWMO一次穩定幾個frame", "3-0", "RW", "0x02", "0x01", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C14", "sel_dbc_rst_mode", "0: 當pwmi_duty 改變時, reset dbc\n1: 當pwmi_duty 改變時, 且pwmi_duty < pwm_min, reset dbc\n*avlidable when en_maxduty_update_rstDBC =1", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C14", "en_auto_resolution", "0: 參考前端的hact, vact\n1: 不參考前端的hact, vact, 自動計算", "6", "RW", "0x01", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C14", "sre_take_control", "由SRE的計算結果當PWMI", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C14", "manualinsertstatictable", "手動填入static table (0x18~0x1f)", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C14", "en_gray_frame_guard", "當灰階圖時, 仍要guard_oper", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C14", "en_manual_min_oper_value", "手動填入minimum operational value (0x15)", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C14", "from_wfrm_det", "當為白畫面時, patt_det = 80", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C14", "manual_patt_det", "手動填入pattern detect strength (0x11)", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C15", "minoperationalvalue", "minimumoperational value, avalible when en_manual_min_oper _value = 1", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C16", "en_dbc_testmode", "enable dbc testmode + protect key (0x17)", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C16", "Pseudo_table", "自動填寫table", "6", "RW", "0x01", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C16", "freeze_dbc", "", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C16", "rd_data_sel", "當開啟DBLC_0f watching data 功能時,選擇要看的data", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C17", "watchingdata", "need protection key", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C18", "static_table_200h", "static table 200h", "7-0", "RW", "0xEB", "0xEB", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C19", "static_table_400h", "static table 400h", "7-0", "RW", "0x9A", "0x9A", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C1A", "static_table_600h", "static table 600h", "7-0", "RW", "0x49", "0x49", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C1B", "static_table_800h", "static table 800h", "7-0", "RW", "0x63", "0x63", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C1C", "static_table_A00h", "static table A00h", "7-0", "RW", "0x7E", "0x7E", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C1D", "static_table_C00h", "static table C00h", "7-0", "RW", "0x8E", "0x8E", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C1E", "static_table_E00h", "static table E00h", "7-0", "RW", "0x7B", "0x7B", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C1F", "static_table_FFFh", "static table FFFh", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C20", "LGMplusdutyenable", "", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C20", "algorithm_dutyforcevalueenable", "", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C20", "pwmi_dutyforcevalueenable", "", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C20", "max_dutyforcevalueenable", "", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C20", "eDP_ECO_pwmo_gen_en", "eDP mode 時, 沒有sscg clk, pwmo gen en無法啟動, 要把這個bit 設 1 (eDP mode only)", "3", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C20", "eDP_ECO_prd_gen_vs", "eDP mode 時, 沒有sscg clk, input prd check 用的vs會消失, 這個 bit 設 1會改用input vs (eDP mode only)", "2", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C20", "ECOedpbacklightbrightnessenable", "", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C20", "ECOedpbacklightfrequencyenable", "", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C21", "ECOedpbacklightfrequencysetting", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C22", "mplus_dutyforcevalue[12:8]", "LG mplus duty force value, multiple with algorithm_duty value (default = 50%)", "4-0", "RW", "0x10", "0x10", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C23", "mplus_dutyforcevalue[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C24", "algorithm_dutyforcevalue[11:8]", "algorithm duty force value, for MCU control", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C25", "algorithm_dutyforcevalue[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C26", "CABCfinaldutyreaden", "0: 相容於Cut A, {0x0C2A[3:0], 0x0C2B[7:0]}) = CABC PWMI duty\n1: ECO flow, {0x0C2A[3:0], 0x0C2B[7:0]}) = CABC final duty", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C26", "CABCpatt_detreaden", "0: 相容於Cut A, 0x0C2D[7:0] = max_duty_lsb[7:0]\n1: ECO flow, 0x0C2D[7:0] = CABC pattern detection result", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C26", "pwmi_dutyforcevalue[11:8]", "pwmi duty force value, for MCU control", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C27", "pwmi_dutyforcevalue[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C28", "4'b0", "", "7-4", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C28", "algorithm_dutyread_data[11:8]", "", "3-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C29", "algorithm_dutyread_data[7:0]", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C2A", "4'b0", "", "7-4", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C2A", "pwmi_dutyread_data[11:8]", "ECO 切換不同read data, based on 0x26[7]", "3-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C2B", "pwmi_dutyread_data[7:0]", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C2C", "4'b0", "", "7-4", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C2C", "max_dutyread_data[11:8]", "", "3-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C2D", "max_dutyread_data[7:0]", "ECO 切換不同read data, based on 0x26[6]", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C2E", "pwmoECOdisable", "ECO function for PWMO glitch\n0 : ECO enable : PWMO don't update when (PWMO == 1)\n1 : ECO disable : original design, PWMO update when (PWMO == 1)", "7", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C2E", "psrECOenable", "PSR mode ECO for using psr_sel_ctrl signal\n0 : don't using psr_sel_ctrl signal, when data_de come in, duty will update\n1 : using psr_sel_ctrl signal to stop data_de, in this region, duty will not update", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C2E", "ECOpwmoupdate", "針對 PWMO glitch ECO (0x2e[7]) 會讓stable cnt不穩, 改變ECO方式\n把造成PWMO glitch 的 (PWMO == 1) 改成 pre_PWMO (PWMO == 1 的前1t)\n0x2e[7] = 1, 0x2e[5] = 1, PWMO最新解法, 能同時解到 glitch 及 stable cnt 不穩\n0x2e[7] = 1, 0x2e[5] = 0, 最原本CABC PWMO做法 (870), 會有PWMO glitch, 但是 stable cnt OK\n0x2e[7] = 0, 0x2e[5] = x, 851 PWMO 做法, 不會有 PWMO glitch, 但是 stable cnt 不穩", "5", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C2E", "r_min_duty_p1", "0 : ro_min_duty\n1 : ro_min_duty + 1", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C2E", "ECOedpbacklightbrightness[11:8]", "", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C2F", "ECOedpbacklightbrightness[7:0]", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C30", "r_turnimg_pt_step_ext", "extent turnimg_pt_step bits from 4bit to 8bit\n1 : ro_turnimg_pt_step = turnimg_pt_step_ext_8b(reg31) \n0 : ro_turnimg_pt_step = turnimg_pt_step_ext_4b(reg_0c[3:0]) ", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C30", "r_duty_step_ext", "extent duty_step bits from 4bit to 8bit\n1 : ro_duty_step_step = duty_step_step_ext_8b(reg32) \n0 : ro_duty_step_step = duty_step_step_ext_4b(reg_0d[7:4]) ", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C30", "r_data_comp_step_ext", "extent data_comp_step bits from 4bit to 8bit\n1 : ro_data_comp_step = data_comp_step_ext_8b(reg33) \n0 : ro_data_comp_step = data_comp_step_ext_4b(reg_0d[3:0]) ", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C30", "r_patt_det_step_ext", "extent patt_det_step bits from 4bit to 8bit\n1 : ro_patt_det_step = patt_det_step_ext_8b(reg34) \n0 : ro_patt_det_step = patt_det_step_ext_4b(reg_0e[7:4]) ", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C31", "r_turnimg_pt_step_8b", "turnimg_pt_step 8bit data", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C32", "r_duty_step_8b", "duty_step 8bit data", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C33", "r_data_comp_step_8b", "data_comp_step 8bit data", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C34", "r_patt_det_step_8b", "patt_det_step 8bit data", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C35", "ri_max_value", "cabc max value for turning point", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C36", "ri_avg_value", "frame pixel avg value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C37", "ri_max_frm", "frame pixel max value", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C38", "ri_max95_hist", "histogram max95 result", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C39", "ro_max_choice", "histogram max95 result選擇frame的max或max95運算結果\n1 : max, 0 : max95 result", "7", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C39", "ro_max_max95_equal_choi", "如果max落在max95的該histogram，選擇max或histogram max95\n1 : max, 0 : histogram max95", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C39", "ro_max_max95_choi", "histogram max95 result選擇max和max95的blend result 或 histogram max95\n1 : blending result, 0 : histogram max95", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C39", "ro_max95_hist_en", "turning point 選擇 histogram max95 或 逼近法max95\n1 : histogram max95, 0 : 逼近法max95", "4", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C39", "ro_max_max95_ble_ratio[8]", "max 和max95 blending ratio, max = 256", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CABC (0x0C)", "CABC", "0x0C3A", "ro_max_max95_ble_ratio[7:0]", "max 和max95 blending ratio, max = 256", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C40", "en_value_test", "enable force input data\n2'b00: 0\n2'b01: R\n2'b10: G\n2'b11: B", "7-6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C40", "test_in_value[9:4]", "input pixel", "5-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C41", "test_in_value[3:0]", "input pixel", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C41", "test_out[11:8]", "output pixel", "3-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C42", "test_out[7:0]", "output pixel", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C4A", "read_port_sel", "sel which port is read\n0: port0\n1: port1\n2: port2\n3: port3", "7-6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C4A", "gate_port_1", "gating 1 port read\n0: normal\n1: gating", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C4A", "gate_port_2", "gating 2 port read\n0: normal\n1: gating", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C4A", "gate_port_3", "gating 3 port read\n0: normal\n1: gating", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C4A", "reg_force_addr[9:8]", "LUT write address", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C4B", "reg_force_addr[7:0]", "LUT write address", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C4C", "reg_force_wdata[11:4]", "LUT write data*usage: fill 0x3B~0x3C", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C4D", "reg_force_wdata[3:0]", "LUT write data*usage: fill 0x3B~0x3C", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C4D", "reg_force_r", "force R", "3", "W", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C4D", "reg_force_g", "force G", "2", "W", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("ACC(0x0C)", "ACC", "0x0C4D", "reg_force_b", "force B", "1", "W", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1340", "sel_bist", "used to select bist pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1342", "sel_cabc_en", "used to select cabc_en pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1344", "sel_gpio1", "used to select GPIO1 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1345", "sel_gpio2", "used to select GPIO2 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1346", "sel_gpio3", "used to select GPIO3 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1347", "sel_gpio4", "used to select GPIO4 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1348", "sel_gpio5", "used to select GPIO5 pad output from which input sources", "5-0", "RW", "0x00", "0x30", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1349", "sel_gpio6", "used to select GPIO6 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x134A", "sel_gpio7", "used to select GPIO7 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x134B", "sel_gpio8", "used to select GPIO8 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x134C", "sel_gpio9", "used to select GPIO9 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x134D", "sel_pwmi", "used to select pwmi pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x134E", "sel_pwmo", "used to select pwmo pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x134F", "sel_bclc", "used to select bclc pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1350", "sel_stv1", "used to select stv1 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1351", "sel_stv2", "used to select stv2 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1352", "sel_cpv", "used to select CPV pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1353", "sel_oe1", "used to select oe1 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1354", "sel_oe2", "used to select oe2 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1355", "sel_gpio10", "used to select GPIO10 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1356", "sel_gpio11", "used to select GPIO11 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1357", "sel_gpio12", "used to select GPIO12 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1358", "sel_gpio13", "used to select GPIO13 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135B", "nor_bist_out_en", "used to define bist pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135B", "nor_cabc_en_out_en", "used to define cabc_en pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135B", "nor_gpio1_out_en", "used to define GPIO1 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "3", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135B", "nor_gpio2_out_en", "used to define GPIO2 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "2", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135B", "nor_gpio3_out_en", "used to define GPIO3 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "1", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135B", "nor_gpio4_out_en", "used to define GPIO4 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "0", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135C", "nor_gpio5_out_en", "used to define GPIO5 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "7", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135C", "nor_gpio6_out_en", "used to define GPIO6 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "6", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135C", "nor_gpio7_out_en", "used to define GPIO7 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "5", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135C", "nor_gpio8_out_en", "used to define GPIO8 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "4", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135C", "nor_gpio9_out_en", "used to define GPIO9 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "3", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135C", "nor_pwmi_out_en", "used to define pwmi pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135C", "nor_pwmo_out_en", "used to define pwmo pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "1", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135C", "nor_bclc_out_en", "used to define bclc pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "0", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135D", "nor_stv1_out_en", "used to define stv1 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "7", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135D", "nor_stv2_out_en", "used to define stv2 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "6", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135D", "nor_cpv_out_en", "used to define cpv pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "5", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135D", "nor_oe1_out_en", "used to define oe1 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "4", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135D", "nor_oe2_out_en", "used to define oe2 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "3", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135D", "nor_frame_lock_out_en", "used to define frame_lock pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "2", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135D", "nor_hpd_out_en", "used to define hpd pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "1", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135E", "nor_gpio10_out_en", "used to define GPIO10 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "7", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135E", "nor_gpio11_out_en", "used to define GPIO11 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "6", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135E", "nor_gpio12_out_en", "used to define GPIO12 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "5", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135E", "nor_gpio13_out_en", "used to define GPIO13 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "4", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135E", "nor_gpio14_out_en", "used to define GPIO13 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "3", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135E", "nor_gpio15_out_en", "used to define GPIO13 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "2", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135E", "nor_gpio16_out_en", "used to define GPIO13 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "1", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135E", "nor_gpio17_out_en", "used to define GPIO13 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "0", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135F", "nor_gpio18_out_en", "used to define GPIO13 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "7", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135F", "nor_gpio19_out_en", "used to define GPIO13 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "6", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135F", "nor_gpio20_out_en", "used to define GPIO13 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "5", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135F", "nor_gpio21_out_en", "used to define GPIO13 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "4", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135F", "nor_gpio22_out_en", "used to define GPIO13 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "3", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135F", "nor_gpio23_out_en", "used to define GPIO13 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "2", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135F", "nor_gpio24_out_en", "used to define GPIO13 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "1", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x135F", "nor_gpio25_out_en", "used to define GPIO13 pin is output pin or input pin during normal operation useful when mcu_ctrl_pad[*] = 0\n1'b1: output pin; 1'b0: input pin", "0", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1360", "enb_open_drain_spi_cs", "used to define spi_cs pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "7", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1360", "enb_open_drain_spi_ck", "used to define spi_ck pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "6", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1360", "enb_open_drain_spi_di", "used to define spi_di pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "5", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1360", "enb_open_drain_spi_do", "used to define spi_do pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "4", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1360", "enb_open_drain_pwmo", "used to define pwmo pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "3", "RW", "0x01", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1360", "enb_open_drain_bclc", "used to define bclc pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "2", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1360", "enb_open_drain_stv1", "used to define stv1 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "1", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1360", "enb_open_drain_stv2", "used to define stv2 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "0", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1361", "enb_open_drain_cpv", "used to define cpv pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "7", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1361", "enb_open_drain_oe1", "used to define oe1 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "6", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1361", "enb_open_drain_oe2", "used to define oe2 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "5", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1361", "enb_open_drain_gpio1", "used to define gpio1 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "4", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1361", "enb_open_drain_gpio2", "used to define gpio2 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "3", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1361", "enb_open_drain_gpio3", "used to define gpio3 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "2", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1361", "enb_open_drain_gpio4", "used to define gpio4 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "1", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1361", "enb_open_drain_gpio5", "used to define gpio5 pin pad type is open drain or push-pull (default for multi-tcon sync)\n1'b0: open drain; 1'b1: push-pull", "0", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1362", "enb_open_drain_gpio6", "used to define gpio6 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "7", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1362", "enb_open_drain_gpio7", "used to define gpio7 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "6", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1362", "enb_open_drain_gpio8", "used to define gpio8 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "5", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1362", "enb_open_drain_gpio9", "used to define gpio9 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "4", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1362", "enb_open_drain_gpio10", "used to define gpio10 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "3", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1362", "enb_open_drain_gpio11", "used to define gpio11 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "2", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1362", "enb_open_drain_gpio12", "used to define gpio12 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "1", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1362", "enb_open_drain_gpio13", "used to define gpio13 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "0", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1363", "enb_open_drain_gpio14", "used to define gpio14 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "7", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1363", "enb_open_drain_gpio15", "used to define gpio15 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "6", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1363", "enb_open_drain_gpio16", "used to define gpio16 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "5", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1363", "enb_open_drain_gpio17", "used to define gpio17 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "4", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1363", "enb_open_drain_gpio18", "used to define gpio18 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "3", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1363", "enb_open_drain_gpio19", "used to define gpio19 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "2", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1363", "enb_open_drain_gpio20", "used to define gpio20 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "1", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1363", "enb_open_drain_gpio21", "used to define gpio21 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "0", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1364", "enb_open_drain_gpio22", "used to define gpio22 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "7", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1364", "enb_open_drain_gpio23", "used to define gpio23 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "6", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1364", "enb_open_drain_gpio24", "used to define gpio24 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "5", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1364", "enb_open_drain_gpio25", "used to define gpio25 pin pad type is open drain or push-pull\n1'b0: open drain; 1'b1: push-pull", "4", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1365", "multi_sync0_en", "specify whether the corresponding pin enable for multi-tcon sync (IO from enable)\n[7] gpio6, [6] reservd, [5] gpio8, [4] gpio9, [3] gpio10, [2] gpio11, [1] gpio12, [0] gpio13,\n1'b1: enable multi-tcon sync ctrl\n1'b0: disable multi-tcon sync ctrl", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1366", "multi_sync1_en", "specify whether the corresponding pin enable for multi-tcon sync (IO output source)\n[7] gpio6, [6] reservd, [5] gpio8, [4] gpio9, [3] gpio10, [2] gpio11, [1] gpio12, [0] gpio13,\n1'b1: enable multi-tcon sync ctrl\n1'b0: disable multi-tcon sync ctrl", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1367", "multi_sync2_en", "specify whether the corresponding pin enable for multi-tcon sync (IO output enable)\n[7] gpio6, [6] reservd, [5] gpio8, [4] gpio9, [3] gpio10, [2] gpio11, [1] gpio12, [0] gpio13,\n1'b1: enable multi-tcon sync ctrl\n1'b0: disable multi-tcon sync ctrl", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1368", "en_gpio11_pin_sw", "Enable FRAME_LOCK pad from GPIO11\n1'b1: Disable GPIO11 from FRAME_LOCK pad\n1'b0: Enable GPIO11 from FRAME_LOCK pad", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1369", "multi_sync_mpll_ssc_sel", "specify whether the corresponding mpll ssc for multi-tcon sync, \n1'b1: from sscg ssc\n1'b0: from phi ssc", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x1369", "mau_jtag_tdo_en", "specify mau jtag output enable\n1'b1: gpio8 as output, gpio8 from mau jtag tdo out\n1'b0: mau jtag disabled (normal mode)", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x136A", "fil_num_sel_gpio11", "specify pin filter depth number for multi-tcon sync pin, for GPIO11", "7-0", "RW", "0x0A", "0x0A", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x136B", "fil_num_sel_gpio12", "specify pin filter depth number for multi-tcon sync pin, for GPIO12", "7-0", "RW", "0x0A", "0x0F", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x136C", "fil_num_sel_gpio13", "specify pin filter depth number for multi-tcon sync pin, for GPIO13", "7-0", "RW", "0x0A", "0x0A", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x136D", "fil_num_sel_gpio6", "specify pin filter depth number for multi-tcon sync pin, for GPIO6", "7-0", "RW", "0x0A", "0x0A", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "Pin_sel", "0x136E", "sel_gpio21", "used to select GPIO21 pad output from which input sources", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "WatchingDE/ClokSelection", "0x1388", "de_sel1[3:0]", "used to select which data enable signal will be output for de watching operation", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "WatchingDE/ClokSelection", "0x1388", "de_sel2[3:0]", "used to select which data enable signal will be output for de watching operation", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "WatchingDE/ClokSelection", "0x1389", "de_sel3[3:0]", "used to select which data enable signal will be output for de watching operation", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "WatchingDE/ClokSelection", "0x1389", "de_sel4[3:0]", "used to select which data enable signal will be output for de watching operation", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "WatchingDE/ClokSelection", "0x138A", "de_sel1[5:4]", "used to select which data enable signal will be output for de watching operation", "7-6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "WatchingDE/ClokSelection", "0x138A", "clk_sel1[3:0]", "used to select which clock will be output for clock watching operation", "5-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "WatchingDE/ClokSelection", "0x138B", "de_sel2[5:4]", "used to select which data enable signal will be output for de watching operation", "7-6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "WatchingDE/ClokSelection", "0x138B", "clk_sel2[5:0]", "used to select which clock will be output for clock watching operation", "5-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "WatchingDE/ClokSelection", "0x138C", "de_sel3[5:4]", "used to select which data enable signal will be output for de watching operation", "7-6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "WatchingDE/ClokSelection", "0x138C", "clk_sel3[5:0]", "used to select which clock will be output for clock watching operation", "5-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "WatchingDE/ClokSelection", "0x138D", "de_sel4[5:4]", "used to select which data enable signal will be output for de watching operation", "7-6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("Test Mode (0x13, 0x4C)", "WatchingDE/ClokSelection", "0x138D", "clk_sel4[5:0]", "used to select which clock will be output for clock watching operation", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1500", "en_od2_reg", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1500", "en_tri_interpol_od2", "0: use 4-point bilinear interpolation 1: use triangular interpolation ", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1500", "en_jud_od2", "1: (non-uniform table需要調整, 下面是16階的例子)\n if f2[7:4] = f1[7:4], 且 f2[3:0] <= f1[3:0], OD公式變成F+xQ+yP+yR\n if f2[7:4] = f1[7:4], 且 f2[3:0] > f1[3:0], OD公式變成F+xQ+yP+xR\n if f2[7:4] != f1[7:4], 則公式不變: F+xQ+yP+xyR\n0: 公式不變", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1500", "sel_lut_f2_od2", "0: use ORIG to look-up table & do interpolation 1: use f2_rec to look-up table & do interpolation", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1500", "keep_max_level", "0: when f2_org > 10'd1020, od ouput is interpolation result\n1: when f2_org > 10'd1020, od output == f2_org ", "3", "RW", "0x01", "0x01", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1500", "od2_fil_on_r", "0: filter_off, 1: filter_on", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1500", "od2_fil_mode_r", "0: abs(f2-f1) 1: select by od1_fil_in_sel", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1501", "od2_fil_in_sel_r", "2'b00: f2-f1, 2'b01: f1-f2, 2'b10: f2, 2'b11: f1", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1501", "od2_fil_slope_r", "2'b00: 1/2, 2'b01:1/4, 2'b10:1/8, 2'b11:1/16", "5-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1501", "od2_fil_offset_r", "0~15 (0~15/16)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1502", "od2_fil_on_g", "0: filter_off, 1: filter_on", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1502", "od2_fil_mode_g", "0: abs(f2-f1) 1: select by od1_fil_in_sel", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1503", "od2_fil_in_sel_g", "2'b00: f2-f1, 2'b01: f1-f2, 2'b10: f2, 2'b11: f1", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1503", "od2_fil_slope_g", "2'b00: 1/2, 2'b01:1/4, 2'b10:1/8, 2'b11:1/16", "5-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1503", "od2_fil_offset_g", "0~15 (0~15/16)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1504", "od2_fil_on_b", "0: filter_off, 1: filter_on", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1504", "od2_fil_mode_b", "0: abs(f2-f1) 1: select by od2_fil_in_sel", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1505", "od2_fil_in_sel_b", "2'b00: f2-f1, 2'b01: f1-f2, 2'b10: f2, 2'b11: f1", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1505", "od2_fil_slope_b", "2'b00: 1/2, 2'b01:1/4, 2'b10:1/8, 2'b11:1/16", "5-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1505", "od2_fil_offset_b", "0~15 (0~15/16)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1506", "static_th_r", "abs(f2_rec - f1) ≤static_th, od output bypass f2_org", "7-0", "RW", "0x04", "0x04", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1507", "static_th_g", "abs(f2_rec - f1) ≤static_th, od output bypass f2_org", "7-0", "RW", "0x04", "0x04", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1508", "static_th_b", "abs(f2_rec - f1) ≤static_th, od output bypass f2_org", "7-0", "RW", "0x04", "0x04", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1509", "od2_fil_th_r", "filter threshold", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x150A", "od2_fil_th_g", "filter threshold", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x150B", "od2_fil_th_b", "filter threshold", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x150C", "f12_sw2setting", "select f1, f2, ORIG using 0x5C~0x5F\nverification use", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x150C", "pass_left_od", "1: bypass左半邊OD (1 & 2)\nverification use", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x150C", "pass_right_od", "1: bypass右半邊OD (1 & 2)\nverification use", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x150C", "pass_top_od", "1: bypass上半邊OD (1 & 2)\nverification use", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x150C", "pass_bott_od", "1: bypass下半邊OD (1 & 2)\nverification use", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x150C", "org_dat", "test data\nverification use", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x150D", "org_dat", "test data\nverification use", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x150E", "f1_dat", "test data\nverification use", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x150F", "f2_dat", "test data\nverification use", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1510", "en_rd_test_out", "1: latch od output to 0x64~0x6F\nverification use", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1510", "en_od_ratio", "1: enable ration function for OD output", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1510", "dis_ratio_diff", "0: R/G/B use different ratio setting\n1: R/G/B use R ratio setting", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1510", "en_ratio_round", "0: output of ratio function will be truncated\n1: output of ration functio will be rounded", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1510", "sw_sel_path", "2'b00: OD, 2'b01: f1, 2'b10: f2_rec, 2'b11: f2_org", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1511", "sel_lut_rd_port", "0: read LUT data to host from port 0\n1: read LUT data to host from port 1\n2: read LUT data to host from port 2\n3: read LUT data to host from port 3", "7-6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1512", "od_lut_th_p01", "2nd step, (first and seventieth are strictly 0 and 256, respetively)", "7-0", "RW", "0x10", "0x10", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1513", "od_lut_th_p02", "3rd step", "7-0", "RW", "0x20", "0x20", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1514", "od_lut_th_p03", "4th step", "7-0", "RW", "0x30", "0x30", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1515", "od_lut_th_p04", "5th step", "7-0", "RW", "0x40", "0x40", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1516", "od_lut_th_p05", "6th step", "7-0", "RW", "0x50", "0x50", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1517", "od_lut_th_p06", "7th step", "7-0", "RW", "0x60", "0x60", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1518", "od_lut_th_p07", "8th step", "7-0", "RW", "0x70", "0x70", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1519", "od_lut_th_p08", "9th step", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x151A", "od_lut_th_p09", "10th step", "7-0", "RW", "0x90", "0x90", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x151B", "od_lut_th_p10", "11th step", "7-0", "RW", "0xA0", "0xA0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x151C", "od_lut_th_p11", "12th step", "7-0", "RW", "0xB0", "0xB0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x151D", "od_lut_th_p12", "13th step", "7-0", "RW", "0xC0", "0xC0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x151E", "od_lut_th_p13", "14th step", "7-0", "RW", "0xD0", "0xD0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x151F", "od_lut_th_p14", "15th step", "7-0", "RW", "0xE1", "0xE1", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1520", "od_lut_th_p15", "16th step", "7-0", "RW", "0xF0", "0xF0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1521", "diag_th_r", "abs(f2_org - f1) ≤ diag_th, od output bypass f2_org", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1522", "diag_th_g", "abs(f2_org - f1) ≤ diag_th, od output bypass f2_org", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1523", "diag_th_b", "abs(f2_org - f1) ≤ diag_th, od output bypass f2_org", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1525", "port0_r[7:0]", "read data if 0x50[7] is high\nverfication use", "7-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1524", "port0_r[9:8]", "read data if 0x50[7] is high\nverfication use", "1-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1527", "port0_g[7:0]", "read data if 0x50[7] is high\nverfication use", "7-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1526", "port0_g[9:8]", "read data if 0x50[7] is high\nverfication use", "1-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1529", "port0_b[7:0]", "read data if 0x50[7] is high\nverfication use", "7-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1528", "port0_b[9:8]", "read data if 0x50[7] is high\nverfication use", "1-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x152B", "port1_r[7:0]", "read data if 0x50[7] is high\nverfication use", "7-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x152A", "port1_r[9:8]", "read data if 0x50[7] is high\nverfication use", "1-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x152D", "port1_g[7:0]", "read data if 0x50[7] is high\nverfication use", "7-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x152C", "port1_g[9:8]", "read data if 0x50[7] is high\nverfication use", "1-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x152F", "port1_b[7:0]", "read data if 0x50[7] is high\nverfication use", "7-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x152E", "port1_b[9:8]", "read data if 0x50[7] is high\nverfication use", "1-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1531", "port2_r[7:0]", "read data if 0x50[7] is high\nverfication use", "7-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1530", "port2_r[9:8]", "read data if 0x50[7] is high\nverfication use", "1-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1533", "port2_g[7:0]", "read data if 0x50[7] is high\nverfication use", "7-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1532", "port2_g[9:8]", "read data if 0x50[7] is high\nverfication use", "1-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1535", "port2_b[7:0]", "read data if 0x50[7] is high\nverfication use", "7-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1534", "port2_b[9:8]", "read data if 0x50[7] is high\nverfication use", "1-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1537", "port3_r[7:0]", "read data if 0x50[7] is high\nverfication use", "7-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1536", "port3_r[9:8]", "read data if 0x50[7] is high\nverfication use", "1-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1539", "port3_g[7:0]", "read data if 0x50[7] is high\nverfication use", "7-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1538", "port3_g[9:8]", "read data if 0x50[7] is high\nverfication use", "1-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x153B", "port3_b[7:0]", "read data if 0x50[7] is high\nverfication use", "7-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x153A", "port3_b[9:8]", "read data if 0x50[7] is high\nverfication use", "1-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x153D", "period_x1[3:0]", "period of frame rate detection, region 1\ncounted by osc/1024", "7-4", "RW", "0x196", "0x6", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x153C", "period_x1[11:4]", "period of frame rate detection, region 1\ncounted by osc/1024", "7-0", "RW", "0x196", "0x19", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x153E", "period_x2[7:0]", "period of frame rate detection, region 2", "7-0", "RW", "0x1B7", "0xB7", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x153D", "period_x2[11:8]", "period of frame rate detection, region 2", "3-0", "RW", "0x1B7", "0x1", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1540", "period_x3[3:0]", "period of frame rate detection, region 3", "7-4", "RW", "0x1DF", "0xF", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x153F", "period_x3[11:4]", "period of frame rate detection, region 3", "7-0", "RW", "0x1DF", "0x1D", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1541", "period_x4[7:0]", "period of frame rate detection, region 4", "7-0", "RW", "0x20F", "0xF", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1540", "period_x4[11:8]", "period of frame rate detection, region 4", "3-0", "RW", "0x20F", "0x2", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1543", "period_x5[3:0]", "period of frame rate detection, region 5", "7-4", "RW", "0x24A", "0xA", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1542", "period_x5[11:4]", "period of frame rate detection, region 5", "7-0", "RW", "0x24A", "0x24", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1544", "period_x6[7:0]", "period of frame rate detection, region 6", "7-0", "RW", "0x293", "0x93", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1543", "period_x6[11:8]", "period of frame rate detection, region 6", "3-0", "RW", "0x293", "0x2", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1546", "period_x7[3:0]", "period of frame rate detection, region 7", "7-4", "RW", "0x2DF", "0xF", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1545", "period_x7[11:4]", "period of frame rate detection, region 7", "7-0", "RW", "0x2DF", "0x2D", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1547", "period_x8[7:0]", "period of frame rate detection, region 8", "7-0", "RW", "0x36F", "0x6F", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1546", "period_x8[11:8]", "period of frame rate detection, region 8", "3-0", "RW", "0x36F", "0x3", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1549", "period_x9[3:0]", "period of frame rate detection, region 9", "7-4", "RW", "0x41F", "0xF", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1548", "period_x9[11:4]", "period of frame rate detection, region 9", "7-0", "RW", "0x41F", "0x41", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x154A", "period_x10[7:0]", "period of frame rate detection, region 10", "7-0", "RW", "0x526", "0x26", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1549", "period_x10[11:8]", "period of frame rate detection, region 10", "3-0", "RW", "0x526", "0x5", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x154C", "period_x11[3:0]", "period of frame rate detection, region 11", "7-4", "RW", "0x6DE", "0xE", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x154B", "period_x11[11:4]", "period of frame rate detection, region 11", "7-0", "RW", "0x6DE", "0x6D", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x154D", "period_x12[7:0]", "period of frame rate detection, region 12", "7-0", "RW", "0xAB1", "0xB1", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x154C", "period_x12[11:8]", "period of frame rate detection, region 12", "3-0", "RW", "0xAB1", "0xA", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x154E", "ratio_a_1", "the value of ratio_a at period_x1, define 0x80 as 1x", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x154F", "ratio_a_2", "the value of ratio_a at period_x2", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1550", "ratio_a_3", "the value of ratio_a at period_x3", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1551", "ratio_a_4", "the value of ratio_a at period_x4", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1552", "ratio_a_5", "the value of ratio_a at period_x5", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1553", "ratio_a_6", "the value of ratio_a at period_x6", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1554", "ratio_a_7", "the value of ratio_a at period_x7", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1555", "ratio_a_8", "the value of ratio_a at period_x8", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1556", "ratio_a_9", "the value of ratio_a at period_x9", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1557", "ratio_a_10", "the value of ratio_a at period_x10", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1558", "ratio_a_11", "the value of ratio_a at period_x11", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1559", "ratio_a_12", "the value of ratio_a at period_x12", "7-0", "RW", "0x80", "0x80", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x155A", "ratio_b_1", "the value of ratio_b at period_x1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x155B", "ratio_b_2", "the value of ratio_b at period_x2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x155C", "ratio_b_3", "the value of ratio_b at period_x3", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x155D", "ratio_b_4", "the value of ratio_b at period_x4", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x155E", "ratio_b_5", "the value of ratio_b at period_x5", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x155F", "ratio_b_6", "the value of ratio_b at period_x6", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1560", "ratio_b_7", "the value of ratio_b at period_x7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1561", "ratio_b_8", "the value of ratio_b at period_x8", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1562", "ratio_b_9", "the value of ratio_b at period_x9", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1563", "ratio_b_10", "the value of ratio_b at period_x10", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1564", "ratio_b_11", "the value of ratio_b at period_x11", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1565", "ratio_b_12", "the value of ratio_b at period_x12", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1569", "slope_a_1[7:0]", "round(2^21*(ratio_a2 - ratio_a1)/(period_x2-period_x1))", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1568", "slope_a_1[15:8]", "round(2^21*(ratio_a2 - ratio_a1)/(period_x2-period_x1))", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1567", "slope_a_1[23:16]", "round(2^21*(ratio_a2 - ratio_a1)/(period_x2-period_x1))", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1566", "slope_a_1[29:24]", "round(2^21*(ratio_a2 - ratio_a1)/(period_x2-period_x1))", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x156D", "slope_a_2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x156C", "slope_a_2[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x156B", "slope_a_2[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x156A", "slope_a_2[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1571", "slope_a_3[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1570", "slope_a_3[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x156F", "slope_a_3[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x156E", "slope_a_3[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1575", "slope_a_4[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1574", "slope_a_4[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1573", "slope_a_4[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1572", "slope_a_4[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1579", "slope_a_5[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1578", "slope_a_5[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1577", "slope_a_5[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1576", "slope_a_5[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x157D", "slope_a_6[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x157C", "slope_a_6[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x157B", "slope_a_6[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x157A", "slope_a_6[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1581", "slope_a_7[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1580", "slope_a_7[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x157F", "slope_a_7[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x157E", "slope_a_7[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1585", "slope_a_8[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1584", "slope_a_8[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1583", "slope_a_8[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1582", "slope_a_8[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1589", "slope_a_9[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1588", "slope_a_9[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1587", "slope_a_9[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1586", "slope_a_9[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x158D", "slope_a_10[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x158C", "slope_a_10[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x158B", "slope_a_10[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x158A", "slope_a_10[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1591", "slope_a_11[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1590", "slope_a_11[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x158F", "slope_a_11[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x158E", "slope_a_11[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1595", "slope_b_1[7:0]", "round(2^21*(ratio_b2 - ratio_b1)/(period_x2-period_x1))", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1594", "slope_b_1[15:8]", "round(2^21*(ratio_b2 - ratio_b1)/(period_x2-period_x1))", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1593", "slope_b_1[23:16]", "round(2^21*(ratio_b2 - ratio_b1)/(period_x2-period_x1))", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1592", "slope_b_1[29:24]", "round(2^21*(ratio_b2 - ratio_b1)/(period_x2-period_x1))", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1599", "slope_b_2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1598", "slope_b_2[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1597", "slope_b_2[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x1596", "slope_b_2[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x159D", "slope_b_3[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x159C", "slope_b_3[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x159B", "slope_b_3[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x159A", "slope_b_3[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15A1", "slope_b_4[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15A0", "slope_b_4[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x159F", "slope_b_4[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x159E", "slope_b_4[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15A5", "slope_b_5[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15A4", "slope_b_5[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15A3", "slope_b_5[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15A2", "slope_b_5[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15A9", "slope_b_6[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15A8", "slope_b_6[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15A7", "slope_b_6[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15A6", "slope_b_6[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15AD", "slope_b_7[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15AC", "slope_b_7[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15AB", "slope_b_7[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15AA", "slope_b_7[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15B1", "slope_b_8[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15B0", "slope_b_8[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15AF", "slope_b_8[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15AE", "slope_b_8[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15B5", "slope_b_9[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15B4", "slope_b_9[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15B3", "slope_b_9[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15B2", "slope_b_9[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15B9", "slope_b_10[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15B8", "slope_b_10[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15B7", "slope_b_10[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15B6", "slope_b_10[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15BD", "slope_b_11[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15BC", "slope_b_11[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15BB", "slope_b_11[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15BA", "slope_b_11[29:24]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15BE", "data_mux_sel", "DO NOT change the value", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15BF", "reg_max_step[7:0]", "max value of del(frame rate)", "7-0", "RW", "0xFFF", "0xFF", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15BE", "reg_max_step[11:8]", "max value of del(frame rate)", "3-0", "RW", "0xFFF", "0xF", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15C0", "en_force_frame_rate", "1: force frame rate as force_frame_rate ", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15C1", "force_frame_rate[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15C0", "force_frame_rate[11:8]", "", "3-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15C2", "ratio_a", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15C3", "ratio_b", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15C4", "ratio_c", "", "7-0", "R", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15C6", "reg_default_step[7:0]", "Default value of frame rate", "7-0", "RW", "0x6DE", "0xDE", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15C5", "reg_default_step[11:8]", "Default value of frame rate", "3-0", "RW", "0x6DE", "0x6", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15C7", "en_frame_rate", "0: enable A LUT only\n1: enable A/B/C LUT", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15C7", "read_frame_rate_sel", "0: input frame rate\n1: frame rate after step limitaion", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15C9", "read_frame_rate[7:0]", "", "7-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("OD(0x15)", "OD", "0x15C8", "read_frame_rate[11:8]", "", "3-0", "R", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1600", "set_sps_en", "Smart Power Saving Enable\n0: Disable.\n1: Enable. CS1/CS2/SHCC/SBC enable refer to 0x00[3:0]", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1600", "en_cs1", "CS1 enable\n0: disable (For Source Driver 為半壓模式)\n1: enable (For Source Driver 為全壓模式)", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1600", "en_cs2", "CS2 enable\n0: disable\n1: enable", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1600", "en_shcc", "SHCC enable\n0: disable\n1: enable", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1600", "en_sbc", "SBC enable\n0: disable\n1: enable", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1601", "cs2sel", "CS2 Advanced select\n0: CS2AD disable\n1: CS2AD enable (0x1000[2] CS2 must enable)", "7", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1601", "reg_sps_en_opt", "set_sps_en take effect timing option. H: immediately, L:synced by Vsync.", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1601", "set_sps_nm_white", "0: IAU will not invert input data. \n1: IAU will invert input data.", "5", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1601", "sps_patdet_option", "H: both patdet enabled & detected will force SPS off. L: just patdet enabled will force SPS off.", "4", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1601", "sps_start_line[3:0]", "SPS valid start line selction (to bypass pre-DE of TCON)", "3-0", "RW", "0x00", "0x02", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1602", "VMOP_T2", "LD falling to VMOP_EN timing, delay time可參考S-IC spec.\nDepend on S-IC spec, 此以NT66603B為例\n(VMOP_T1, VMOP_T2) = 00 : Delay 2us\n = 01 : Delay 3us\n = 10 : Delay 4us\n = 11 : delay 5us", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1602", "VMOP_T1", "", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1602", "shcc_period[1:0]", "shcc_period[1:0], 每N條後, VMOP強制Enable\n00: 2line\n01: 4line\n10: 8line\n11: 16line", "5-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1602", "sps_cmd_update[11:8]", "SPS CMD update point.\nUHD:\nFHD:\nHD: ", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1603", "sps_cmd_update[7:0]", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1604", "sbc_default_linenum_set", "Unit: RX DE number. Compared with DE edge counter to decide sps_pm/hd/hdt_set1 region (When 0 < DE edge counter <= sbc_default_linenum_set).", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1604", "cmd_fifo_linenum_set", "Unit: RX DE number. Compared with DE edge counter to decide when to read SPS CMD FIFO to TX. (When DE edge counter >= cmd_fifo_linenum_set).", "3-0", "RW", "0x00", "0x03", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1605", "spsoff_cmd_value", "Used when set_sps_en=L. H: mini-LVDS CMD1~32 is high, L: mini-LVDS CMD1~32 is Low.", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1605", "sps_dbg_sel[6:0]", "SPS function debug port selection\n[6]: H enable SPS debug port, L disable\n[5:0]: SPS debug selection", "6-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1606", "force_mini_en", "force_mini_en. Only active when set_sps_en=H during V-active CMD phase.\nH: force LV1 SPS CMD[15:0]=sps_mini_pattern[15:0], LV2 SPS CMD[31:16]=sps_mini_pattern[31:16]\nL: force LV1 SPS CMD [3:0]=sps_mini_pattern[3:0], LV1 SPS CMD [15]=sps_mini_pattern[15],\n LV2 SPS CMD[19:16]=sps_mini_pattern[19:16], LV2 SPS CMD[31:30]=sps_mini_pattern[31:30]", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1607", "sps_mini_pattern[31:24]", "mini-LVDS LV1, LV2 forced value when force_mini_en=H & set_sps_en=H", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1608", "sps_mini_pattern[23:16]", "mini-LVDS LV1, LV2 forced value when force_mini_en=H & set_sps_en=H", "7-0", "RW", "0x00", "0x03", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1609", "sps_mini_pattern[15:8]", "mini-LVDS LV1, LV2 forced value when force_mini_en=H & set_sps_en=H", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x160A", "sps_mini_pattern[7:0]", "mini-LVDS LV1, LV2 forced value when force_mini_en=H & set_sps_en=H", "7-0", "RW", "0x00", "0x05", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x160B", "reg_yinv_type_a[3:0]", "IVO Spec. Y- inversion SRAM Input Channel Select\nreg_yinv_type_a/b/c/d/e/f : 0x00~0x0C (select which one channel will be shift)\na/b/c/d/e/f is mean 6 shift channel.\nunit : 12 Channel => (12C6)\nExample : want to 1.3.4.8.10.11 channel shift\nsetting ->\nreg_yinv_type_a = 1\nreg_yinv_type_b = 3\nreg_yinv_type_c = 4\nreg_yinv_type_d = 8\nreg_yinv_type_e = 10\nreg_yinv_type_f = 11", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x160B", "reg_yinv_type_b[3:0]", "", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x160C", "reg_yinv_type_c[3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x160C", "reg_yinv_type_d[3:0]", "", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x160D", "reg_yinv_type_e[3:0]", "", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x160D", "reg_yinv_type_f[3:0]", "", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x160E", "reg_dmy_data[9:8]", "Column inversion shift dmy data", "1-0", "RW", "0x00", "0x03", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x160F", "reg_dmy_data[7:0]", "Column inversion shift dmy data", "7-0", "RW", "0x00", "0xFF", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1610", "SPS_CS1region_a[18:12]", "SPS_CS1_region_a[18:0]\nSource IC output, N ch 由region_a變化到region_b, N+1 ch由region_d變化到region_c, 則N/N+1 ch(不同極性)作charge sharing.\nH-active*3(sub-pixel) / 2(odd/even ch) * region_a_gray, Dua-Gate需再除2. \nEx for 4096x2160, non-HSD: 4096*3/2*L40= 245760d = 3C000H", "6-0", "RW", "0x00", "0x0A", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1611", "SPS_CS1region_a[11:4]", "SPS_CS1_region_a[18:0]", "7-0", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1612", "SPS_CS1region_a[3:0]", "SPS_CS1_region_a[18:0]", "7-4", "RW", "0x00", "0x04", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1612", "SPS_CS1region_b[18:16]", "SPS_CS1 region_b[18:0]\nSource IC output, N ch 由region_a變化到region_b, N+1 ch由region_d變化到region_c, 則N/N+1 ch(不同極性)作charge sharing.\nH-active*3(sub-pixel) / 2(odd/even ch) * region_b_gray, Dua-Gate需再除2. \nEx for 4096x2160, non-HSD: 4096*3/2*L23= 141312d = 22800H", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1613", "SPS_CS1region_b[15:8]", "SPS_CS1 region_b[18:0]", "7-0", "RW", "0x00", "0x5C", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1614", "SPS_CS1region_b[7:0]", "SPS_CS1 region_b[18:0]", "7-0", "RW", "0x00", "0x0B", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1615", "SPS_CS1region_c[18:12]", "SPS_CS1 region_c[18:0]\nSource IC output, N ch 由region_a變化到region_b, N+1 ch由region_d變化到region_c, 則N/N+1 ch(不同極性)作charge sharing.\nH-active*3(sub-pixel) / 2(odd/even ch) * region_c_gray, Dua-Gate需再除2. \nEx for 4096x2160, non-HSD: 4096*3/2*L23= 141312d = 22800H", "6-0", "RW", "0x00", "0x05", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1616", "SPS_CS1region_c[11:4]", "SPS_CS1 region_c[18:0]", "7-0", "RW", "0x00", "0xC0", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1617", "SPS_CS1region_c[3:0]", "SPS_CS1 region_c[18:0]", "7-4", "RW", "0x00", "0x0B", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1617", "SPS_CS1region_d[18:16]", "SPS_CS1 region_d[18:0]\nSource IC output, N ch 由region_a變化到region_b, N+1 ch由region_d變化到region_c, 則N/N+1 ch(不同極性)作charge sharing.\nH-active*3(sub-pixel) / 2(odd/even ch) * region_d_gray, Dua-Gate需再除2. \nEx for 4096x2160, non-HSD: 4096*3/2*L40= 245760d = 3C000H", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1618", "SPS_CS1region_d[15:8]", "SPS_CS1 region_d[18:0]", "7-0", "RW", "0x00", "0xA0", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1619", "SPS_CS1region_d[7:0]", "SPS_CS1 region_d[18:0]", "7-0", "RW", "0x00", "0x14", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161A", "pm_set_1[2:0]", "power mode setting.\nPower mode fit pm_gray_1\n此power mode設定可參考Source IC spec.\nDepend on S-IC spec, 此以NT66603B為例\n000 : 60%\n001 : 70%\n010 : 80%\n011 : 100%\n100 : 40%\n101 : 25%\n110 : 10%\n111 : 5%", "7-5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161A", "pm_set_2[2:0]", "power mode setting.\nPower mode fit pm_gray_2\n此power mode設定可參考Source IC spec.", "4-2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161A", "pm_set_3[2:1]", "power mode setting.\nPower mode fit pm_gray_3\n此power mode設定可參考Source IC spec.", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161B", "pm_set_3[0]", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161B", "pm_set_4[2:0]", "power mode setting.\nPower mode fit pm_gray_4\n此power mode設定可參考Source IC spec.", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161B", "pm_set_5[2:0]", "power mode setting.\nPower mode fit pm_gray_5\n此power mode設定可參考Source IC spec.", "3-1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161B", "pm_set_6[2]", "power mode setting.\nPower mode fit pm_gray_6\n此power mode設定可參考Source IC spec.", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161C", "pm_set_6[1:0]", "", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161C", "pm_set_7[2:0]", "power mode setting.\nPower mode fit pm_gray_7\n此power mode設定可參考Source IC spec.", "5-3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161C", "pm_set_8[2:0]", "power mode setting.\nPower mode fit pm_gray_7\n此power mode設定可參考Source IC spec.", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161D", "hd_set_1[2:0]", "High driving ratio selection fit hd_gray_1.\nHigh driving time設定可參考Source IC spec.\nDepend on S-IC spec, 此以NT66603B為例\n000 : 1.5X\n001 : 2X\n010 : 2.5X\n011 : 4X\n1xx : high driving off", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161D", "hd_set_2[2:0]", "High driving ratio selection fit hd_gray_2.\nHigh driving time設定可參考Source IC spec.", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161E", "hd_set_3[2:0]", "High driving ratio selection fit hd_gray_3.\nHigh driving time設定可參考Source IC spec.", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161E", "hd_set_4[2:0]", "High driving ratio selection fit hd_gray_4.\nHigh driving time設定可參考Source IC spec.", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161F", "hdt_set_1[2:0]", "High driving time selection fit hdt_gray_1. \nHigh driving time設定可參考Source IC spec. \nDepend on S-IC spec, 此以NT66603B為例\n000 : 2u\n001 : 1.8u\n010 : 1.5u\n011 : 1.2u\n100 : 1u\n101 : 0.9u\n110 : 0.75u\n111 : 0.6u", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x161F", "hdt_set_2[2:0]", "High driving time selection fit hdt_gray_2. \nHigh driving time設定可參考Source IC spec. ", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1620", "hdt_set_3[2:0]", "High driving time selection fit hdt_gray_3. \nHigh driving time設定可參考Source IC spec. ", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1620", "hdt_set_4[2:0]", "High driving time selection fit hdt_gray_4. \nHigh driving time設定可參考Source IC spec. ", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1621", "pm_gray_1[8:1]", "pm_gray_1[8:1]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於pm_gray_1設定, 則S-IC的power mode參考pm_set_1. ", "7-0", "RW", "0x00", "0x03", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1622", "pm_gray_1[0]", "pm_gray_1[0]", "7", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1622", "pm_gray_2[8:2]", "pm_gray_2[8:2]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於pm_gray_2設定, 則S-IC的power mode參考pm_set_2. ", "6-0", "RW", "0x00", "0x03", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1623", "pm_gray_2[1:0]", "pm_gray_2[1:0]", "7-6", "RW", "0x00", "0x03", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1623", "pm_gray_3[8:3]", "pm_gray_3[8:3]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於pm_gray_3設定, 則S-IC的power mode參考pm_set_3. ", "5-0", "RW", "0x00", "0x02", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1624", "pm_gray_3[2:0]", "pm_gray_3[2:0]", "7-5", "RW", "0x00", "0x07", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1624", "pm_gray_4[8:4]", "pm_gray_4[8:4]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於pm_gray_4設定, 則S-IC的power mode參考pm_set_4. ", "4-0", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1625", "pm_gray_4[3:0]", "pm_gray_4[3:0]", "7-4", "RW", "0x00", "0x0F", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1625", "pm_gray_5[8:5]", "pm_gray_5[8:5]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於pm_gray_5設定, 則S-IC的power mode參考pm_set_5. ", "3-0", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1626", "pm_gray_5[4:0]", "pm_gray_5[4:0]", "7-3", "RW", "0x00", "0x07", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1626", "pm_gray_6[8:6]", "pm_gray_6[8:6]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於pm_gray_6設定, 則S-IC的power mode參考pm_set_6. ", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1627", "pm_gray_6[5:0]", "pm_gray_6[5:0]", "7-2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1627", "pm_gray_7[8:7]", "pm_gray_7[8:7]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於pm_gray_7設定, 則S-IC的power mode參考pm_set_7. ", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1628", "pm_gray_7[6:0]", "pm_gray_7[6:0]", "7-1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1628", "pm_gray_8[8]", "pm_gray_8[8]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於或等於pm_gray_8設定, 則S-IC的power mode參考pm_set_8. ", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1629", "pm_gray_8[7:0]", "pm_gray_8[7:0]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x162A", "hd_gray_1[8:1]", "hd_gray_1[8:1]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於hd_gray_1設定, 則high driving ratio參考hd_set_1.", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x162B", "hd_gray_1[0]", "hd_gray_1[0]", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x162B", "hd_gray_2[8:2]", "hd_gray_2[8:2]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於hd_gray_2設定, 則high driving ratio參考hd_set_2.", "6-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x162C", "hd_gray_2[1:0]", "hd_gray_2[1:0]", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x162C", "hd_gray_3[8:3]", "hd_gray_3[8:3]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於hd_gray_3設定, 則high driving ratio參考hd_set_3.", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x162D", "hd_gray_3[2:0]", "hd_gray_3[2:0]", "7-5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x162D", "hd_gray_4[8:4]", "hd_gray_4[8:4]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於hd_gray_4設定, 則high driving ratio參考hd_set_4.", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x162E", "hd_gray_4[5:0]", "hd_gray_4[5:0]", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x162E", "hdt_gray_1[8:5]", "hdt_gray_1[8:5]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於hdt_gray_1設定, 則high driving time參考hdt_set_1.", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x162F", "hdt_gray_1[6:0]", "hdt_gray_1[6:0]", "7-3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x162F", "hdt_gray_2[8:6]", "hdt_gray_2[8:6]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於hdt_gray_2設定, 則high driving time參考hdt_set_2.", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1630", "hdt_gray_2[5:0]", "hdt_gray_2[5:0]", "7-2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1630", "hdt_gray_3[8:7]", "hdt_gray_3[8:7]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於hdt_gray_3設定, 則high driving time參考hdt_set_3.", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1631", "hdt_gray_3[6:0]", "hdt_gray_3[6:0]", "7-1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1631", "hdt_gray_4[8]", "hdt_gray_4[8]\n當SBC on時, 比較N/N+1 line的data, 若灰階變化小於hdt_gray_4設定, 則high driving time參考hdt_set_4.", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1632", "hdt_gray_4[7:0]", "hdt_gray_4[7:0]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1633", "sps_pm_set1[2:0]", "Power mode設定 of SD. Used when (1) SBC off. (2) SBC on: from 1nd DE rise to 3nd DE rise", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1633", "sps_hd_set1[2:0]", "High driving ratio設定 for SD. Used when (1) SBC off. (2) SBC on: from 1nd DE rise to 3nd DE rise.", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1634", "sps_hdt_set1[2:0]", "High driving time 設定 for SD. Used when (1) SBC off. (2) SBC on: from 1nd DE rise to 2nd DE rise.", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1634", "sps_pm_set2[2:0]", "Power mode設定 of SD. Used when SBC on: from V-blanking rise to 1nd DE rise.", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1635", "sps_hd_set2[2:0]:", "High driving設定of SD. Used when SBC on: from V-blanking rise to 1nd DE rise", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1635", "sps_hdt_set2[2:0]:", "High driving time 設定of SD. Used when SBC on: from V-blanking rise to 1nd DE rise.", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1636", "sps_pm_set3[2:0]", "SBC verion 2 for sub-checker pattern Bias power down: \nWhen sbc_new_en=H & en_sbc=H & (number of hit sub-pixel number >= sbc_new_hit_count), SD will use this setting.\n(Define of hit sub-pixel: line-by-line gray difference <= sbc_new_gray_limit_high & >=sbc_new_gray_limit_low)", "7-5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1636", "sps_hd_set3[2:0]", "SBC verion 2 for sub-checker pattern Bias power down: \nWhen sbc_new_en=H & en_sbc=H & (number of hit sub-pixel number >= sbc_new_hit_count), SD will use this setting.\n(Define of hit sub-pixel: gray <= sbc_new_gray_limit_high & >=sbc_new_gray_limit_low)", "4-2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1636", "sps_hdt_set3[2:1]", "SBC verion 2 for sub-checker pattern Bias power down: \nWhen sbc_new_en=H & en_sbc=H & (number of hit sub-pixel number >= sbc_new_hit_count), SD will use this setting.\n(Define of hit sub-pixel: gray <= sbc_new_gray_limit_high & >=sbc_new_gray_limit_low)", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1637", "sps_hdt_set3[0]", "SBC verion 2 for sub-checker pattern Bias power down: \nWhen sbc_new_en=H & en_sbc=H & (number of hit sub-pixel number >= sbc_new_hit_count), SD will use this setting.\n(Define of hit sub-pixel: gray <= sbc_new_gray_limit_high & >=sbc_new_gray_limit_low)", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1637", "sbc_new_hit_count[13:7]", "See above description.", "6-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1638", "sbc_new_hit_count[6:0]", "See above description.", "7-1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1638", "sbc_new_en", "See above description.", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x1639", "sbc_new_gray_limit_high[6:0]", "See above description.", "6-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("POPS(0x16)", "SPS", "0x163A", "sbc_new_gray_limit_low[6:0]", "See above description.", "6-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1700", "rev_scan_en", "enable data reverse scan dynamic controlled by rev_scan input pin (TX sharing)\n0 : disable\n1: enable(only in normal case)", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1700", "bit_sel", "P2P bit number select (TX sharing)\n0 : 8 bit mode \n1 : 6 bit mode\n2 : 10bit mode", "5-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1700", "port_num[3:0]", "TX port number setting (TX sharing)\nreal value = setting value + 1", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1701", "zinv_recur_sel", "z-inversion sub-pixel number index recurrsive number setting\n2 : sub_n1 ~ sub_n2\n3 : sub_n1 ~ sub_n3\n4 : sub_n1 ~ sub_n4\n…\n12 : sub_n1 ~ sub_n12", "7-4", "RW", "0x00", "0x08", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1701", "de_gen_sel", "htotal calculate select \n00 : equal to input htotal \n01 : output htotal use input htotal is \nwhen input htotal < reg_htot_tor(register 0x2A, 0x2B) \n10 : output htotal use reg_htot_tor(register 0x2A, 0x2B) to be setted", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1702", "sub_n1", "gate line 0 insert sub-pixels number select in the line start (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1702", "sub_n2", "gate line 1 insert sub-pixels number select in the line start (TX sharing)\n 0: no insert \n1~12mean insert 1~12 sub-pixels", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1703", "sub_n3", "gate line 3 insert sub-pixels number select in the line start (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1703", "sub_n4", "gate line 4 insert sub-pixels number select in the line start (TX sharing)\n0: no insert \n1~12mean insert 1~12 sub-pixels", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1704", "sub_n5", "gate line 5 insert sub-pixels number select in the line start (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1704", "sub_n6", "gate line 6 insert sub-pixels number select in the line start (TX sharing)\n0: no insert \n1~12mean insert 1~12 sub-pixels", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1705", "sub_n7", "gate line 7 insert sub-pixels number select in the line start (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1705", "sub_n8", "gate line 8 insert sub-pixels number select in the line start (TX sharing)\n0: no insert \n1~12mean insert 1~12 sub-pixels", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1706", "sub_lst_n1", "gate line 0 insert sub-pixels number select in the line end (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1706", "sub_lst_n2", "gate line 1 insert sub-pixels number select in the line end (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1707", "sub_lst_n3", "gate line 2 insert sub-pixels number select in the line end (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1707", "sub_lst_n4", "gate line 3 insert sub-pixels number select in the line end (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1708", "sub_lst_n5", "gate line 4 insert sub-pixels number select in the line end (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1708", "sub_lst_n6", "gate line 5 insert sub-pixels number select in the line end (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1709", "sub_lst_n7", "gate line 6 insert sub-pixels number select in the line end (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1709", "sub_lst_n8", "gate line 7 insert sub-pixels number select in the line end (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x170A", "disp_cond_md", "front-end display DE continued mode, generate v-blank tx_de according to front-end display DE\n0 : disable\n1 : enable", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x170A", "du_gat_hact_sel", "dual gate horizontal active select, (TX sharing)\n0: input horizontal active divide 2 , 1: SA programmable, registers are 0x02~0a", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x170A", "gat_typ", "gate type (TX sharing)\n0 : normal gate \n1: dual gate \n2 : tri-gate", "5-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x170A", "source_type", "source type (TX sharing)\n0 : normal source\n1 : double source", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x170B", "reg_disp_gck_md", "clk_disp domian clock gating mode select\n0 : gate clock at vsync and recover clock at first DE arrival\n1 : gate clock by manuel setting (reg_disp_gck_st), and recover clock at first DE arrival\n2 : gate clock by manual setting (reg_disp_gck_st), and recover clock by manual setting (reg_disp_gck_width)\n3 : disable clock gating", "7-6", "RW", "0x00", "0x03", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x170B", "reg_lb_gck_md", "clk_lb / clk_srds domian clock gating mode select\n0 : gate clock at vsync and recover clock at first DE arrival\n1 : gate clock by manuel setting (reg_lb_gck_st), and recover clock at first DE arrival\n2 : gate clock by manual setting (reg_lb_gck_st), and recover clock by manual setting (reg_lb_gck_width)\n3 : disable clock gating", "5-4", "RW", "0x00", "0x03", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x170B", "reg_mg_lb_enb", "disable multi-gate function for SRAM power saving\n1'b0 : enable multi-gate function\n1'b1 : disable multi-gate function", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x170B", "tx_dis_gate", "disable tx gating for power saving\n1'b0 : enable tx gating function\n1'b1 : disable tx gating function", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x170C", "reg_wre_gck_st[8:1]", "clk_disp domian clock gating start manual setting", "7-0", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x170D", "reg_wre_gck_st[0]", "clk_disp domian clock gating start manual setting", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x170D", "reg_wre_gck_width[14:8]", "clk_disp domian clock gating width manual setting", "6-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x170E", "reg_wre_gck_width[7:0]", "clk_disp domian clock gating width manual setting", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x170F", "reg_rde_gck_st[8:1]", "clk_lb / clk_srds domian clock gating start manual setting", "7-0", "RW", "0x00", "0x02", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1710", "reg_rde_gck_st[0]", "clk_lb / clk_srds domian clock gating start manual setting", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1710", "reg_rde_gck_width[14:8]", "clk_lb / clk_srds domian clock gating width manual setting", "6-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1711", "reg_rde_gck_width[7:0]", "clk_lb / clk_srds domian clock gating width manual setting", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1712", "de_to_p2p_opt", "872 add", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1712", "manual_sram_seq_en", "872 add", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1712", "manual_sram_seq[4:0]", "872 add", "4-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1714", "data_swap", "data swap enable for all ports (TX sharing)\n0 : disable\n1 : enable", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1715", "en_msk_dmdat_mute", "mask dummy data enable when switch to mute mode\n0 : disable\n1 : enable", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1715", "rev_w", "reverse enable for mtcon tx / tx_lb write / p2p mtcon rx (TX sharing)\n0 : disable\n1 : enable", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1716", "dumy_rgbfu[7:0]", "line start dummy subpixel value setting", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1717", "dumy_rgbbu[7:0]", "line end dummy subpixel value setting", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1718", "dumy_rgbfu[9:8]", "line start dummy subpixel value setting", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1718", "dumy_rgbbu[9:8]", "line end dummy subpixel value setting", "5-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1718", "zinv_recur_sel_s1", "ECO : please set to zinv_recur_sel - 1 for MTCON application", "3-0", "RW", "0x00", "0x07", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1719", "lth_md_f", "z-scan mode the line start insert pixel select (TX sharing)\n4'b0000 : current line start red sub-pixel\n4'b0001 : current line start green sub-pixel\n4'b0010 : current line start blue sub-pixel\n4'b0011 : pre line start red sub-pixel\n4'b0100 : pre line start green sub-pixel\n4'b0101 : pre line start blue sub-pixel\n4'b0110 : current line end red sub-pixel\n4'b0111 : current line end green sub-pixel\n4'b1000 : current line end blue sub-pixel\n4'b1001 : pre line end red sub-pixel\n4'b1010 : pre line end green sub-pixel\n4'b1011 : pre lineend blue sub-pixel\n4'b1100 : register setting RGB", "7-4", "RW", "0x00", "0x0C", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1719", "lth_md_b", "z-scan mode the line end insert pixel select (TX sharing)\n4'b0000 : current line start red sub-pixel\n4'b0001 : current line start green sub-pixel\n4'b0010 : current line start blue sub-pixel\n4'b0011 : pre line start red sub-pixel\n4'b0100 : pre line start green sub-pixel\n4'b0101 : pre line start blue sub-pixel\n4'b0110 : current line end red sub-pixel\n4'b0111 : current line end green sub-pixel\n4'b1000 : current line end blue sub-pixel\n4'b1001 : pre line end red sub-pixel\n4'b1010 : pre line end green sub-pixel\n4'b1011 : pre lineend blue sub-pixel\n4'b1100 : register setting RGB", "3-0", "RW", "0x00", "0x0C", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x171A", "pl_offset_0[5:0]", "port 1 dummy pixel data number (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x171B", "pl_offset_1[5:0]", "port 1 dummy pixel data number ", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x171C", "pl_offset_2[5:0]", "port 2 dummy pixel data number", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x171F", "pre_ln_mask", "pre-line mask data (TX sharing) \n0: do not mask pre-line data\n1~255: mask pre-line data as CT/BK", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1720", "htot_post_en", "manual horizontal total setting enable for post-de (TX sharing)\n1 : enable, setting by htot_post \n0 : disable, calculate htot_post automatically", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1720", "htot_post[13:8]", "manual horizontal total[13:8] setting for post-de when htot_post_en = 1 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1721", "htot_post[7:0]", "manual horizontal total[7:0] setting for post-de when htot_post_en = 1 (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1722", "dumy_rgb[29:24]", "at each port front end dummy pixel data[29:24] \nRGB value setting MSB is R value", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1723", "dumy_rgb[23:16]", "at each port front end dummy pixel data[23:16] \nRGB value setting MSB is R value", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1724", "dumy_rgb[15:8]", "at each port front end dummy pixel data[15:8] \nRGB value setting MSB is R value", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1725", "dumy_rgb[7:0]", "at each port front end dummy pixel data[7:0] \nRGB value setting MSB is R value", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1726", "pre_rgb[29:24]", "at vertical blanking pixel data RGB value setting[29:24] (TX sharing)\npre_de_data[29:24] (R) setting", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1727", "pre_rgb[23:16]", "at vertical blanking pixel data RGB value setting[23:16] (TX sharing)\npre_de_data[23:16] (R) setting", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1728", "pre_rgb[15:8]", "at vertical blanking pixel data RGB value setting[15:8] (TX sharing)\npre_de_data[15:8] (R) setting", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1729", "pre_rgb[7:0]", "at vertical blanking pixel data RGB value setting[7:0] (TX sharing)\npre_de_data[7:0] (R) setting", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x172A", "reg_htot_tor[15:8]", "htotal maximum torelence[15:8] setting", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x172B", "reg_htot_tor[7:0]", "htotal maximum torelence[7:0] setting", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x172C", "reg_pre_de_en", "n lines dummy de insert before input de first line (add dummy line at fram start) 0: disable, 1: enable", "7", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x172C", "pre_de_num", "insert de line number at frame start when pre_de_en = 1 (TX sharing)", "6-3", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x172C", "pre_dat_num", "the number of pre de that output as first line data, \nmust less than reg_pre_de_num (reg_pre_de_num - reg_pre_dat_num >= 1)", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x172D", "reg_tx_enc_sel", "tx encoder select (TX sharing)\n0 : reserved\n1 : PHI 1.5\n2 : CMPI\n3 : ISP\n4 : EPI\n5 : reserved\n6 : reserved\n7 : reserved\n8: APDI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x172E", "reg_post_de_en", "one dummy de insert to input de last line (add one dummy line at fram end) 0: disable, 1: enable", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x172E", "reg_post_dat_num", "the number of post de that output with copy current frame last line \nmust less than reg_post_de_num (reg_post_de_num - reg_post_dat_num >= 1)", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x172E", "reg_post_de_num", "post de number, 0: do not use, 1: 1 line, 2: 2 lines etc. (TX sharing)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x172F", "g0_sbpx_num", "gate line 0 horizontal active sub-pixels, 0: no sub-pixel, 1: one sub_pixel, 2: two sub_pixel, other reversed (TX sharing)", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x172F", "g0_px_num[12:8]", "gate line 0 horizontal active pixels (TX sharing)", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1730", "g0_px_num[7:0]", "gate line 0 horizontal active pixels (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1731", "g1_sbpx_num", "gate line 1 horizontal active sub-pixels, 0: no sub-pixel, 1: one sub_pixel, 2: two sub_pixel, other reversed (TX sharing)", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1731", "g1_px_num[12:8]", "gate line 1 horizontal active pixels (TX sharing)", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1732", "g1_px_num[7:0]", "gate line 1 horizontal active pixels (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1733", "g2_sbpx_num", "gate line 2 horizontal active sub-pixels, 0: no sub-pixel, 1: one sub_pixel, 2: two sub_pixel, other reversed (TX sharing)", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1733", "g2_px_num[12:8]", "gate line 2 horizontal active pixels (TX sharing)", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1734", "g2_px_num[7:0]", "gate line 2 horizontal active pixels (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1735", "g3_sbpx_num", "gate line 3 horizontal active sub-pixels, 0: no sub-pixel, 1: one sub_pixel, 2: two sub_pixel, other reversed (TX sharing)", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1735", "g3_px_num[12:8]", "gate line 3 horizontal active pixels (TX sharing)", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1736", "g3_px_num[7:0]", "gate line 3 horizontal active pixels (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1737", "g4_sbpx_num", "gate line 4 horizontal active sub-pixels, 0: no sub-pixel, 1: one sub_pixel, 2: two sub_pixel, other reversed (TX sharing)", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1737", "g4_px_num[12:8]", "gate line 4 horizontal active pixels (TX sharing)", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1738", "g4_px_num[7:0]", "gate line 4 horizontal active pixels (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1739", "g5_sbpx_num", "gate line 5 horizontal active sub-pixels, 0: no sub-pixel, 1: one sub_pixel, 2: two sub_pixel, other reversed (TX sharing)", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1739", "g5_px_num[12:8]", "gate line 5 horizontal active pixels (TX sharing)", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x173A", "g5_px_num[7:0]", "gate line 5 horizontal active pixels (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x173B", "reg_tx_pd[31:24]", "tx pair power down register for pair 24~ pair 31 (P2P)\n1 : power down\n0 : power up", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x173C", "reg_tx_pd[23:16]", "tx pair power down register for pair 16~ pair 23 (P2P)\n1 : power down\n0 : power up", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x173D", "reg_tx_pd[15:8]", "tx pair power down register for pair 8~ pair 15 (P2P)\n1 : power down\n0 : power up", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x173E", "reg_tx_pd[7:0]", "tx pair power down register for pair 0~ pair 7 (P2P)\n1 : power down\n0 : power up", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x173F", "port_st0[12:5]", "start address setting for port 1, unit : pixel (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1740", "port_st0[4:0]", "start address setting for port 1, unit : pixel (TX sharing)", "7-3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1740", "port_st1[12:10]", "start address setting for port 2, unit : pixel (TX sharing)", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1741", "port_st1[9:2]", "start address setting for port 2, unit : pixel (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1742", "port_st1[1:0]", "start address setting for port 2, unit : pixel (TX sharing)", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1742", "port_st2[12:7]", "start address setting for port 3, unit : pixel (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1743", "port_st2[6:0]", "start address setting for port 3, unit : pixel (TX sharing)", "7-1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1743", "port_st3[12]", "start address setting for port 4, unit : pixel (TX sharing)", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1744", "port_st3[11:4]", "start address setting for port 4, unit : pixel (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1745", "port_st3[3:0]", "start address setting for port 4, unit : pixel (TX sharing)", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1745", "port_st4[12:9]", "start address setting for port 5, unit : pixel (TX sharing)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1746", "port_st4[8:1]", "start address setting for port 5, unit : pixel (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1747", "port_st4[0]", "start address setting for port 5, unit : pixel (TX sharing)", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1747", "port_st5[12:6]", "start address setting for port 6, unit : pixel (TX sharing)", "6-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1748", "port_st5[5:0]", "start address setting for port 6, unit : pixel (TX sharing)", "7-2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1748", "port_st6[12:11]", "start address setting for port 7, unit : pixel (TX sharing)", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1749", "port_st6[10:3]", "start address setting for port 7, unit : pixel (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x174A", "port_st6[2:0]", "start address setting for port 7, unit : pixel (TX sharing)", "7-5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x174A", "port_st7[12:8]", "start address setting for port 8, unit : pixel (TX sharing)", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x174B", "port_st7[7:0]", "start address setting for port 8, unit : pixel (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x174C", "port_st8[12:5]", "start address setting for port 9, unit : pixel (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x174D", "port_st8[4:0]", "start address setting for port 9, unit : pixel (TX sharing)", "7-3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x174D", "port_st9[12:10]", "start address setting for port 10, unit : pixel (TX sharing)", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x174E", "port_st9[9:2]", "start address setting for port 10, unit : pixel (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x174F", "port_st9[1:0]", "start address setting for port 10, unit : pixel (TX sharing)", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x174F", "port_st10[12:7]", "start address setting for port 11, unit : pixel (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1750", "port_st10[6:0]", "start address setting for port 11, unit : pixel (TX sharing)", "7-1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1750", "port_st11[12]", "start address setting for port 12, unit : pixel (TX sharing)", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1751", "port_st11[11:4]", "start address setting for port 12, unit : pixel (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1752", "port_st11[3:0]", "start address setting for port 12, unit : pixel (TX sharing)", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1752", "port_st12[12:9]", "start address setting for port 13, unit : pixel (TX sharing)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1753", "port_st12[8:1]", "start address setting for port 13, unit : pixel (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1754", "port_st12[0]", "start address setting for port 13, unit : pixel (TX sharing)", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1754", "port_st13[12:6]", "start address setting for port 14, unit : pixel (TX sharing)", "6-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1755", "port_st13[5:0]", "start address setting for port 14, unit : pixel (TX sharing)", "7-2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1755", "port_st14[12:11]", "start address setting for port 15, unit : pixel (TX sharing)", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1756", "port_st14[10:3]", "start address setting for port 15, unit : pixel (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1757", "port_st14[2:0]", "start address setting for port 15, unit : pixel (TX sharing)", "7-5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1757", "port_st15[12:8]", "start address setting for port 16, unit : pixel (TX sharing)", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1758", "port_st15[7:0]", "start address setting for port 16, unit : pixel (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1759", "mtcon_sub_sel_msb", "select mtcon msb sub-pix position for translation\n0 : select sub_0\n1 : select sub_1 … \n11 : select sub_11\nRGB DATA = {sub_11, sub_10, ~ , sub_0}\n", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1759", "mtcon_sub_sel_lsb", "select mtcon lsb sub-pix position for translation\n0 : select sub_0\n1 : select sub_1 … \n11 : select sub_11\nRGB DATA = {sub_11, sub_10, ~ , sub_0}\n", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x175A", "indexa00", "dual gate A group index00 is the 1st sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x175B", "indexa01", "dual gate A group index01 is 2nd sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x175C", "indexa02", "dual gate A group index02 is 3rd sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x175D", "indexa03", "dual gate A group index03 is 4th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x175E", "indexa04", "dual gate A group index04 is 5th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x175F", "indexa05", "dual gate A group index05 is 6th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1760", "indexa06", "dual gate A group index06 is the 7th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1761", "indexa07", "dual gate A group index07 is the 8th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1762", "indexa08", "dual gate A group index08 is 9th sub-pxiel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1763", "indexa09", "dual gate A group index09 is10th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1764", "indexa10", "dual gate A group index10 is 11th sub-pxel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1765", "indexa11", "dual gate A group index11 is 12th sub-pxel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1766", "indexa12", "dual gate A group index12 is 13th sub-pxel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1767", "indexa13", "dual gate A group index13 is 14th sub-pxel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1768", "indexa14", "dual gate A group index14 is 15th sub-pxel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1769", "indexa15", "dual gate A group index15 is 16th sub-pxel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x176A", "indexa16", "dual gate A group index16 is 17th sub-pxel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x176B", "indexa17", "dual gate A group index17 is 18th sub-pxel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x176C", "indexa18", "dual gate A group index18 is 19th sub-pxel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x176D", "indexa19", "dual gate A group index19 is 20th sub-pxel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x176E", "post_de_data[29:24]", "post_de_data[29:24] setting for P2P", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x176F", "post_de_data[23:16]", "post_de_data[23:16] setting for P2P", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1770", "post_de_data[15:8]", "post_de_data[15:8] setting for P2P", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1771", "post_de_data[7:0]", "post_de_data[7:0] setting for P2P", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1772", "pair_sel", "0 : 1 pair\n1 : 2 pair\n2 : 3 pair (ISP only)\n3 : 4 pair (ISP only)\n4 : 5 pair (ISP only)\n5~7 : reserved", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1773", "mst_de_en", "reference master TX_DE in v-blank period enable in 2TCON mode", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1773", "mst_de_sync_sel", "select sync point of master TX_DE in v-blank period\n0 : rising edge\n1 : falling edge", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1773", "mst_de_fclr", "force TX_DE clear at master TX_DE sync point to avoid TX_DE abnormal", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1773", "mtc_stage_sel", "slect multi-TCON transmitter data input stage\n0 : after cell-mapping\n1 : before cell mapping", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1773", "mtx_rx_en", "multi-TCON receiver enable", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1773", "mtx_tx_en", "multi-TCON transmitter enable", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1774", "zs_llge[7:0]", "for 2TCON", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1775", "zs_llge[11:8]", "for 2TCON", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1775", "mtc_sbp_pos[11:8]", "for 2TCON\n[0] : B3\n[1] : G3\n[2] : R3\n[3] : B2\n[4] : G2\n[5] : R2\n[6] : B1\n[7] : G1", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1776", "mtc_sbp_pos[7:0]", "for 2TCON\n[8] : R1\n[9] : B0\n[10] : G0\n[11] : R0", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1778", "pn_swap[31:24]", "tx PN swap for pair 24 ~ pair 31 (TX sharing)\n0 : no swap \n1 : swap", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1779", "pn_swap[23:16]", "tx PN swap for pair 16 ~ pair 23 (TX sharing)\n0 : no swap \n1 : swap", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x177A", "pn_swap[15:8]", "tx PN swap for pair 8 ~ pair 15 (TX sharing)\n0 : no swap \n1 : swap", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x177B", "pn_swap[7:0]", "tx PN swap for pair 0 ~ pair 7 (TX sharing)\n0 : no swap \n1 : swap", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x177C", "set_frm_inv_cnt[11:8]", "setting 28 sec polarity inversion frame number, 0 : disable (TX sharing)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x177D", "set_frm_inv_cnt[7:0]", "setting 28 sec polarity inversion frame number, 0 : disable (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x177E", "vs_ctg_prg_lcnt", "the select line position of vsync for ctg : (TX sharing)\nfrom previous output n line to the first output \nvalid display enable", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1780", "reg_vs_dly_htot[15:8]", "input vsync delay htotal[15:8] setting", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1781", "reg_vs_dly_htot[7:0]", "input vsync delay htotal[7:0] setting", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1783", "set_frm_inv_pat[15:0]", "setting frame inversion pattern ", "7-0", "RW", "0x00", "0xAA", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1784", "set_frm_inv_pat[7:0]", "setting frame inversion pattern ", "7-0", "RW", "0x00", "0xAA", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1785", "frm_inv_pat_en", "enable register setting frame inversion pattern 0x1181 to 0x1182", "7", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1785", "set_frm_inv_recur", "setting recurrsive number of frame inversion pattern (set_frm_inv_pat).", "3-0", "RW", "0x00", "0x0F", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1786", "rev_patt_cnt_tx", "select rev_patt_tx effective bits, \n0 : rev_patt_tx[15] is effective\n1 : rev_patt_tx[15:14] is effective\n2 : rev_patt_tx[15:13] is effective\n………\n15 : rev_patt_tx[15:0] is effective", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1787", "rev_patt_tx[15:8]", "line polarity setting from TX (MSB start)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1788", "rev_patt_tx[7:0]", "line polarity setting from TX (MSB start)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1789", "fmt36", "36 sub-pixels mode select in dual- and tri-gate mode, (TX sharing)\n0: 24 sub-pixels mode, 1: 36 sub-pixels mode ", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1789", "event_inv", "dual gate index swap", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1789", "event_2f", "dual gate index swap at each 2 frames (TX sharing)", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1789", "event_f", "dual gate index swap at each frames (TX sharing)", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1789", "gate_sw", "dual gate index swap at four line recursive", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x178A", "dat_pth_sel", "input data bypass data remapping path, in dual- and tri-gate mode, B[0] =1 is bypass, (TX sharing)\n in normal, B[0] = 0 is bypass, B[0] = 1 is through data remapping", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x178B", "indexa20", "dual gate A group index20 is 21th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x178C", "indexa21", "dual gate A group index21 is 22th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x178D", "indexa22", "dual gate A group index22 is 23th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x178E", "indexa23", "dual gate A group index23 is 24th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x178F", "indexa24", "dual gate A group index24 is 25th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1790", "indexa25", "dual gate A group index25 is 26th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1791", "indexa26", "dual gate A group index26 is 27th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1792", "indexa27", "dual gate A group index27 is 28th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1793", "indexa28", "dual gate A group index28 is 29th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1794", "indexa29", "dual gate A group index29 is 30th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1795", "indexa30", "dual gate A group index30 is 31th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1796", "indexa31", "dual gate A group index31 is 32th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1797", "indexa32", "dual gate A group index32 is 33th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1798", "indexa33", "dual gate A group index33 is 34th to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x1799", "indexa34", "dual gate A group index34 is 35th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x179A", "indexa35", "dual gate A group index35 is 36th to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x179B", "indexb00", "dual gate B group index00 is the input data R0 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x179C", "indexb01", "dual gate B group index01 is the input data G0 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x179D", "indexb02", "dual gate B group index02 is the input data B0 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x179E", "indexb03", "dual gate B group index03 is the input data R1 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x179F", "indexb04", "dual gate B group index04 is the input data G1 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17A0", "indexb05", "dual gate B group index05 is the input data B1 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17A1", "indexb06", "dual gate B group index06 is the input data R2 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17A2", "indexb07", "dual gate B group index07 is the input data G2 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17A3", "indexb08", "dual gate B group index08 is the input data B2 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17A4", "indexb09", "dual gate B group index09 is the input data R3 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17A5", "indexb10", "dual gate B group index10 is the input data G3 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17A6", "indexb11", "dual gate B group index11 is the input data B3 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17A7", "indexb12", "dual gate B group index12 is the input data R4 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17A8", "indexb13", "dual gate B group index13 is the input data G4 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17A9", "indexb14", "dual gate B group index14 is the input data B4 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17AA", "indexb15", "dual gate B group index15 is the input data R5 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17AB", "indexb16", "dual gate B group index16 is the input data G5 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17AC", "indexb17", "dual gate B group index17 is the input data B5 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17AE", "reg_test_en", "TX BUF test enable (TX sharing)\n0 : disable\n1 : enable", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17AE", "reg_test_datsel", "tx test mode data setting mode select (TX sharing)", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17AE", "reg_test_mode", "tx test mode function select", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17B0", "reg_tx_out_sel_00", "output data select for pair 0 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17B1", "reg_tx_out_sel_01", "output data select for pair 1 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17B2", "reg_tx_out_sel_02", "output data select for pair 2 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17B3", "reg_tx_out_sel_03", "output data select for pair 3 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17B4", "reg_tx_out_sel_04", "output data select for pair 4 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17B5", "reg_tx_out_sel_05", "output data select for pair 5 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17B6", "reg_tx_out_sel_06", "output data select for pair 6 (TX sharing) \n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17B7", "reg_tx_out_sel_07", "output data select for group 0 pair 7 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17B8", "reg_tx_out_sel_08", "output data select for pair 8 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17B9", "reg_tx_out_sel_09", "output data select for pair 9 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17BA", "reg_tx_out_sel_10", "output data select for pair 10 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17BB", "reg_tx_out_sel_11", "output data select for pair 11 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair \n55 : 56th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17BC", "reg_tx_out_sel_12", "output data select for pair 12 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17BD", "reg_tx_out_sel_13", "output data select for pair 13 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair \n55 : 56th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17BE", "reg_tx_out_sel_14", "output data select for pair 14 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17BF", "reg_tx_out_sel_15", "output data select for pair 15 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17C0", "reg_tx_out_sel_16", "output data select for pair 16 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17C1", "reg_tx_out_sel_17", "output data select for pair 17 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17C2", "reg_tx_out_sel_18", "output data select for pair 18 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17C3", "reg_tx_out_sel_19", "output data select for pair 19 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair \n55 : 56th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17C4", "reg_tx_out_sel_20", "output data select for pair 20 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17C5", "reg_tx_out_sel_21", "output data select for pair 21 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17C6", "reg_tx_out_sel_22", "output data select for pair 22 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17C7", "reg_tx_out_sel_23", "output data select for pair 23 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17C8", "reg_tx_out_sel_24", "output data select for pair 24 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17C9", "reg_tx_out_sel_25", "output data select for pair 25 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17CA", "reg_tx_out_sel_26", "output data select for pair 26 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17CB", "reg_tx_out_sel_27", "output data select for pair 27 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17CC", "reg_tx_out_sel_28", "output data select for pair 27 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17CD", "reg_tx_out_sel_29", "output data select for pair 27 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17CE", "reg_tx_out_sel_30", "output data select for pair 27 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17CF", "reg_tx_out_sel_31", "output data select for pair 27 (TX sharing)\n0 : first pair\n1 : second pair\n…\n27 : 28th pair ", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17D0", "sub_n9", "gate line 9 insert sub-pixels number select in the line start, active only in tri-gate mode (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17D0", "sub_n10", "gate line 10 insert sub-pixels number select in the line start, active only in tri-gate mode (TX sharing)\n0: no insert \n1~12mean insert 1~12 sub-pixels", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17D1", "sub_n11", "gate line 11 insert sub-pixels number select in the line start, active only in tri-gate mode (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17D1", "sub_n12", "gate line 12 insert sub-pixels number select in the line start, active only in tri-gate mode (TX sharing)\n0: no insert \n1~12mean insert 1~12 sub-pixels", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17D2", "sub_lst_n9", "gate line 9 insert sub-pixels number select in the line end, active only in tri-gate mode (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17D2", "sub_lst_n10", "gate line 10 insert sub-pixels number select in the line end, active only in tri-gate mode (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17D3", "sub_lst_n11", "gate line 11 insert sub-pixels number select in the line end, active only in tri-gate mode (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17D3", "sub_lst_n12", "gate line 12 insert sub-pixels number select in the line end, active only in tri-gate mode (TX sharing)\n0: no insert\n1~12 mean insert 1~12 sub-pixels", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17D4", "crc_pn_swap[31:24]", "tx CRC PN swap for pair 24 ~ pair 27 when reg_crc_stage = 1 (TX sharing)\n0 : no swap \n1 : swap", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17D5", "crc_pn_swap[23:16]", "tx CRC PN swap for pair 16 ~ pair 23 when reg_crc_stage = 1 (TX sharing)\n0 : no swap \n1 : swap", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17D6", "crc_pn_swap[15:8]", "tx CRC PN swap for pair 8 ~ pair 15 when reg_crc_stage = 1 (TX sharing)\n0 : no swap \n1 : swap", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17D7", "crc_pn_swap[7:0]", "tx CRC PN swap for pair 0 ~ pair 7 when reg_crc_stage = 1 (TX sharing)\n0 : no swap \n1 : swap", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17D8", "reg_test_data[7:0]", "tx test mode data setting register mode value (TX sharing)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17D9", "reg_test_data[13:8]", "tx test mode data setting register mode value (TX sharing)", "5-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17DB", "indexb18", "dual gate B group index18 is the input data R6 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17DC", "indexb19", "dual gate B group index19 is the input data G6 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17DD", "indexb20", "dual gate B group index20 is the input data B6 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17DE", "indexb21", "dual gate B group index21 is the input data R7 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17DF", "indexb22", "dual gate B group index22 is the input data G7 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17E0", "indexb23", "dual gate B group index23 is the input data B7 to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17E1", "indexb24", "dual gate B group index24 is 25th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17E2", "indexb25", "dual gate B group index20 is 26th sub-pixel to select the output gate line data order, the value range is 0~23 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17E3", "indexb26", "dual gate B group index26 is 27th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17E4", "indexb27", "dual gate B group index27 is 28th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17E5", "indexb28", "dual gate B group index28 is 29th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17E6", "indexb29", "dual gate B group index29 is 30th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17E7", "indexb30", "dual gate B group index30 is 31th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17E9", "indexb31", "dual gate B group index31 is 32th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17EA", "indexb32", "dual gate B group index32 is 33th to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17EB", "indexb33", "dual gate B group index33 is 34th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17EC", "indexb34", "dual gate B group index34 is 35th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17EE", "indexb35", "dual gate B group index35 is 36th sub-pixel to select the output gate line data order, the value range is 0~35 (TX sharing)", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17EF", "prbs_err_num", "PRBS fault inject total error packet number (TX sharing)", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17F0", "prbs_fj_start", "PRBS fault inject start", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17F0", "prbs_fj_pos[14:8]", "PRBS fault inject position", "6-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17F1", "prbs_fj_pos[7:0]", "PRBS fault inject position", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17F2", "prbs_err_code[7:0]", "PRBS fault inject error pattern, (TX sharing)\nbit[0] = 1 : inject bit error in bit 0\nbit[1] = 1 : inject bit error in bit 1\n…\nbit[7] : inject bit error in bit 7", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17F3", "prbs_err_code[13:8]", "PRBS fault inject error pattern, (TX sharing)\nbit[0] : inject bit error in bit 8\nbit[1] : inject bit error in bit 9\n…\nbit[7] : inject bit error in bit 15", "5-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17F4", "crc_out_l[15:8]", "crc output value [15:8] (TX sharing)", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17F5", "crc_out_l[7:0]", "crc output value [7:0] (TX sharing)", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17F6", "reg_hlbyte_sel", "CRC input data byte select (TX sharing)\n0 : input data[7:0]\n1 : input data[15:8] \n2 : input data[23:16]\n3 : {4'b0, input data[27:24]} ", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17F8", "reg_crc_en", "tx crc enable bit (TX sharing)\n0 : disable\n1 : enable", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17F8", "reg_crc_de_md", "tx crc de/no de mode select (TX sharing)\n0 : DE mode\n1 : No DE mode (data ~= 0)", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17F8", "reg_crc_sel", "tx crc pair select (TX sharing)\n0 : pair 0\n1 : pair 1\n…\n27 : pair 27", "4-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17F9", "sps_cmd_dis", "SPS command disable when set_sps_en = 1 (TX sharing)\n1 : disable\n0 : enable", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17FA", "dmy_rgb_muteb[7:0]", "dummy data[7:0] in line end for mute mode", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17FB", "dmy_rgb_mutef[7:0]", "dummy data[7:0] in line start for mute mode", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17FC", "dmy_rgb_muteb[9:8]", "dummy data[9:8] in line end for mute mode", "7-6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_0(0x17)", "TX_LB_0", "0x17FC", "dmy_rgb_mutef[9:8]", "dummy data[9:8] in line start for mute mode", "5-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1800", "reg_mg_byp_map", "", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1800", "reg_mg_pix_num_en", "", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1801", "reg_mg_pix_num[13:0]", "", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1802", "reg_mg_pix_num[13:0]", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1803", "reg_wr_comp_manual_en", "", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1803", "reg_rd_comp_manual_en", "", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1803", "reg_wr_size_en", "", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1803", "reg_wr_state_rst_en", "", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1803", "reg_rd_size_en", "", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1803", "reg_rd_state_rst_en", "", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1803", "reg_rd_ti_rst_en", "", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1804", "reg_wr_comp_manual", "", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1804", "reg_rd_comp_manual", "", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1805", "reg_wr_size", "", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1806", "reg_wr_size", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1807", "reg_wr_state_rst", "", "4-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1808", "reg_rd_size", "", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1809", "reg_rd_size", "", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x180A", "reg_rd_state_rst", "", "4-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x180B", "reg_rd_ti_rst_1", "", "4-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x180C", "reg_rd_ti_rst_2", "", "4-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x180D", "reg_s1_12sw", "double source gate 0 source channel 1,2 swap enable", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x180D", "reg_s1_34sw", "double source gate 0 source channel 3,4 swap enable", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x180D", "reg_s1_23sw", "double source gate 0 source channel 2,3 swap enable", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x180D", "reg_s2_12sw", "double source gate 1 source channel 1,2 swap enable", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x180D", "reg_s2_34sw", "double source gate 1 source channel 3,4 swap enable", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x180D", "reg_s2_23sw", "double source gate 1 source channel 2,3 swap enable", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x180E", "reg_s3_23sw", "double source gate 2 source channel 2,3 swap enable", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x180E", "reg_s4_23sw", "double source gate 3 source channel 2,3 swap enable", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1810", "reg_crc_stage_sel", "used to select which stage output will be selected for crc calculation\n5'd0: capture multi-gate output red/green/blue data\n5'd1: capture double-source output red/green/blue data\n5'd2: capture zinv output red/green/blue data\n5'd3: capture sps output red/green/blue data\n5'd4: capture pcid output red/green/blue data\n5'd5: capture tx_frc output red/green/blue data\n", "7-5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1810", "reg_crc_data_sel", "used to select which port data will be selected for CRC calculation\n2'b0: port A data will be used\n2'b1: port B data will be used\n2'b2: port C data will be used\n2'b3: port D data will be used", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1811", "crc_out_0[15:8]", "crc output value [15:8] (TX sharing)", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1812", "crc_out_0[7:0]", "crc output value [7:0] (TX sharing)", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1813", "crc_out_1[15:8]", "crc output value [15:8] (TX sharing)", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1814", "crc_out_1[7:0]", "crc output value [7:0] (TX sharing)", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1815", "crc_out_2[15:8]", "crc output value [15:8] (TX sharing)", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1816", "crc_out_2[7:0]", "crc output value [7:0] (TX sharing)", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1817", "crc_out_3[15:8]", "crc output value [15:8] (TX sharing)", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1818", "crc_out_3[7:0]", "crc output value [7:0] (TX sharing)", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x181A", "reg_wb_swap_0", "white/black swap for general swap stage 0", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x181A", "reg_rb_swap_0", "R/B swap for general swap stage 0", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x181A", "reg_ud_swap_0", "{pix2, pix3, pix0, pix1} swap for general swap stage 0", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x181A", "reg_px_swap_0", "{pix1, pix0, pix3, pix2} swap for general swap stage 0", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x181A", "reg_px2_swap_0", "{pix3, pix2, pix1, pix0} swap for general swap stage 0", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x181A", "reg_ch_swap_0", "{B3 G3 R3 B2 G2 R2 B1 G1 R1 B0 G0 R0} swap for general swap stage 0", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x181B", "reg_wb_swap_1", "white/black swap for general swap stage 1", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x181B", "reg_rb_swap_1", "R/B swap for general swap stage 1", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x181B", "reg_ud_swap_1", "{pix2, pix3, pix0, pix1} swap for general swap stage 1", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x181B", "reg_px_swap_1", "{pix1, pix0, pix3, pix2} swap for general swap stage 1", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x181B", "reg_px2_swap_1", "{pix3, pix2, pix1, pix0} swap for general swap stage 1", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x181B", "reg_ch_swap_1", "{B3 G3 R3 B2 G2 R2 B1 G1 R1 B0 G0 R0} swap for general swap stage 1", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1822", "reg_swap_out_sel_0", "general swap output selection\n0 : from normal input\n1 : from wb output\n2 : from rb output\n3 : from ud output\n4 : from px output\n5 : from px2 output\n6 : from ch output", "7-5", "RW", "0x00", "0x06", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1822", "reg_swap_out_sel_1", "general swap output selection\n0 : from normal input\n1 : from wb output\n2 : from rb output\n3 : from ud output\n4 : from px output\n5 : from px2 output\n6 : from ch output", "2-0", "RW", "0x00", "0x06", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1826", "reg_rd_remainder1", "manually set lb 1 read remainder pix, enabled when reg_rd_remainder1>0", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1826", "reg_rd_remainder2", "manually set lb 2 read remainder pix, enabled when reg_rd_remainder2>0", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1827", "ds_bypass_vs_dly_en", "ds bypass delay vs out\n0: vs out with delay\n1: vs out no delay", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1828", "reg_manual_htot_en_0", "manually set htotal size\n0: disable\n1: enable", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1828", "reg_manual_htot_0[14:8]", "manually set htotal size, available as reg_manual_htot_en_0 = 1", "6-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1829", "reg_manual_htot_0[7:0]", "manually set htotal size, available as reg_manual_htot_en_0 = 1", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x182A", "reg_manual_htot_en_1", "manually set htotal size\n0: disable\n1: enable", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x182A", "reg_manual_htot_1[14:8]", "manually set htotal size, available as reg_manual_htot_en_0 = 1", "6-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x182B", "reg_manual_htot_1[7:0]", "manually set htotal size, available as reg_manual_htot_en_0 = 1", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x182C", "reg_vs_dly_0", "manually set v delay line", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x182C", "reg_vs_dly_1", "manually set v delay line", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x182D", "reg_pre_lb_htot[15:8]", "manually set pre lb htotal size, available as reg_pre_lb_htot_en_0 = 1", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x182E", "reg_pre_lb_htot[7:0]", "manually set pre lb htotal size, available as reg_pre_lb_htot_en_0 = 1", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1830", "reg_tx_mute_gray[9:8]", "manually set tx output gray, available as reg_tx_mute_en = 1", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("TX LB_1(0x18)", "TX_LB_1", "0x1831", "reg_tx_mute_gray[7:0]", "manually set tx output gray, available as reg_tx_mute_en = 1", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1900", "CMD_PACKET0[7:0]", "command packet 0[7:0] : CSP", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1901", "CMD_PACKET1[3:0]", "command packet 1[0] : MODE\ncommand packet 1[1] : POL, not used, hardware control\ncommand packet 1[3:2] : SS_EN, not used, set by POLYN_SEL for each port when H2DOT_POS = 0\ncommand packet 1[2] : H2DOT , if H2DOT_SEL = 1 to select POLEN from 2V+1 (or other pattern detector) when H2DOT_POS = 1 \ncommand packet 1[3] : reserved when H2DOT_POS = 1 ", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1901", "CMD_PACKET0[11:8]", "command packet 0[8] : reserved\ncommand packet 0[11:9] : SC_ EN is not used, hardware control", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1902", "CMD_PACKET1[11:4]", "command packet 1[4] : SS_EN, not used, set by POLYN_SEL for each port when H2DOT_POS = 0 \ncommand packet 1[4] : reserved when H2DOT_POS = 1 \ncommand packet 1[5] : POLC, not used, set by POLC_SET for each port\ncommand packet 1[8:6] : blank, not used, hardware control\ncommand packet 1[10:9] : PWRC[1:0]\ncommand packet 1[11] : H2DOT, if H2DOT_SEL = 1 to select POLEN from 2V+1 (or other pattern detector) when H2DOT_POS = 0\ncommand packet 1[11] : reserved when H2DOT_POS = 1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1903", "CMD_PACKET2[7:0]", "command packet 2[0] : CS\ncommand packet 2[2:1] : CHOP[1:0]\ncommand packet 2[4:3] : OPCD[1:0]\ncommand packet 2[5] : OPC\ncommand packet 2[6] : DRI\ncommand packet 2[7] : CSSR[0]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1904", "CMD_PACKET3[3:0]", "command packet 3[2:0] : TEST ENABLE\ncommand packet 3[3] : reserved", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1904", "CMD_PACKET2[11:8]", "command packet 2[8:7] : CSSR[1]\ncommand packet 2[11:9] : SC_RST, not used, hardware control", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1905", "CMD_PACKET3[11:4]", "command packet 3[8:4] : reserved\ncommand packet 3[9] : SC_PL\ncommand packet 3[10] : SC_DL\ncommand packet 3[11] : DULPC", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1906", "CMD_PACKET4[7:0]", "command packet 4 [7:0] setting when ISI_H_MAN_EN = 1 and replace 1st ISI H", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1907", "CMD_PACKET5[3:0]", "command packet 5 [3:0] setting when ISI_H_MAN_EN = 1 and replace 2nd ISI H", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1907", "CMD_PACKET4[11:8]", "command packet 4 [11:8] setting when ISI_H_MAN_EN = 1 and replace 1st ISI H", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1908", "CMD_PACKET5[11:4]", "command packet 5 [11:4] setting when ISI_H_MAN_EN = 1 and replace 2nd ISI H", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1909", "CMD_PACKET6[7:0]", "command packet 6 [7:0] setting when ISI_L_MAN_EN = 1 and replace 1st ISI L", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x190A", "CMD_PACKET7[3:0]", "command packet 7 [3:0] setting when ISI_L_MAN_EN = 1 and replace 2nd ISI L", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x190A", "CMD_PACKET6[11:8]", "command packet 6 [11:8] setting when ISI_L_MAN_EN = 1 and replace 1st ISI L", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x190B", "CMD_PACKET7[11:4]", "command packet 7 [11:4] setting when ISI_L_MAN_EN = 1 and replace 2nd ISI L", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x190C", "VB_LINE_NUM[7:0]", "vertical blanking line number[7:0] setting, VB_LINE_NUM= setting value when VB_CON_MD = 0\nfor dual gate : real value = setting value x2\nfor tri gate : real value = setting value x3", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x190D", "VB_CON_MD", "vertical blanking continuous commmand mode select\n1 : continuous command line mode\n0 : finite command line mode, the number setting mode by VB_LINE_NUM ", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x190D", "VB_DATA_SEL", "vertical blanking line data setting\n0 : clock training\n1 : setting by post_rgb(0x64D[7:0], R=G=B) ", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x190D", "VB_FST_DS_DIS", "disable first vertical blanking line with DS when VB_LINE_NUM = 0 and VB_COND_MD = 0 \n1: disable\n0: enable", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x190D", "VB_LINE_NUM[12:8]", "vertical blanking line number[12:8] setting, VB_LINE_NUM= setting value when VB_CON_MD = 0\nfor dual gate : real value = setting value x2\nfor tri gate : real value = setting value x3", "4-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x190E", "POLC_SET[7:0]", "POLC setting for each port, bit[0] : port 0, bit[1] : port 1, … , bit[15] : port 15", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x190F", "POLC_SET[15:8]", "POLC setting for each port, bit[0] : port 0, bit[1] : port 1, … , bit[15] : port 15", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1910", "POLYN_SEL[7:0]", "polynomial select for each port, bit[0] : port 0, bit[1]: port 1, … , bit[15] : port 15 . They are valid when enabling the scrambling function\n1 : select polynomial B\n0 : select polynomial A", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1911", "POLYN_SEL[15:8]", "polynomial select for each port, bit[0] : port 0, bit[1]: port 1, … , bit[15] : port 15 . They are valid when enabling the scrambling function\n1 : select polynomial B\n0 : select polynomial A", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1912", "BCL_CT_ENB", "low enable power on/unlock clock training controlled by BCL\n1 : disable\n0 : enable", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1912", "PRE_LN_CT_SCR_ENB", "pre -line CT scrambling low enable when pre_ln_mask and scr_blk_en = 1\n0 : enable pre-line CT with scrambling\n1 : disable pre-line CT without scrambling", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1912", "VB_UNLOCK_EN", "unlock clock training enable in the verical blanking and BCL_CT_ENB = 1\n1 : enable\n0 : disable", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1912", "CT_CTRL_MD", "CT control mode select in non-power on period when BCL_CT_ENB = 0\n1 : controlled by BCLD pin in active region; controlled by BCL in vblank region\n0 : controlled by BCLD in all region (extend CT region) ", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1912", "ISI_H_MAN_EN", "ISI H command manual setting enable (must turn off POPS function due to the same position with POPS command(high priority))\n1 : enable, setting by CMD_PACKET 4 and CMD_PACKET 5\n0 : disable", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1912", "ISI_L_MAN_EN", "ISI L command manual setting enable \n1 : enable, setting by CMD_PACKET 6 and CMD_PACKET 7\n0 : disable", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1912", "MC_RST_ENB", "auto mode change reset enable for SERDES FIFO (low enable)\n1 : disable (PHI sends the sequences of clock training when mode change)\n0 : enable", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1913", "PWR_BCLD_SET", "enable to set PWR_BCLD_ST and PWR_BCLD_END \n1 : enable \n0 : disable, the default value of PWR_BCLD_ST is 0;\nthe default value of PWR_BCLD_END is 0x18 ", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1913", "PWR_BCLD_ST[3:0]", "start point to force BCLD low in the first frame of power on stage, unit : 32 lines\nfor dual gate : real value = setting value x2\nfor tri gate : real value = setting value x3", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1914", "PWR_BCLD_END[7:0]", "end point[7:0] to force BCLD low in the first frame of power on stage, unit : 32 lines\nfor dual gate : real value = setting value x2\nfor tri gate : real value = setting value x3", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1915", "PREM_NUM[7:0]", "preambe number[7:0] before DS (Data Start) setting, unit : packet", "7-0", "RW", "0x00", "0x03", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1916", "PREM_NUM[11:8]", "preambe number[11:8] before DS (Data Start) setting, unit : packet", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1918", "VB_CT_START", "clock training mask line start point setting for vertical blanking lines when VB_CT_MASK_EN = 1 no matter what reg_scr_blk_en = 1, unit : for dual gate : real value = setting value x2\nfor tri gate : real value = setting value x3", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1919", "VB_CT_WIDTH", "clock training mask line width setting for vertical blanking lines when VB_CT_MASK_EN = 1, unit : line no matter what reg_scr_blk_en = 1, for dual gate : real value = setting value x2\nfor tri gate : real value = setting value x3", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x191A", "SDLOCK_FIL_TIME[7:0]", "SD lock filter time setting[7:0] when SDLOCK_FIL_ENB = 0 \nunit : osc_clk = 54 MHz", "7-0", "RW", "0xA3", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x191B", "SDLOCK_FIL_ENB", "SD lock filter low enable\n0 : enable\n1 : disable", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x191B", "SUB_SWAP_0", "sub-pixesl swap for upper driving and normal driving\n0 : No swap, ch 0 -> ch 1 -> ch 2 -> ch 3 -> ch 4 -> ch 5\n1 : 1-3 sub-pixels swap, ch 2 --> ch 1 --> ch0 --> ch5 --> ch4 --> ch3\n2 : 3 sub-pixels swap, ch 3 --> ch 4 --> ch 5 --> ch 0 -> ch 1 --> ch 2\n3 : 6 sub-pxiels swap, ch 5 --> ch 4 --> ch 3 --> ch 2 -> ch 1 --> ch 0", "6-5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x191B", "SDLOCK_FIL_TIME[12:8]", "SD lock filter time setting[12:8] when SDLOCK_FIL_ENB = 0 \nunit is select by TIL_TIME_SEL", "4-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x191E", "SD_ACT_CUT[7:0]", "SD active cut length[7:0] (packet unit) for 1st port ~(N-1)th port\n=> No. ch /3 * X where X = 2 for 8 bit format; X = 1.5 for 6 bit format", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x191F", "SD_ACT_CUT_EN", "enable SD_ACT_CUT setting \n1 : enable\n0 : disable", "7", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x191F", "FIL_TIME_UNIT", "filter time unit select\n0 : osc_clk\n1 : packet clock", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x191F", "SD_ACT_CUT[13:8]", "SD active cut length[13:8] (packet unit) for 1st port ~(N-1)th port\n=> No. ch /3 * X where X = 2 for 8 bit format; X = 1.5 for 6 bit format", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1920", "SD_ACT_CUT2[7:0]", "SD actual cut length[7:0] (packet unit) for 1st port ~(N-1)th port\n=> No. ch /3 * X where X = 2 for 8 bit format; X = 1.5 for 6 bit format", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1921", "SD_ACT_CUT2_EN", "enable SD_ACT_CUT2 setting \n1 : enable\n0 : disable", "7", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1921", "SD_ACT_CUT2[13:8]", "SD actual cut length[13:8] (packet unit) for 1st port ~(N-1)th port\n=> No. ch /3 * X where X = 2 for 8 bit format; X = 1.5 for 6 bit format", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1922", "SD_ACT[7:0]", "SD active length[7:0] setting (unit : 2 pixel) => No. ch/3/2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1923", "SD_CUT_SEL", "select SD cutting setting mode\n0 : SD_CUT for 1st SD ~ (N-1)th SD; SD_CUT2 for Nth SD\n1 : SD_CUT for Nth SD; SD_CUT2 for 2nd SD ~(N-1)th SD", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1923", "SD_CUT_MANUAL", "manual control mode for SD cutting, reference register 0x20 ~ 0x23", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1923", "SD_ACT[11:8]", "SD active length[11:8] setting (unit : 2 pixel) => No. ch/3/2", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1924", "POLINV_CTRL1[7:0]", "control port 0 ~ 7 POL inversion when H2POL is enabled\n0 : non-inverted\n1 : inverted", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1925", "POLINV_CTRL1[15:8]", "control port 8 ~ 15 POL inversion when H2POL is enabled\n0 : non-inverted\n1 : inverted", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1926", "POLINV_CTRL0[7:0]", "control port 0 ~ 7 POL inversion when H2POL is disabled\n0 : non-inverted\n1 : inverted", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1927", "POLINV_CTRL0[15:8]", "control port 8 ~ 15 POL inversion when H2POL is disabled\n0 : non-inverted\n1 : inverted", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1928", "POST_POL_CH_LINE", "The polarity change line setting for post de when POL_CH_SEL = 3\nfor dual gate : real value = setting value x2\nfor tri gate : real value = setting value x3", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1928", "POL_CH_SEL", "polarity change point select\n0 : last active read line end + post-de lines (when post_de_en = 1)\n1 : vsync sync rising edge \n2 : last active read line end + POST_POL_CH_LINE setting\n3 : vertical blanking end (next frame start)\n4 : PRE_POL_CH_LINE setting\n5 : VB_POL_LINE setting\n6 ~7 : reserved", "3-1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1929", "CLK_DATA[27:24]", "encoder clock data[27:24] output setting, \nPHI : using CLK_DATA[13:0]\niSP : using CLK_DATA[8:0]\nEPI : using CLK_DATA[27:0]", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192A", "CLK_DATA[23:16]", "encoder clock data[23:16] output setting, \nPHI : using CLK_DATA[13:0]\niSP : using CLK_DATA[8:0]\nEPI : using CLK_DATA[27:0]", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192B", "CLK_DATA[15:8]", "encoder clock data[15:8] output setting, \nPHI : using CLK_DATA[13:0]\niSP : using CLK_DATA[8:0]\nEPI : using CLK_DATA[27:0]", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192C", "CLK_DATA[7:0]", "encoder clock data[7:0] output setting, \nPHI : using CLK_DATA[13:0]\niSP : using CLK_DATA[8:0]\nEPI : using CLK_DATA[27:0]", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192D", "CT_SCR_SEL", "CT scrambling key select\n1 : new scrambling key (EPI scrambling key)\n0 : original", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192D", "DATA_SCR_SEL", "data scrambling key select\n1 : new scrambling key (EPI scrambling key)\n0 : original selected by POLYN_SEL", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192D", "SCR_BLK_DL_EN", "enable clock training delimiter XOR clock training scrambling key bit[0]\n1 : eanble\n0 : disable", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192D", "SCR_BLK_EN", "enable scrambling for clock training\n1 : eanble\n0 : disable", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192D", "SCR_PL", "enable the scrambler key output(12bit) to XOR another 4 bit scrambler key output, i.e.\nnew scrambler key[0] = scrambler key[0] ^ 4bit scrambler key[0] \nnew scrambler key[1] = scrambler key[1] ^ 4bit scrambler key[0] \nnew scrambler key[2] = scrambler key[2] ^ 4bit scrambler key[0] \nnew scrambler key[3] = scrambler key[3] ^ 4bit scrambler key[1] \nnew scrambler key[4] = scrambler key[4] ^ 4bit scrambler key[1] \nnew scrambler key[5] = scrambler key[5] ^ 4bit scrambler key[1] \nnew scrambler key[6] = scrambler key[6] ^ 4bit scrambler key[2] \nnew scrambler key[7] = scrambler key[7] ^ 4bit scrambler key[2] \nnew scrambler key[8] = scrambler key[8] ^ 4bit scrambler key[2] \nnew scrambler key[9] = scrambler key[9] ^ 4bit scrambler key[3] \nnew scrambler key[10] = scrambler key[10] ^ 4bit scrambler key[3] \nnew scrambler key[11] = scrambler key[11] ^ 4bit scrambler key[3] \n1: enable\n0: disable", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192D", "SCR_DL", "enable the HRLC coding output data (bit[0] and bit[1]) to XOR scrambling key (bit[0]) \n1 : enable to XOR for the bit[0] and bit[1] of HRLC coding output data and the bit[0] of scrambling key (i.e. hrlc[1:0] ^ {2{key[0]}})\n0: disable to XOR for the bit[0] and bit[1] of HRLC coding output data and the bit[0] of scrambling key (i.e. hrlc[1:0] ^ {2{key[0]}})", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192D", "SCR_RST_MD", "scrambling key reset mode select\n1 : line reset mode\n0 : frame reset mode", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192D", "SCR_EN", "scrambling enable\n1 : enable \n0 : disable", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192E", "H2DOT_SEL", "select setting source for H2DOT command \n1 : POLEN from 2V+1 (or other pattern detector) \n0 : CMD_PACKET_1[2]/CMD_PACKET 1[11] selected by H2DOT_POS", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192E", "HRLC_ENB", "HRLC coding enable \n0 : enable (packet format : {D[11:0], c1, c0})\n1 : disable HRLC (packet format : {D[11:0], 2'b10})", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192E", "H2DOT_POS", "select the position of H2DOT command\n1 : CMD_PACKET_1[2], CMD_PACKET_1[4:3] and CMD_PACKET_1[11] are reserved\n0 : CMD_PACKET_1[11], CMD_PACKET_1[4:2] setting by POLYN_SEL at the same time", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192E", "VB_CT_MASK_EN", "clock training mask enable for vertical blanking lines\n1 : enable\n0 : disable", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192E", "PGMA_POS", "programming gamma position select\n0 : frame end\n1 : first pre_de, disgard pre_de_msk", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192E", "PGMA_CHECK", "enable the sending programmable gamma table checksum\n1 : enable\n0 : disable", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192E", "PGMA_EN", "programming gamma enable setting\n1 : enable\n0 : disable", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x192F", "HTOT_VBLK[7:0]", "manual horizontal total[7:0] setting in the vertical blanking for line buffer output DE", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1930", "HTOT_VBLK_EN", "manual horizontal total setting enable in the vertical blanking for line buffer output DE\n1 : manual mode\n0 : auto mode", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1930", "HB_PRED_MD", "predict the hblanking of first line or last line for line buffer input DE and line buffer output DE\n1 : first line\n0 : last line", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1930", "HTOT_VBLK[13:8]", "manual horizontal total[13:8] setting in the vertical blanking for line buffer output DE", "5-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1931", "VB_DE_NUM[7:0]", "manual line buffer output DE number[7:0] setting in the vertical blanking when VB_LINE_NUM_EN = 1, VB_DE_NUM = setting value + 1\nfor dual gate : real value = setting value x2\nfor tri gate : real value = setting value x3", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1932", "VB_DE_NUM_EN", "manual line buffer output DE number setting enable in the vertical blanking \n1 : enable, the DE number setting by set VB_DE_NUM \n0 : disable", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1932", "VB_DE_NUM[12:8]", "manual line buffer output DE number[14:8] setting in the vertical blanking when VB_LINE_NUM_EN = 1, VB_DE_NUM = setting value + 1\nfor dual gate : real value = setting value x2\nfor tri gate : real value = setting value x3", "4-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1933", "MS_TXDE_FIL_TIME[7:0]", "master TX_DE filter time setting[7:0]\nunit : osc_clk = 54 MHz", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1934", "MS_TXDE_FIL_TIME[9:8]", "master TX_DE filter time setting[9:8]\nunit : osc_clk = 54 MHz", "7-6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1934", "RFRM_END", "read frame end flag, write 1 clear\n1 : reach read line end\n0 : don't reach read line end", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1934", "HBLK_WID_AB", "H blanking width not enough flag, wirte 1 clear\n1 : not enough\n0 : enough", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1935", "PKT_FIFO_DEP", "select packet FIFO depth\n0 : 60bit * 8\n1 : 60bit * 12", "7", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1935", "DEBUG_SEL", "debug port select", "5-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1936", "PKT_GCK_DIS", "disable clk_pkt domain clock gating function\n0 : enable clock gating\n1 : disable clock gating", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1936", "LRST_DLY", "setting line reset signal delay after packet FIFO\n0 : no delay\n1 : delay 1T (clk_pkt)\n2 : delay 2T (clk_pkt)\n… \n15 : delay 15T (clk_pkt)", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1937", "P2P_PAIR_PD[31:24]", "p2p encoder pair power down register for pair 24~ pair 31(before data_mux) (P2P)\n1 : power down\n0 : power up", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1938", "P2P_PAIR_PD[23:16]", "p2p encoder pair power down register for pair 16~ pair 23(before data_mux) (P2P)\n1 : power down\n0 : power up", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1939", "P2P_PAIR_PD[15:8]", "p2p encoder pair power down register for pair 8~ pair 15(before data_mux) (P2P)\n1 : power down\n0 : power up", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193A", "P2P_PAIR_PD[7:0]", "p2p encoder pair power down register for pair 0~ pair 7(before data_mux) (P2P)\n1 : power down\n0 : power up", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193D", "PKT_FIFO_ADJ_EN", "Manual adjust Packet FIFO R/W balance", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193D", "PKT_FIFO_ADJ", "Parameter for adjusting Packet FIFO R/W balance", "5-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193E", "LB7_OVERFLOW", "line buffer 7 R/W overlap flag, write 1 clear\n1 : overflow\n0 : normal", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193E", "LB6_OVERFLOW", "line buffer 6 R/W overlap flag, write 1 clear\n1 : overflow\n0 : normal", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193E", "LB5_OVERFLOW", "line buffer 5 R/W overlap flag, write 1 clear\n1 : overflow\n1 : normal", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193E", "LB4_OVERFLOW", "line buffer 4 R/W overlap flag, write 1 clear\n1 : overflow\n1 : normal", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193E", "LB3_OVERFLOW", "line buffer 3 R/W overlap flag, write 1 clear\n1 : overflow\n2 : normal", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193E", "LB2_OVERFLOW", "line buffer 2 R/W overlap flag, write 1 clear\n1 : overflow\n0 : normal", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193E", "LB1_OVERFLOW", "line buffer 1 R/W overlap flag, write 1 clear\n1 : overflow\n0 : normal", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193E", "LB0_OVERFLOW", "line buffer 0 R/W overlap flag, write 1 clear\n1 : overflow\n0 : normal", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193F", "SRDS_FIFO_AB_EN", "serdes FIFO abnormal flag interrupt enable\n1 : eanble\n0 : disable", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193F", "PHI_FST_CMD_SEL", "select trigger point of PHI first line command start\n0 : DE falling\n1 : DE rising", "6", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193F", "RX_POL_EN", "enable frame polarity reference RX output \n0 : TX frame POL\n1 : RX frame POL", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193F", "RX_POL_MD", "select latch point of RX polarity output\n0 : update at entire VBLK period\n1 : update when leaving VBLK", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x193F", "H2POL_SEL", "select H2POL control source\n0 : disable H2POL\n1 : from NVT PDF\n2 : from LGD P/R", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1940", "BCLD_O_FB_CLR_ENB", "clear the signal from BCLD output feedback to BCLD input low enable\n0 : enable to be cleared by the extend BCLD output region setting by BCLD_OUT_EXT\n1 : disable to be cleared by the extend BCLD output region setting by BCLD_OUT_EXT. According to BCLD filter setting BCLD_FIL_TIME to filter the signal from BCLD output feedback to BCLD input", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1940", "BCLD_OUT_EXT_SET", "BCLD outptu region extend cycle setting enable\n1 : enable\n0 : disable", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1940", "BCLD_OUT_EXT", "BCLD output region extend cycle setting when BCLD_OUT_EXT_SET = 1, unit : osc_clk\nreal value = setting vlaue + 1, default value = 6", "5-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1941", "SRDS_FIFO_AB", "serdes FIFO abnormal flag for FPGA RX using, write 1 clear", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1941", "PKT_FIFO_AB1", "Packet FIFO abnomal flag (overflow / underflow) for last port", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1941", "PKT_FIFO_AB0", "Packet FIFO abnomal flag (overflow / underflow) for first port", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1942", "PRE_POL_CH_LINE[7:0]", "The polarity change line setting[7:0] for pre de when POL_CH_SEL = 4\nfor dual gate : real value = setting value x2\nfor tri gate : real value = setting value x3", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1943", "VB_POL_LINE[7:0]", "vertical blanking polarity change line[7:0] setting when POL_CH_SEL = 5, VB_POL_LINE = setting line + 1\nfor dual gate : real value = setting value x2\nfor tri gate : real value = setting value x3", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1944", "VB_POL_LINE[12:8]", "vertical blanking polarity change line[12:8] setting when POL_CH_SEL = 5, VB_POL_LINE = setting line + 1\nfor dual gate : real value = setting value x2\nfor tri gate : real value = setting value x3", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1946", "2G_UNLOCK_CHK", "2G unlock check enable when broost or reover swing \n1 : enable\n0 : disable", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1946", "2G_BCL_EN", "2G interrupt BCL control enable\n1 : enable\n0 : disable", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1946", "2G_RECOVER_EN", "2G interrupt recover to normal control enable\n1 : enable\n0 : disable", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1946", "2G_UNLOCK_EN", "2G interrupt unlock control enable\n1 : enable\n0 : disable", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1946", "2G_CNT_UNIT_SEL", "counting unit select for 2G control\n1 : 1st DE rising edge in next frame\n0 : vsync ", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1946", "2G_PO_UNLOCK_END_SEL", "2G power on unlock region end point select (counting from the rising edge of tx_en)\n0 : 1st unlock falling edge \n1 : 2nd unlod falling edge ", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1946", "2G_PO_EN", "2G interrupt power on control enable\n1 : enable\n0 : disable", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1947", "SDLOCK_FIL_TIME_2G[7:0]", "SD LOCK filter time[7:0] setting for 2G unlock swing enlarging when 2G_UNLOCK_EN = 1 or 2G_PO_EN = 1\n0 : disable to filter\n1 : 1 unit\netc.\nunit : osc_clk", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1948", "SDLOCK_FIL_TIME_2G[12:8]", "SD LOCK filter time[12:8] setting for 2G unlock swing enlarging when 2G_UNLOCK_EN = 1 or 2G_PO_EN = 1\n0 : disable to filter\n1 : 1 unit\netc.\nunit : osc_clk", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x1949", "NORM_TIME_CNT_UNIT[7:0]", "recover to normal swing count unit setting for 2G interrupt recover to normal control when 2G_RECOVER_EN = 1\n0 : 1 frame\n1 : 2 frames\n…\n255 : 256 frames\nreal value = setting value + 1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x194A", "LB_CTRL_MANUAL", "P2P line buffer throughput manual control enable\n1 : enable\n0 : dsiable", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x194A", "NORM_TIME_CNT_ST_SEL", "recover to normal swing time count start point select\n0 : the falling edge of lock with filtering\n1 : the rising edge of lock with filtering", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x194A", "NORM_TIME_SEL[11:8]", "recover to normal swing time unit [11:8] setting for 2G interrupt recover to normal control when 2G_RECOVER_EN = 1. And the time count unit is set by NORM_TIME_CNT_UNIT[7:0]\n0 : normal time count start point delay 1 time count unit\n1 : normal time count start point delay 2 time count units\n...\n4095 : normal time count start point delay 4096 time count units\nreal value = setting value + 1, total time = (NORM_TIME_SEL + 1) * (NORM_TIME_CNT_UNIT + 1)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x194B", "LB_CTRL_A", "P2P line buffer throughput setting parameter A of A/B", "5-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x194C", "LB_CTRL_B", "P2P line buffer throughput setting parameter B of A/B", "5-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "PHI", "0x194F", "NORM_TIME_SEL[7:0]", "recover to normal swing time unit [7:0] setting for 2G interrupt recover to normal control when 2G_RECOVER_EN = 1. And the time count unit is set by NORM_TIME_CNT_UNIT[7:0]\n0 : normal time count start point delay 1 time count unit\n1 : normal time count start point delay 2 time count units\n...\n4095 : normal time count start point delay 4096 time count units\nreal value = setting value + 1, total time = (NORM_TIME_SEL + 1) * (NORM_TIME_CNT_UNIT + 1)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1950", "PGMA_EN", "0: p-gamma disable\n1: p-gamma enable\nNote:\nPGMA_EN = 1: SD gets pgamma from BCL. BCL outputs pgamma from gamma table if 680[4] = 1.\nPGMA_EN = 0: SD does not get pgamma from BCL", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1950", "HRLC_EN", "0: HRLC disable\n1: HRLC enable", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1950", "SC_EN", "0: Scrambler disable\n1: Scrambler enable", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1950", "SHL", "Shift direction control\n0: Y1024, Y1025, Y1026, …, Y1, Y2, Y3\n1: Y1, Y2, Y3, …, Y1024, Y1025, Y1026", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1950", "PAIR", "0: 2 pair inputs are enabled\n1: 1 pair input is enabled", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1950", "ED_N_BW", "External Display Normal BW\n00: 0.15 - 0.25 Gb/s\n01: 0.22 - 0.45 Gb/s\n10: 0.4 - 0.85 Gb/s\n11: 0.6 - 1.2 Gb/s", "2-1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1950", "6", "PHI 6 bits or 8 bits enable\n0: 8 bits\n1: 6 bits", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1951", "V1V2_SEL", "0: select V1B\n1: select V2", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1951", "V1_TM4", "0: do not set V1_TM4\n1: set V1_TM4 (TM4 has another define)", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1951", "BCLIFB", "TCONIF control in BCL command\n0: in normal mode (TCONIF = 1)\n1: in standby mode (TCONIF = 0)", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1951", "PGAMMA_PHI", "0: p-gamma disable for PHI\n1: p-gamma enable for PHI\nNote:\nPGAMMA_PHI = 1: SD gets pgamma from PHI. You have to set V1V2_SEL = 1 and PGMA_EN = 1\nPGAMMA_PHI = 0: SD does not get pgamma from PHI.", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1952", "EQ0", "Equalizer coefficient bit[0] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1953", "EQ1", "Equalizer coefficient bit[1] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1954", "EQ2", "Equalizer coefficient bit[2] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1955", "BIAS0", "RX bias control bit[0] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1956", "BIAS1", "RX bias control bit[1] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1957", "CDR0", "CDR bias control bit[0] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1958", "CDR1", "CDR bias control bit[1] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1959", "CHMODE0", "Output channel number control bit[0] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x195A", "CHMODE1", "Output channel number control bit[1] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x195B", "CHMODE2", "Output channel number control bit[2] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x195C", "TCC0", "Termination Control bit[0] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x195D", "TCC1", "Termination Control bit[1] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x195E", "TM0", "Test mode bit[0] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x195F", "TM1", "Test mode bit[1] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1960", "TM2", "Test mode bit[2] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1961", "TM3", "Test mode bit[3] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1962", "TM4", "Test mode bit[4] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1963", "TM5", "Test mode bit[5] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1964", "TM6", "Test mode bit[6] of SD0 through SD7", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1968", "SB_MODE_SEL", "staby mode select\n1 : SB_CTRL regsiter control\n2. TCON_IF (static driving), be disable by HW due to no support", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1968", "SB_CTRL", "staby mode power down register control when SB_MODE_SEL = 1", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1968", "ED_FR_BW", "External Display Free Run BW (40Hz)\n00: 0.15 - 0.25 Gb/s\n01: 0.22 - 0.45 Gb/s\n10: 0.4 - 0.85 Gb/s\n11: 0.6 - 1.2 Gb/s", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x196A", "CHK_CT_END", "Check Clock Training End condition\n0: clock training end in vblanking\n1: clock training end in hblanking", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x196A", "BCL_START", "BCL Start to run time\n0: at reg_tx_en = 1 (0xFF[0])\n1: at tx_en = 1 (tx_en: reg_tx_en with vsync)", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x196A", "PSR_SDRRS_SEL", "Mode Selection\n0: BCL does not select PSR and SDRRS signal to execute mode change\n1: BCL select PSR and SDRRS signal to execute mode change", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x196A", "SEL_CT_END", "Select Clock Training End condition (PHI)\n0: Clock Training Done if BCLD lock\n1: Clock Training Done if it gets vblanking", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x196A", "WORK_METHOD", "Working Method for BCL controller\n0: normal mode runs 60Hz and free run mode runs 40Hz\n(The controller executes mode change flow)\n1: normal mode runs 60Hz and 40Hz and do not have free run mode\n(The controller replaces bandwidth in 60Hz/40Hz)", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x196A", "MUTE_CG_BD", "Mute change control\n0: BCL does not check sw_mute to execute mode change\n1: BCL check sw_mute to execute mode change\nIn 2-TCON architecture it may use this condition", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x196A", "MODE_CHANGE", "Mode Change Testing\n0: 60Hz (Normal frame)\n1: 40Hz (SDRRS out)", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x196A", "SW_MODE_SEL", "Switch Mode selection\n0: It uses mode change signal from RX\n1: It uses mode change siganl from MODE_CHANGE (0x6a[1])", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x196F", "UK_DLY_ST1", "disable some condtion \n1 : disable\n0 : enable", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x196F", "UK_DET_VB", "new lock detecion flow enable if it meets VB\n1 : enable \n0 : disable", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x196F", "UK_FLOW", "Do not check unlock in some state\n1 : check unlock \n0 : do not check", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x196F", "UK_CHK", "use old unlock reset condition select\n1 : old (NT71394)\n0 : current", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1970", "HEADER_CODE_B0", "Header code byte[7:0]", "7-0", "RW", "0x00", "0xFC", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1971", "HEADER_CODE_B1", "Header code byte[9:8]", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1972", "CMD_HDR", "Command header", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1973", "P_GAMMA_HDR", "P_GAMMA header", "3-0", "RW", "0x00", "0x02", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1974", "BDI_HDR", "BDI header", "7-4", "RW", "0x00", "0x05", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1974", "LOCK_DET_HDR", "Lock detection header", "3-0", "RW", "0x00", "0x0C", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1975", "BDI_EXIT_HDR", "BDI exit header", "3-0", "RW", "0x00", "0x06", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1978", "BW0_TH_HI_70", "High Threshold[7:0] of BW0", "7-0", "RW", "0x00", "0xFA", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1979", "BW1_TH_HI_70", "High Threshold[7:0] of BW1", "7-0", "RW", "0x00", "0xC2", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x197A", "BW2_TH_HI_70", "High Threshold[7:0] of BW2", "7-0", "RW", "0x00", "0x52", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x197B", "BW2_TH_HI_98", "High Threshold[9:8] of BW2", "5-4", "RW", "0x00", "0x03", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x197B", "BW1_TH_HI_98", "High Threshold[9:8] of BW1", "3-2", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x197B", "BW0_TH_HI_98", "High Threshold[9:8] of BW0", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x197C", "BW1_TH_LO_70", "Low Threshold[7:0] of BW1", "7-0", "RW", "0x00", "0xDC", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x197D", "BW2_TH_LO_70", "Low Threshold[7:0] of BW2", "7-0", "RW", "0x00", "0x90", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x197E", "BW3_TH_LO_70", "Low Threshold[7:0] of BW3", "7-0", "RW", "0x00", "0x58", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x197F", "BW3_TH_HI_98", "Low Threshold[9:8] of BW3", "5-4", "RW", "0x00", "0x02", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x197F", "BW2_TH_HI_98", "Low Threshold[9:8] of BW2", "3-2", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x197F", "BW1_TH_HI_98", "Low Threshold[9:8] of BW1\nNote: \nThe controller uses those thresholds to estimate the bandwidth in the following condition:\n00: estimation bandwidth <= BW0_TH_HI[9:0]\n01: BW1_TH_LO[9:0] <= estimation bandwidth <= BW1_TH_HI[9:0]\n10: BW2_TH_LO[9:0] <= estimation bandwidth <= BW2_TH_HI[9:0]\n11: BW3_TH_LO[9:0] <= estimation bandwidth\n\nThe default value is showing as following:\nBW0_TH_HI[9:0] = 250 = 0FAH\nBW1_TH_HI[9:0] = 450 = 1C2H\nBW2_TH_HI[9:0] = 850 = 352H\nBW1_TH_LO[9:0] = 220 = 0DCH\nBW2_TH_LO[9:0] = 400 = 190H\nBW3_TH_LO[9:0] = 600 = 258H", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1980", "BCL_ES_BW_EN", "BCL estimate BW\n0: do not estimate BW and BW value is controlled by bit[2:1] in reg 0x650\n1: estimate BW. The estimation region is showing as following:\n 00: 0.15 - 0.25 Gb/s\n 01: 0.22 - 0.45 Gb/s\n 10: 0.4 - 0.85 Gb/s\n 11: 0.6 - 1.2 Gb/s", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1980", "BCL_CTRL_OE_EN", "BCL control OE mask in some state\n0: do not control OE. The OE signal is totally controlled by CTG\n1: control OE in some state", "6", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1980", "VB_UK_CT_EN", "In Vblanking BCLD unlock and it outputs clock training\n0: do not force PHI output clock training if BCLD = 0 in Vblanking. PHI outputs CT automatically\n1: force PHI output clock training if BCLD = 0 in Vblanking. BCL force PHI output CT until BCLD lock", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1980", "P_GAMMA_EN", "P-GAMMA operation enable\n0: disable\n1: enable\nIn standby mode it enables P-GAMMA", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1980", "OPC_EN", "OPC OFF operation enable\n0: disable\n1: enable", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1980", "VB_ONE_CMD_EN", "sent vertical blanking command one time only enable\n1 : enable\n0 : disable", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1980", "DLY_FRM_CMD_EN", "Delay Frame command output enable\n0: do not output command in delay frame if it gets vblanking\n1: output command in delay frame if it gets vblanking", "1", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1980", "PO_CHK_BCLD", "Power on check BCLD\n0: do not check BCLD from 0 -> 1 at power on stage and it delays PWR_ON_DLY_TIME (0x684)\n1: check BCLD from 0 -> 1 at power on stage", "0", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1981", "UNLOCK_DT", "Unlock detection period (unit: osc_clk)\n0: 1 osc clock\n1: 2 osc clock\netc.", "7-0", "RW", "0x00", "0x64", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1982", "TW", "Time width (unit: osc_clk)\n0: 1 osc clock\n1: 2 osc clock\netc.\nNote:\nBecause of the SPEC, the BCLC is less than 1MHz.\nTherefore the controller outputs BCLC = 54MHz / (4*(13+1)) = 0.96MHz", "7-0", "RW", "0x00", "0x0D", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1983", "CHK_60_LD_EN", "Check 60Hz lock detection enable\n0: do not check\n1: check", "7", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1983", "MC_ENABLE_BDI", "Mode change flow enable BDI command\n0: disable\n1: enable", "6", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1983", "BP_PO_RST", "Bypass Power On Reset flow\n0: do not bypass power on reset flow\n1: bypass power on reset flow", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1983", "BCL_CLK2_EN", "Enable bcl clock 2 in BCL block\n0: BCL block turns on or turns off bcl clock 2\n1: bcl clock 2 is always on", "3", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1983", "PO_ENABLE_BDI", "Power on flow enable BDI command\n0: disable\n1: enable", "2", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1983", "PO_BCLD_LOW_UK", "Power On BCLD Low Unlock\n0: If it forces power on BCLD low at first frame, it executes unlock recovery flow.\n1: If it forces power on BCLD low at first frame, it does not check BCLD at first frame.\nThis bit works with PO_BCLD_LOW = 1 (0x683[0])", "1", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1983", "PO_BCLD_LOW", "Power On BCLD Low\n0: do not force BCLD low at first frame\n1: force BCLD low at first frame", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1984", "PWR_ON_DLY_TIME", "Power on delay time (unit: BCLC)\n0: 1 BCLC\n1: 2 BCLC\netc.", "7-0", "RW", "0x00", "0xFF", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1985", "CMD_DLY_B0", "Command delay time when in vblanking area byte 0 (unit: BCLC)\n0: 1 osc clk\n1: 2 osc clks, etc.", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1986", "CMD_DLY_B1", "Command delay time when in vblanking area byte 1 (unit: BCLC)", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1987", "PO_DLY_FRAME", "Power on delay frame numbers\n0: no delay frame\n1: next one frames\n…\n15: next 15 frames", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1987", "PO_MASK_FRAME", "Power on mask frame numbers\n0: no mask frame\n1: next one frames\n…\n15: next 15 frames", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1988", "MC_DLY_FRAME", "Mode change delay frame numbers\n0: no delay frame\n1: next one frames\n…\n15: next 15 frames", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1988", "MC_MASK_FRAME", "Mode change mask frame numbers\n0: no mask frame\n1: next one frames\n…\n15: next 15 frames", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1989", "UR_DLY_FRAME", "Unlock recovery delay frame numbers\n0: no delay frame\n1: next one frames\n…\n15: next 15 frames", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x198A", "PHI_PRE7_EN", "Enable PHI pre 7 line function\n0 : disable\n1 : enable\nNOTE : when enable this function, PRG_LN_CNT must set to 6.", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x198A", "KEEP_LOW_TIME", "Keep low time (unit: BCLC)\n0: 1 BCLC\n1: 2 BCLC\n...\n7: 8 BCLC", "6-4", "RW", "0x00", "0x02", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x198A", "IO_SWITCH_TIME", "Input and output switch time (unit: BCLC)\n0: 1 BCLC\n1: 2 BCLC\n...\n7: 8 BCLC", "2-0", "RW", "0x00", "0x03", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x198B", "BCLD_IN_BP_TIME", "BCLD Input Bypass time\n0: no bypass\n1: osc clock x 2176 x 1\n2: osc clock x 2176 x 2\netc.", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x198C", "PWR_ON_RST_TIME", "Power on reset time (unit: osc_clk)\n0: 1 osc clock\n1: 2 osc clock\netc.", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x198D", "DRM_ZERO_BCLC", "delay frame is 0 and output BCLC enable\n1 : eanble \n0 : disable", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x198D", "CMD_LEN_SEL", "Command Length selection\n0: send command without reserved registers\n1: send command with reserved registers\nIn standby mode it sets CMD_LEN_SEL = 1", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x198D", "UK_DFRM_CNT", "unlock delay frame count enable\n1 : enable\n0 : disable", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x198D", "CHK_40_LD_EN", "Check 40Hz lock detection enable\n0: do not check\n1: check", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x198D", "BCL_START2", "BCL start to run 2\n0: refer to BCL_START (0x6A[6])\n1: at dur_ini = 0 and tx_en = 1", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1990", "2G_EQ0", "2G Equalizer coefficient bit[0] of SD0 through SD7 when 2G_BCL_EN = 1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1991", "2G_EQ1", "2G Equalizer coefficient bit[1] of SD0 through SD7 when 2G_BCL_EN = 1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1992", "2G_EQ2", "2G Equalizer coefficient bit[2] of SD0 through SD7 when 2G_BCL_EN = 1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1993", "2G_CDR0", "2G CDR bias control bit[0] of SD0 through SD7 when 2G_BCL_EN = 1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x1994", "2G_CDR1", "2G CDR bias control bit[1] of SD0 through SD7 when 2G_BCL_EN = 1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19CA", "SD_PD_CMD_EN", "source driver power down control by P2P command enable", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19CA", "SD_WAKEUP_EN", "source driver wake-up control by BCLD pin enable", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19CB", "SD_WAKEUP_WID", "source driveer wake-up signal pulse width", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19D0", "VGMA0_0[7:0]", "PHI Gamma Data VGMA0[0]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19D1", "VGMA0_1[3:0]", "PHI Gamma Data VGMA0[1]", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19D1", "VGMA0_0[11:8]", "PHI Gamma Data VGMA0[0]", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19D2", "VGMA0_1[11:4]", "PHI Gamma Data VGMA0[1]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19D3", "VGMA0_2[7:0]", "PHI Gamma Data VGMA0[2]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19D4", "VGMA0_3[3:0]", "PHI Gamma Data VGMA0[3]", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19D4", "VGMA0_2[11:8]", "PHI Gamma Data VGMA0[2]", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19D5", "VGMA0_3[11:4]", "PHI Gamma Data VGMA0[3]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19D6", "VGMA0_4[7:0]", "PHI Gamma Data VGMA0[4]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19D7", "VGMA0_5[3:0]", "PHI Gamma Data VGMA0[5]", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19D7", "VGMA0_4[11:8]", "PHI Gamma Data VGMA0[4]", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19D8", "VGMA0_5[11:4]", "PHI Gamma Data VGMA0[5]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19D9", "VGMA0_6[7:0]", "PHI Gamma Data VGMA0[6]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19DA", "VGMA0_7[3:0]", "PHI Gamma Data VGMA0[7]", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19DA", "VGMA0_6[11:8]", "PHI Gamma Data VGMA0[6]", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19DB", "VGMA0_7[11:4]", "PHI Gamma Data VGMA0[7]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19DC", "VGMA0_8[7:0]", "PHI Gamma Data VGMA0[8]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19DD", "VGMA0_9[3:0]", "PHI Gamma Data VGMA0[9]", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19DD", "VGMA0_8[11:8]", "PHI Gamma Data VGMA0[8]", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19DE", "VGMA0_9[11:4]", "PHI Gamma Data VGMA0[9]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19DF", "VGMA0_10[7:0]", "PHI Gamma Data VGMA0[10]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19E0", "VGMA0_11[3:0]", "PHI Gamma Data VGMA0[11]", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19E0", "VGMA0_10[11:8]", "PHI Gamma Data VGMA0[10]", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19E1", "VGMA0_11[11:4]", "PHI Gamma Data VGMA0[11]", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19E4", "GB_BIT_SEL", "Gamma buffer bit select\n00 : 0 ~ 13th, 6bit\n01 : 0 ~ 12th, 6bit\n10 : 0 ~ 17th, 8bit\n11 : reserved", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19F0", "PHI_PLN_EXT", "PHI mode extra pre DE enable (only generate TX_DE, mainlink keep CT)\n0: disable\n1: enable", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19F0", "TX_VBLK_DE_MSK", "Maskiing TX_DE_VBLK, avoid TX_DE_ACT overlapping\n0: disable\n1: enable", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19F0", "AIT_TOUCH_DE_EN", "Enable reference touch DEs that generated by FBS in AIT mode\n0 : disable\n1 : enable", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19F0", "LHB_END_DUP", "Enable repeat last LHB end lines in AIT mode\n0 : normal operation\n1 : repeat lines as pre DE data", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19F2", "FLOW_STATE1", "read bit [7:0] of flow state", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19F3", "FLOW_STATE2", "read bit [15:8] of flow state", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19F4", "FLOW_STATE3", "read bit [23:16] of flow state", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19F5", "MAIN_STATE1", "read bit [7:0] of main state", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19F6", "MAIN_STATE2", "read bit [15:8] of main state", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19F7", "MAIN_STATE3", "read bit [22:16] of main state", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19F8", "CM_STATE", "read bit [7:0] of command state", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19F9", "LD_STATE", "read bit [7:0] of lock detection state", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19FA", "TW_CNT", "count for tw", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19FB", "TW2_CNT", "count for tw2", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19FC", "CHECK1", "check signal 1\n{3'b0, sdrrs_mode, psr_reduce_rate, sw_mute, bcld_in, dur_ini}", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19FD", "CHECK2", "check signal 2\n{mc_ct_out, ct, 2'b0, vblank_out, 3'b0}", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19FE", "CHECK3", "check signal 3\n{4'b0, bcl_lock, bcl_ur_oe_mask, bcl_mc_oe_mask, bcl_po_oe_mask}", "7-0", "R", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "BCL", "0x19FF", "BCL_DBG_EN", "BCL Debug Enable, 0: the above 0xF2 ~ 0xFE read from P2P define register\n 1: the above 0xF2 ~ 0xFE read from BCL debug signal", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A00", "CLK_PAIR[31:24]", "clock data output enable for each pair (pair 24 ~ pair 31)\n1 : enable\n0 : disable", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A01", "CLK_PAIR[23:16]", "clock data output enable for each pair (pair 16 ~ pair 23)\n1 : enable\n0 : disable", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A02", "CLK_PAIR[15:8]", "clock data output enable for each pair (pair 8 ~ pair 15)\n1 : enable\n0 : disable", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A03", "CLK_PAIR[7:0]", "clock data output enable for each pair (pair 0 ~ pair 7)\n1 : enable\n0 : disable", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A04", "WTMSK_ST_0", "dummy channel data mask start position ( 4Pixel ) of port 0", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A05", "WTMSK_ST_1", "dummy channel data mask start position ( 4Pixel ) of port 1", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A06", "WTMSK_ST_2", "dummy channel data mask start position ( 4Pixel ) of port 2", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A07", "WTMSK_ST_3", "dummy channel data mask start position ( 4Pixel ) of port 3", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A08", "SKEW_MD_1", "output skew mode select for pair 1\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A08", "SKEW_MD_0", "output skew mode select for pair 0\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A09", "SKEW_MD_3", "output skew mode select for pair 3\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A09", "SKEW_MD_2", "output skew mode select for pair 2\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A0A", "SKEW_MD_5", "output skew mode select for pair 5\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A0A", "SKEW_MD_4", "output skew mode select for pair 4\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A0B", "SKEW_MD_7", "output skew mode select for pair 7\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A0B", "SKEW_MD_6", "output skew mode select for pair 6\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A0C", "SKEW_MD_9", "output skew mode select for pair 9\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A0C", "SKEW_MD_8", "output skew mode select for pair 8\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A0D", "SKEW_MD_11", "output skew mode select for pair 11\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A0D", "SKEW_MD_10", "output skew mode select for pair 10\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A0E", "SKEW_MD_13", "output skew mode select for pair 13\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A0E", "SKEW_MD_12", "output skew mode select for pair 12\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A0F", "SKEW_MD_15", "output skew mode select for pair 15\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A0F", "SKEW_MD_14", "output skew mode select for pair 14\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A10", "SKEW_MD_17", "output skew mode select for pair 7\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A10", "SKEW_MD_16", "output skew mode select for pair 6\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A11", "SKEW_MD_19", "output skew mode select for pair 9\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A11", "SKEW_MD_18", "output skew mode select for pair 8\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A12", "SKEW_MD_21", "output skew mode select for pair 11\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A12", "SKEW_MD_20", "output skew mode select for pair 10\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A13", "SKEW_MD_23", "output skew mode select for pair 13\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A13", "SKEW_MD_22", "output skew mode select for pair 12\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A14", "SKEW_MD_25", "output skew mode select for pair 15\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A14", "SKEW_MD_24", "output skew mode select for pair 14\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A15", "SKEW_MD_27", "output skew mode select for pair 7\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A15", "SKEW_MD_26", "output skew mode select for pair 6\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A16", "SKEW_MD_29", "output skew mode select for pair 9\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A16", "SKEW_MD_28", "output skew mode select for pair 8\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A17", "SKEW_MD_31", "output skew mode select for pair 11\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A17", "SKEW_MD_30", "output skew mode select for pair 10\n0 : No delay\n1 : delay 1 UI\n2 : delay 2 UI\n3 : delay 3 UI\n… \n15 : delay 15 UI", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A18", "WTMSK_ST_4", "dummy channel data mask start position ( 4Pixel ) of port 4", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A19", "WTMSK_ST_5", "dummy channel data mask start position ( 4Pixel ) of port 5", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A1A", "WTMSK_ST_6", "dummy channel data mask start position ( 4Pixel ) of port 6", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A1B", "WTMSK_ST_7", "dummy channel data mask start position ( 4Pixel ) of port 7", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A1C", "WTMSK_ST_8", "dummy channel data mask start position ( 4Pixel ) of port 8", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A1D", "WTMSK_ST_9", "dummy channel data mask start position ( 4Pixel ) of port 9", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A1E", "WTMSK_ST_10", "dummy channel data mask start position ( 4Pixel ) of port 10", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A1F", "WTMSK_ST_11", "dummy channel data mask start position ( 4Pixel ) of port 11", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A20", "SD_CUT_CTRL[31:24]", "Manual control each pair cutting, bit[0] for pair0, bit[1] for pair1, ….. Bit[31] for pair31\n0 : SD_ACT_CUT\n1 : SD_ACT_CUT_2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A21", "SD_CUT_CTRL[23:16]", "Manual control each pair cutting, bit[0] for pair0, bit[1] for pair1, ….. Bit[31] for pair31\n0 : SD_ACT_CUT\n1 : SD_ACT_CUT_2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A22", "SD_CUT_CTRL[15:8]", "Manual control each pair cutting, bit[0] for pair0, bit[1] for pair1, ….. Bit[31] for pair31\n0 : SD_ACT_CUT\n1 : SD_ACT_CUT_2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A23", "SD_CUT_CTRL[7:0]", "Manual control each pair cutting, bit[0] for pair0, bit[1] for pair1, ….. Bit[31] for pair31\n0 : SD_ACT_CUT\n1 : SD_ACT_CUT_2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A24", "WTMSK_ST_12", "dummy channel data mask start position ( 4Pixel ) of port 12", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A25", "WTMSK_ST_13", "dummy channel data mask start position ( 4Pixel ) of port 13", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A26", "WTMSK_ST_14", "dummy channel data mask start position ( 4Pixel ) of port 14", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1A27", "WTMSK_ST_15", "dummy channel data mask start position ( 4Pixel ) of port 15", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD3", "BCLD_O_FB_CLR_ENB", "clear the signal from BCLD output feedback to BCLD input low enable\n0 : enable to be cleared by the extend BCLD output region setting by BCLD_OUT_EXT\n1 : disable to be cleared by the extend BCLD output region setting by BCLD_OUT_EXT. According to BCLD filter setting BCLD_FIL_TIME to filter the signal from BCLD output feedback to BCLD input", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD3", "BCLD_OUT_EXT_SET", "BCLD outptu region extend cycle setting enable\n1 : enable\n0 : disable", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD3", "BCLD_OUT_EXT", "BCLD output region extend cycle setting when BCLD_OUT_EXT_SET = 1, unit : osc_clk\nreal value = setting vlaue + 1, default value = 6", "5-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD4", "VBLK_R_EN", "the risng edge of vertical blanking interval interrupt enable\n1 : enable\n0 : disable", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD4", "END_LN_INT_EN", "the interrupt enable for end line number setting by TRIG_END_LN[12:0]\n1 : enable\n0 : disable", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD4", "ST_LN_INT_EN", "the interrupt enable for start line number setting by TRIG_END_LN[12:0]\n1 : enable\n0 : disable", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD4", "ACT_REGION_F_EN", "the falling edge of the active lines region (not include pre-de/post-de) interrupt enable\n1 : enable\n0 : disable", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD4", "ACT_REGION_R_EN", "the rising edge of the active lines region (not include pre-de/post-de) interrupt enable\n1 : enable\n0 : disable", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD4", "SD_LOCK_F_EN", "the falling edge of SD LOCK interrupt enable\n1 : enable\n0 : disable", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD4", "SD_LOCK_R_EN", "the rising edge of SD LOCK interrupt enable\n1 : enable\n0 : disable", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD4", "CTG_VSYNC_R_EN", "the rising edge of TX to CTG vsync interrupt enable\n1 : enable\n0 : disable", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD5", "VBLK_F_EN", "the falling edge of vertical blanking interval interrupt enable\n1 : enable\n0 : disable", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD6", "VBLK_R", "the rising edge of vertical blanking interval interrupt (write 1 clear) when VBLK_R_EN = 1", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD6", "END_LN_INT", "the end line number setting interrupt ( write 1 clear) when END_INT_EN = 1", "6", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD6", "ST_LN_INT", "the start line number setting interrupt ( write 1 clear) when ST_LN_INT_EN = 1", "5", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD6", "ACT_REGION_F", "the falling edge of active lines region (not include pre-de/post-de) interrupt ( write 1 clear) when ACT_REGION_F_EN = 1", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD6", "ACT_REGION_R", "the rising edge of active lines region (not include pre-de/post-de) interrupt ( write 1 clear) when ACT_REGION_R_EN = 1", "3", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD6", "SD_LOCK_F", "the falling edge of SD LOCK interrup (write 1 clear) when SD_LOCK_F_EN = 1", "2", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD6", "SD_LOCK_R", "the rising edge of SD LOCK vsync interrup (write 1 clear) when SD_LOCK_R_EN = 1", "1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD6", "CTG_VSYNC_R", "the risng edge of TX to CTG vsync interrupt (write 1 clear) when CTG_VSYNC_R_EN = 1 ", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD7", "VBLK_F", "the falling edge of vertical blanking interval interrupt (write 1 clear) when VBLK_F_EN = 1", "0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD8", "TRIG_ST_LN[7:0]", "the start line trigger number[7:0] setting for ST_LN_INT", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AD9", "TRIG_ST_LN[14:8]", "the start line trigger number[14:8] setting for ST_LN_INT", "6-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1ADA", "TRIG_END_LN[7:0]", "the end line trigger number[7:0] setting for END_LN_INT ( line trigger number = setting + 1 )", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1ADB", "TRIG_END_LN[14:8]", "the end line trigger number[14:8] setting for END_LN_INT ( line trigger number = setting + 1 )", "6-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AE0", "WTMSK_VALUE[9:8]", "dummy channel data mask value", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AE1", "S1_12_SWAP[15:8]", "In double source mode, swap the first two sub-pixels of the odd output line for port 8 ~ port 15 (TX)\n1 : r2r1g1g2\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AE2", "S1_12_SWAP[7:0]", "In double source mode, swap the first two sub-pixels of the odd output line for port 0 ~ port 7 (TX)\n1 : r2r1g1g2\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AE3", "WTMSK_VALUE[7:0]", "dummy channel data mask value", "7-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AE4", "S1_34_SWAP[15:8]", "In double source mode, swap the last two sub-pixels of the odd output line for port 8 ~ port 15 (TX)\n1 : r1r2g2g1\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AE5", "S1_34_SWAP[7:0]", "In double source mode, swap the last two sub-pixels of the odd output line for port 0 ~ port 7 (TX)\n1 : r1r2g2g1\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AE7", "S2_12_SWAP[15:8]", "In double source mode, swap the first two sub-pixels of the even output line for port 8 ~ port 15 (TX)\n1 : r2r1g1g2\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AE8", "S2_12_SWAP[7:0]", "In double source mode, swap the first two sub-pixels of the even output line for port 0 ~ port 7 (TX)\n1 : r2r1g1g2\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AEA", "S2_34_SWAP[15:8]", "In double source mode, swap the last two sub-pixels of the even output line for port 8 ~ port 15 (TX)\n1 : r1r2g2g1\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AEB", "S2_34_SWAP[7:0]", "In double source mode, swap the last two sub-pixels of the even output line for port 0 ~ port 7 (TX)\n1 : r1r2g2g1\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AED", "S1_23_SWAP[15:8]", "In double source and z inversion mode, swap the middle two sub-pixels of the first output line for port 8 ~ port 15 (TX)\n1 : r1g1r2g2\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AEE", "S1_23_SWAP[7:0]", "In double source and z inversion mode, swap the middle two sub-pixels of the first output line for port 0 ~ port 7 (TX)\n1 : r1g1r2g2\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AF0", "S2_23_SWAP[15:8]", "In double source and z inversion mode, swap the middle two sub-pixels of the 2nd output line for port 8 ~ port 15 (TX)\n1 : r1g1r2g2\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AF1", "S2_23_SWAP[7:0]", "In double source and z inversion mode, swap the middle two sub-pixels of the 2nd output line for port 0 ~ port 7 (TX)\n1 : r1g1r2g2\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AF2", "WTMSK_0", "dummy channel data mask ( sub-pixel ) of port 0", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AF2", "WTMSK_1", "dummy channel data mask ( sub-pixel ) of port 1", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AF3", "S3_23_SWAP[15:8]", "In double source and z inversion mode, swap the middle two sub-pixels of the 3rd output line for port 8 ~ port 15 (TX)\n1 : r1g1r2g2\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AF4", "S3_23_SWAP[7:0]", "In double source and z inversion mode, swap the middle two sub-pixels of the 3rd output line for port 0 ~ port 7 (TX)\n1 : r1g1r2g2\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AF5", "WTMSK_2", "dummy channel data mask ( sub-pixel ) of port 2", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AF5", "WTMSK_3", "dummy channel data mask ( sub-pixel ) of port 3", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AF6", "S4_23_SWAP[15:8]", "In double source and z inversion mode, swap the middle two sub-pixels of the 4th output line for port 8 ~ port 15 (TX)\n1 : r1g1r2g2\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AF7", "S4_23_SWAP[7:0]", "In double source and z inversion mode, swap the middle two sub-pixels of the 4th output line for port 0 ~ port 7 (TX)\n1 : r1g1r2g2\n0 : r1r2g1g2", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AF8", "WTMSK_4", "dummy channel data mask ( sub-pixel ) of port 4", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AF8", "WTMSK_5", "dummy channel data mask ( sub-pixel ) of port 5", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AF9", "WTMSK_6", "dummy channel data mask ( sub-pixel ) of port 6", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AF9", "WTMSK_7", "dummy channel data mask ( sub-pixel ) of port 7", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AFA", "WTMSK_8", "dummy channel data mask ( sub-pixel ) of port 8", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AFA", "WTMSK_9", "dummy channel data mask ( sub-pixel ) of port 9", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AFB", "WTMSK_10", "dummy channel data mask ( sub-pixel ) of port 10", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AFB", "WTMSK_11", "dummy channel data mask ( sub-pixel ) of port 11", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AFC", "WTMSK_12", "dummy channel data mask ( sub-pixel ) of port 12", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AFC", "WTMSK_13", "dummy channel data mask ( sub-pixel ) of port 13", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AFD", "WTMSK_14", "dummy channel data mask ( sub-pixel ) of port 14", "7-4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AFD", "WTMSK_15", "dummy channel data mask ( sub-pixel ) of port 15", "3-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AFF", "TX_EN_DLY[3:0]", "TX encoder enable delay setting, unit : frame \n0 : the active TX_EN is latched by 1st vsync when TX_EN = 1\n1 : the active TX_EN is latched by 2nd vsync when TX_EN = 1\n…\n15 : the active TX_EN is latched by 16th vsync when TX_EN = 1", "4-1", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("PHI(0x19,0x1A)", "P2P_2", "0x1AFF", "TX_EN", "TX encoder enable \n1 : enable\n0 : disable", "0", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1B00", "gsp1_pol", "gsp1 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1B00", "en_gsp1_2w", "enable gsp1 2X sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1B01", "gsp1_sh[7:0]", "gsp1 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1B00", "gsp1_sh[13:8]", "gsp1 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1B02", "en_gsp1_or", "enable gsp1 output to gpo_or_1_o", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1B02", "gsp1_sel_r_osc_trg", "select osc clk count to trigger start position", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1B02", "gsp1_sel_f_osc_trg", "select osc clk count to trigger falling position", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1B02", "en_gsp1_inx_2x_vs", "1: gsp1 output second pulse at vtotal/2 position", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1B02", "gsp1_w[3:0]", "width of gsp1 (line base)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1B03", "gsp1_w_twice[3:0]", "width of gsp1 for twice output (line base)", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1B05", "gsp1_ST_ln[7:0]", "gsp1 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1B04", "gsp1_ST_ln[14:8]", "gsp1 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "VS", "0x1B06", "sel_vs8", "delay VS to line 8", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "VS", "0x1B06", "sel_vs7", "delay VS to line 7", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "VS", "0x1B06", "sel_vs6", "delay VS to line 6", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "VS", "0x1B06", "sel_vs5", "delay VS to line 5", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "VS", "0x1B06", "sel_vs4", "delay VS to line 4", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "VS", "0x1B06", "sel_vs3", "delay VS to line 3", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "VS", "0x1B06", "sel_vs2", "delay VS to line 2", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1B09", "gsp1_ST_ln_twice[7:0]", "gsp1 start vertical line for twice output", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1B08", "gsp1_ST_ln_twice[14:8]", "gsp1 start vertical line for twice output", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B0A", "gsp2_pol", "gsp2 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B0A", "en_gsp2_2w", "enable gsp2 2X sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B0B", "gsp2_sh[7:0]", "gsp2 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B0A", "gsp2_sh[13:8]", "gsp2 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B0C", "en_gsp2_or", "enable gsp2 output to gpo_or_1_o", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B0C", "gsp2_sel_r_osc_trg", "select osc clk count to trigger start position", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B0C", "gsp2_sel_f_osc_trg", "select osc clk count to trigger falling position", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B0C", "en_gsp2_inx_2x_vs", "1: gsp2 output second pulse at vtotal/2 position", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B0C", "gsp2_w[3:0]", "width of gsp2 (line base)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B0D", "gsp2_w_twice[3:0]", "width of gsp2 for twice output (line base)", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B0F", "gsp2_ST_ln[7:0]", "gsp2 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B0E", "gsp2_ST_ln[14:8]", "gsp2 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B11", "gsp2_ST_ln_twice[7:0]", "gsp2 start vertical line for twice output", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B10", "gsp2_ST_ln_twice[14:8]", "gsp2 start vertical line for twice output", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2", "0x1B12", "en_even_f", "enable tx even_f switch table", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2", "0x1B12", "en_sdrrs", "enable sdrrs switch table", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2", "0x1B12", "manual_sdrrs", "manual enable switch table", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B13", "gsp2_ST_ln_twice[7:0]", "gsp2 start vertical line for twice output", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1B12", "gsp2_ST_ln_twice[12:8]", "gsp2 start vertical line for twice output", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "FS", "0x1B14", "fs_pol", "fs polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "FS", "0x1B14", "en_fs_2w", "enable fs 2X sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "FS", "0x1B15", "fs_sh[7:0]", "fs start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "FS", "0x1B14", "fs_sh[13:8]", "fs start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "FS", "0x1B16", "fs_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "FS", "0x1B16", "fs_sel_f_osc_trg", "select osc clk count to trigger falling position", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "FS", "0x1B16", "fs_w[3:0]", "width of fs", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "FS", "0x1B17", "fs_w_twice[3:0]", "width of fs for twice output", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "FS", "0x1B18", "en_fs_inx_2x_vs", "1: fs output second pulse at vtotal/2 position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "FS", "0x1B19", "fs_ST_ln[7:0]", "fs start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "FS", "0x1B18", "fs_ST_ln[14:8]", "fs start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1B1B", "goa_clk6_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1B1A", "goa_clk6_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "FS", "0x1B1D", "fs_ST_ln_twice[7:0]", "fs start vertical line for twice output", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "FS", "0x1B1C", "fs_ST_ln_twice[14:8]", "fs start vertical line for twice output", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B1F", "goel_sh_even[7:0]", "goel start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B1E", "goel_sh_even[13:8]", "goel start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B21", "goel_w_even[7:0]", "width of goel", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B20", "goel_w_even[13:8]", "width of goel", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B23", "goer_sh_even[7:0]", "goer start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B22", "goer_sh_even[13:8]", "goer start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B25", "goer_w_even[7:0]", "width of goer", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B24", "goer_w_even[13:8]", "width of goer", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1B26", "gckl_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1B26", "gckl_sel_f_osc_trg", "select osc clk count to trigger width", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1B27", "gckl_sh[7:0]", "gckl start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1B26", "gckl_sh[13:8]", "gckl start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1B28", "gckl_pol", "gckl polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1B28", "en_gckl_2w", "enable gckl 2X width and sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1B29", "gckl_w[7:0]", "width of gckl", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1B28", "gckl_w[13:8]", "width of gckl", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1B2A", "en_gckl_odd_even", "enable gck odd/even line use different rising/falling setting", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1B2B", "gckl_ST_ln[7:0]", "gckl start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1B2A", "gckl_ST_ln[14:8]", "gckl start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1B2C", "en_gck_l_or", "enable gck_l output to gpo_or_1_o", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1B2D", "gckl_EN_ln[7:0]", "gckl end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1B2C", "gckl_EN_ln[14:8]", "gckl end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1B2E", "gckr_pol", "gckr polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1B2E", "en_gckr_2w", "enable gckr 2X width and sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1B2F", "gckr_sh[7:0]", "gckr start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1B2E", "gckr_sh[13:8]", "gckr start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1B30", "gckr_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1B30", "gckr_sel_f_osc_trg", "select osc clk count to trigger width", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1B31", "gckr_w[7:0]", "width of gckr", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1B30", "gckr_w[13:8]", "width of gckr", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1B32", "en_gckr_odd_even", "enable gck odd/even line use different rising/falling setting", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1B33", "gckr_ST_ln[7:0]", "gckr start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1B32", "gckr_ST_ln[14:8]", "gckr start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1B34", "en_gck_r_or", "enable gck_r output to gpo_or_2_o", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1B35", "gckr_EN_ln[7:0]", "gckr end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1B34", "gckr_EN_ln[14:8]", "gckr end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B36", "goel_pol", "goel polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B36", "en_goel_2w", "enable goel 2X width and sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B37", "goel_sh_odd[7:0]", "goel start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B36", "goel_sh_odd[13:8]", "goel start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B38", "goel_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B38", "goel_sel_f_osc_trg", "select osc clk count to trigger width", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B39", "goel_w_odd[7:0]", "width of goel", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B38", "goel_w_odd[13:8]", "width of goel", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B3A", "en_goel_odd_even", "enable goe odd/even line use different rising/falling setting", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B3B", "goel_ST_ln[7:0]", "goel start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B3A", "goel_ST_ln[14:8]", "goel start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B3D", "goel_EN_ln[7:0]", "goel end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1B3C", "goel_EN_ln[14:8]", "goel end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B3E", "goer_pol", "goer polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B3E", "en_goer_2w", "enable goer 2X width and sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B3F", "goer_sh_odd[7:0]", "goer start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B3E", "goer_sh_odd[13:8]", "goer start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B40", "goer_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B40", "goer_sel_f_osc_trg", "select osc clk count to trigger width", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B41", "goer_w_odd[7:0]", "width of goer", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B40", "goer_w_odd[13:8]", "width of goer", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B42", "en_goer_odd_even", "enable goe odd/even line use different rising/falling setting", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B43", "goer_ST_ln[7:0]", "goer start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B42", "goer_ST_ln[14:8]", "goer start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B45", "goer_EN_ln[7:0]", "goer end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1B44", "goer_EN_ln[14:8]", "goer end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1B46", "lsl_pol", "lsl polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1B46", "en_lsl_2w", "enable lsl 2X width and sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1B47", "lsl_sh_odd[7:0]", "lsl start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1B46", "lsl_sh_odd[13:8]", "lsl start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1B48", "lsl_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1B48", "lsl_sel_f_osc_trg", "select osc clk count to trigger width", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1B49", "lsl_w_odd[7:0]", "width of lsl", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1B48", "lsl_w_odd[13:8]", "width of lsl", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1B4A", "en_lsl_odd_even", "enable ls odd/even line use different rising/falling setting", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1B4B", "lsl_ST_ln[7:0]", "lsl start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1B4A", "lsl_ST_ln[14:8]", "lsl start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1B4C", "en_lsl_pw_save", "enable ls power saving function\n寬度4 Line 一個循環, 1,4 Line T1 , 2,3Line T2", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1B4D", "lsl_EN_ln[7:0]", "lsl end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1B4C", "lsl_EN_ln[14:8]", "lsl end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1B4F", "goa_clk6_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1B4E", "goa_clk6_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1B51", "goa_clk7_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1B50", "goa_clk7_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1B53", "goa_clk7_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1B52", "goa_clk7_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1B54", "lsr_pol", "lsr polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1B54", "en_lsr_2w", "enable lsr 2X width and sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1B55", "lsr_sh_odd[7:0]", "lsr start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1B54", "lsr_sh_odd[13:8]", "lsr start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1B56", "lsr_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1B56", "lsr_sel_f_osc_trg", "select osc clk count to trigger width", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1B57", "lsr_w_odd[7:0]", "width of lsr", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1B56", "lsr_w_odd[13:8]", "width of lsr", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1B58", "en_lsr_odd_even", "enable ls odd/even line use different rising/falling setting", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1B59", "lsr_ST_ln[7:0]", "lsr start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1B58", "lsr_ST_ln[14:8]", "lsr start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1B5A", "en_lsr_pw_save", "enable ls power saving function\n寬度4 Line 一個循環, 1,4 Line T1 , 2,3Line T2", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1B5B", "lsr_EN_ln[7:0]", "lsr end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1B5A", "lsr_EN_ln[14:8]", "lsr end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1B5D", "goa_clk8_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1B5C", "goa_clk8_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1B5F", "goa_clk8_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1B5E", "goa_clk8_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1B61", "goa_clk9_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1B60", "goa_clk9_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B62", "gsp3_pol", "gsp3 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B62", "en_gsp3_2w", "enable gsp3 2X sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B63", "gsp3_sh[7:0]", "gsp3 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B62", "gsp3_sh[13:8]", "gsp3 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B64", "gsp3_w[3:0]", "width of gsp3 (line base)", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B64", "gsp3_w_twice[3:0]", "width of gsp3 for twice output (line base)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B66", "en_gsp3_or", "enable gsp3 output to gpo_or_2_o", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B67", "gsp3_ST_ln[7:0]", "gsp3 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B66", "gsp3_ST_ln[14:8]", "gsp3 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B68", "en_gsp3_inx_2x_vs", "1: gsp3 output second pulse at vtotal/2 position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B69", "gsp3_ST_ln_twice[7:0]", "gsp3 start vertical line for twice output", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B68", "gsp3_ST_ln_twice[14:8]", "gsp3 start vertical line for twice output", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B6A", "gsp3_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B6A", "gsp3_sel_f_osc_trg", "select osc clk count to trigger falling position", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B6B", "gsp3_f[7:0]", "gsp3 falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP3", "0x1B6A", "gsp3_f[13:8]", "gsp3 falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH", "0x1B6C", "inv_disch", "disch polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH", "0x1B6D", "disch_r[7:0]", "disch start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH", "0x1B6C", "disch_r[13:8]", "disch start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH", "0x1B6E", "disch_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH", "0x1B6E", "disch_sel_f_osc_trg", "select osc clk count to trigger falling position", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH", "0x1B6F", "disch_f[7:0]", "disch falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH", "0x1B6E", "disch_f[13:8]", "disch falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH", "0x1B71", "ln_disch_s[7:0]", "disch start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH", "0x1B70", "ln_disch_s[14:8]", "disch start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH", "0x1B73", "ln_disch_e[7:0]", "disch end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH", "0x1B72", "ln_disch_e[14:8]", "disch end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD/GEVN", "0x1B75", "godd_gevn_fm_cnt[7:0]", "godd/geven(LC1/LC2) N frame inversion", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD/GEVN", "0x1B74", "godd_gevn_fm_cnt[9:8]", "godd/geven(LC1/LC2) N frame inversion", "1-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD/GEVN", "0x1B76", "godd_evn_sel_osc_trg", "select osc clk count to trigger toggle position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD/GEVN", "0x1B77", "ln_godd_evn[7:0]", "godd / geven toggle line count", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD/GEVN", "0x1B76", "ln_godd_evn[14:8]", "godd / geven toggle line count", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD/GEVN", "0x1B78", "en_lgd_eo", "1 : GODD output LGD simple-GIP mode signal PVDD_EO\n GEVN output LGD simple-GIP mode signal PVDD_OE", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD/GEVN", "0x1B79", "godd_evn_tog[7:0]", "godd/gevn (LC1/LC2) falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD/GEVN", "0x1B78", "godd_evn_tog[13:8]", "godd/gevn (LC1/LC2) falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD/GEVN", "0x1B7B", "godd_evn_intv[7:0]", "godd/gevn (LC1/LC2) rising position (clk domain)\nrising = falling + interval", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD/GEVN", "0x1B7A", "godd_evn_intv[13:8]", "godd/gevn (LC1/LC2) rising position (clk domain)\nrising = falling + interval", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD2/GEVN2", "0x1B7D", "godd_gevn2_fm_cnt[7:0]", "godd2/geven2(LC3/LC4) N frame inversion", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD2/GEVN2", "0x1B7C", "godd_gevn2_fm_cnt[9:8]", "godd2/geven2(LC3/LC4) N frame inversion", "1-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD2/GEVN2", "0x1B7E", "godd_evn2_sel_osc_trg", "select osc clk count to trigger toggle position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD2/GEVN2", "0x1B7F", "ln_godd_evn2[7:0]", "godd2 / geven2 toggle line count", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD2/GEVN2", "0x1B7E", "ln_godd_evn2[14:8]", "godd2 / geven2 toggle line count", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD2/GEVN2", "0x1B80", "en_lgd_eo2", "1 : GODD2 output LGD simple-GIP mode signal PVDD_EO2\n GEVN2 output LGD simple-GIP mode signal PVDD_OE2", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD2/GEVN2", "0x1B81", "godd_evn2_tog[7:0]", "godd2/gevn2 (LC3/LC4) falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD2/GEVN2", "0x1B80", "godd_evn2_tog[13:8]", "godd2/gevn2 (LC3/LC4) falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD2/GEVN2", "0x1B83", "godd_evn2_intv[7:0]", "godd2/gevn2 (LC3/LC4) rising position (clk domain)\nrising = falling + interval", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GODD2/GEVN2", "0x1B82", "godd_evn2_intv[13:8]", "godd2/gevn2 (LC3/LC4) rising position (clk domain)\nrising = falling + interval", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "poweronmask", "0x1B85", "sel_vs", "select vs type for power-on mask\n3'b000 : 1 frame\n3'b001 : 2 frame \n3'b010 : 4 frame\n3'b011 : 8 frame\n3'b1xx : 16 frame", "6-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "poweronmask", "0x1B85", "INIT_FS[3:0]", "frame count of fs power-on mask", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "poweronmask", "0x1B86", "INIT_GOE[3:0]", "frame count of goe power-on mask", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "poweronmask", "0x1B86", "INIT_GCK[3:0]", "frame count of gck power-on mask", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "poweronmask", "0x1B87", "INIT_LS[3:0]", "frame count of ls power-on mask", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "poweronmask", "0x1B88", "INIT_REV[3:0]", "frame count of rev power-on mask", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "poweronmask", "0x1B88", "INIT_GSP[3:0]", "frame count of gsp power-on mask", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "poweronmask", "0x1B89", "INIT_DISCH[3:0]", "frame count of DISCH power-on mask", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "poweronmask", "0x1B89", "INIT_LC[3:0]", "frame count of LC power-on mask", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Abnormalmask", "0x1B8A", "gsp_ab_fm_cnt[1:0]", "mask frame count for gsp1~3, fs, gsp_led\n0: disable abnormal mask", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Abnormalmask", "0x1B8A", "gck_ab_fm_cnt[1:0]", "mask frame count for gckl, gckr\n0: disable abnormal mask", "5-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Abnormalmask", "0x1B8A", "ls_ab_fm_cnt[1:0]", "mask frame count for lsl, lsr\n0: disable abnormal mask", "3-2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Abnormalmask", "0x1B8A", "rev_ab_fm_cnt[1:0]", "mask frame count for rev1, rev2\n0: disable abnormal mask", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Abnormalmask", "0x1B8B", "disch_ab_fm_cnt[1:0]", "mask frame count for disch\n0: disable abnormal mask", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Abnormalmask", "0x1B8B", "lc_ab_fm_cnt[1:0]", "mask frame count for lc\n0: disable abnormal mask", "5-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Abnormalmask", "0x1B8B", "goa_odd_ab_fm_cnt[1:0]", "mask frame count for odd goa\n0: disable abnormal mask", "3-2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Abnormalmask", "0x1B8B", "goa_even_ab_fm_cnt[1:0]", "mask frame count for even goa\n0: disable abnormal mask", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Abnormalmask", "0x1B8C", "oe_ab_msk_fm_cnt[3:0]", "mask oe frame count when tx abnormal\n0: disable abnormal mask", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Abnormalmask", "0x1B8C", "ab_godd_high", "abnormal mask LC1 high", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Abnormalmask", "0x1B8C", "ab_gevn_high", "abnormal mask LC2 high", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "poweronmask", "0x1B8C", "po_godd", "power on mask high/low of LC1", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "poweronmask", "0x1B8C", "po_gevn", "power on mask high/low of LC2", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1B8D", "ab_godd2_high", "abnormal mask LC3 high", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1B8D", "ab_gevn2_high", "abnormal mask LC4 high", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "poweronmask", "0x1B8D", "po_godd2", "power on mask high/low of LC3", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "poweronmask", "0x1B8D", "po_gevn2", "power on mask high/low of LC4", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOAOR", "0x1B8D", "en_goa_clk1_or2", "enable OR2 function", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOAOR", "0x1B8D", "en_goa_clk2_or2", "enable OR2 function", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOAOR", "0x1B8D", "en_goa_clk3_or2", "enable OR2 function", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOAOR", "0x1B8D", "en_goa_clk4_or2", "enable OR2 function", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOAOR", "0x1B8E", "en_goa_clk5_or2", "enable OR2 function", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOAOR", "0x1B8E", "en_goa_clk6_or2", "enable OR2 function", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOAOR", "0x1B8E", "en_goa_clk7_or2", "enable OR2 function", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOAOR", "0x1B8E", "en_goa_clk8_or2", "enable OR2 function", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOAOR", "0x1B8E", "en_goa_clk9_or2", "enable OR2 function", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOAOR", "0x1B8E", "en_goa_clk10_or2", "enable OR2 function", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOAOR", "0x1B8E", "en_goa_clk11_or2", "enable OR2 function", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOAOR", "0x1B8E", "en_goa_clk12_or2", "enable OR2 function", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "iSPmask", "0x1B8F", "sel_vs", "OE / GOA masked while iSP unlock\n0: Disable\n1: Enable", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "iSPmask", "0x1B8F", "isp_oe_mask_type", "OE mask type selection while iSP unlock\n0: OE masked by line\n1: OE masked by frame", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "iSPmask", "0x1B8F", "isp_ls_mask_high", "0 : ls oulsut normal\n1 : ls oulsut high", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "iSPmask", "0x1B8F", "isp_ls_unlock_en", "ls oulsut type while isp unlock\n0 : ls oulsut low\n1 : ls outout normal", "4", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "iSPmask", "0x1B8F", "isp_oe_mask_cnt[2:0]", "OE mask line count\n0 : only mask when unlock\n1 : mask at unlock region and 1st line at lock region\n2 : mask at unlock region and 2nd line at lock region\n3 : mask at unlock region and 3rd line at lock region", "2-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1B90", "goa_clk1_pol", "goa_clk1 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1B90", "en_goa_clk1_2w", "enable goa_clk1 2X width and sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1B91", "goa_clk1_sh[7:0]", "goa_clk1 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1B90", "goa_clk1_sh[13:8]", "goa_clk1 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1B92", "goa_clk1_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1B93", "goa_clk1_w[7:0]", "width of goa_clk1", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1B92", "goa_clk1_w[14:8]", "width of goa_clk1", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1B94", "goa_clk1_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1B95", "goa_clk1_ST_ln[7:0]", "goa_clk1 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1B94", "goa_clk1_ST_ln[14:8]", "goa_clk1 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1B96", "en_goa_clk1_or", "enable goa_clk1 output to gpo_or_1_o", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1B97", "goa_clk1_EN_ln[7:0]", "goa_clk1 end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1B96", "goa_clk1_EN_ln[14:8]", "goa_clk1 end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1B98", "goa_clk2_pol", "goa_clk2 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1B98", "en_goa_clk2_2w", "enable goa_clk2 2X width and sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1B99", "goa_clk2_sh[7:0]", "goa_clk2 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1B98", "goa_clk2_sh[13:8]", "goa_clk2 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1B9A", "goa_clk2_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1B9B", "goa_clk2_w[7:0]", "width of goa_clk2", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1B9A", "goa_clk2_w[14:8]", "width of goa_clk2", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1B9C", "goa_clk2_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1B9D", "goa_clk2_ST_ln[7:0]", "goa_clk2 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1B9C", "goa_clk2_ST_ln[14:8]", "goa_clk2 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1B9E", "en_goa_clk2_or", "enable goa_clk2 output to gpo_or_2_o", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1B9F", "goa_clk2_EN_ln[7:0]", "goa_clk2 end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1B9E", "goa_clk2_EN_ln[14:8]", "goa_clk2 end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1BA0", "goa_clk3_pol", "goa_clk3 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1BA0", "en_goa_clk3_2w", "enable goa_clk3 2X width and sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1BA1", "goa_clk3_sh[7:0]", "goa_clk3 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1BA0", "goa_clk3_sh[13:8]", "goa_clk3 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1BA2", "goa_clk3_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1BA3", "goa_clk3_w[7:0]", "width of goa_clk3", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1BA2", "goa_clk3_w[14:8]", "width of goa_clk3", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1BA4", "goa_clk3_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1BA5", "goa_clk3_ST_ln[7:0]", "goa_clk3 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1BA4", "goa_clk3_ST_ln[14:8]", "goa_clk3 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1BA7", "goa_clk3_EN_ln[7:0]", "goa_clk3 end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1BA6", "goa_clk3_EN_ln[14:8]", "goa_clk3 end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1BA8", "goa_clk4_pol", "goa_clk4 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1BA8", "en_goa_clk4_2w", "enable goa_clk4 2X width and sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1BA9", "goa_clk4_sh[7:0]", "goa_clk4 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1BA8", "goa_clk4_sh[13:8]", "goa_clk4 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1BAA", "goa_clk4_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1BAB", "goa_clk4_w[7:0]", "width of goa_clk4", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1BAA", "goa_clk4_w[14:8]", "width of goa_clk4", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1BAC", "goa_clk4_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1BAD", "goa_clk4_ST_ln[7:0]", "goa_clk4 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1BAC", "goa_clk4_ST_ln[14:8]", "goa_clk4 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1BAF", "goa_clk4_EN_ln[7:0]", "goa_clk4 end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1BAE", "goa_clk4_EN_ln[14:8]", "goa_clk4 end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1BB0", "goa_clk5_pol", "goa_clk5 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1BB0", "en_goa_clk5_2w", "enable goa_clk5 2X width and sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1BB1", "goa_clk5_sh[7:0]", "goa_clk5 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1BB0", "goa_clk5_sh[13:8]", "goa_clk5 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1BB2", "goa_clk5_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1BB3", "goa_clk5_w[7:0]", "width of goa_clk5", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1BB2", "goa_clk5_w[14:8]", "width of goa_clk5", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1BB4", "goa_clk5_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1BB5", "goa_clk5_ST_ln[7:0]", "goa_clk5 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1BB4", "goa_clk5_ST_ln[14:8]", "goa_clk5 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1BB7", "goa_clk5_EN_ln[7:0]", "goa_clk5 end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1BB6", "goa_clk5_EN_ln[14:8]", "goa_clk5 end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1BB8", "goa_clk6_pol", "goa_clk6 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1BB8", "en_goa_clk6_2w", "enable goa_clk6 2X width and sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1BB9", "goa_clk6_sh[7:0]", "goa_clk6 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1BB8", "goa_clk6_sh[13:8]", "goa_clk6 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1BBA", "goa_clk6_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1BBB", "goa_clk6_w[7:0]", "width of goa_clk6", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1BBA", "goa_clk6_w[14:8]", "width of goa_clk6", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1BBC", "goa_clk6_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1BBD", "goa_clk6_ST_ln[7:0]", "goa_clk6 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1BBC", "goa_clk6_ST_ln[14:8]", "goa_clk6 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1BBF", "goa_clk6_EN_ln[7:0]", "goa_clk6 end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1BBE", "goa_clk6_EN_ln[14:8]", "goa_clk6 end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "poweronmask", "0x1BC0", "INIT_GOA_odd[3:0]", "frame count of odd goa power-on mask", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "poweronmask", "0x1BC0", "INIT_GOA_even[3:0]", "frame count of even goa power-on mask", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1BC2", "po_goa1_high", "1 : power-on mask high", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1BC2", "po_goa2_high", "1 : power-on mask high", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1BC2", "po_goa3_high", "1 : power-on mask high", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1BC2", "po_goa4_high", "1 : power-on mask high", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1BC2", "po_goa5_high", "1 : power-on mask high", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1BC2", "po_goa6_high", "1 : power-on mask high", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1BC2", "po_goa7_high", "1 : power-on mask high", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1BC2", "po_goa8_high", "1 : power-on mask high", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1BC4", "gckl_sh_even[7:0]", "gckl start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1BC3", "gckl_sh_even[13:8]", "gckl start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1BC6", "gckl_w_even[7:0]", "width of gckl", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_L", "0x1BC5", "gckl_w_even[13:8]", "width of gckl", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1BC8", "gckr_sh_even[7:0]", "gckr start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1BC7", "gckr_sh_even[13:8]", "gckr start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1BCA", "gckr_w_even[7:0]", "width of gckr", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GCK_R", "0x1BC9", "gckr_w_even[13:8]", "width of gckr", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1BCB", "goa_even_f_en", "1: goa1 <-> goa2 when even_f = 1", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1BCB", "goa1_type[4:0]", "GOA1 phase number", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1BCC", "goa2_type[4:0]", "GOA2 phase number", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1BCD", "goa3_type[4:0]", "GOA3 phase number", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1BCE", "goa4_type[4:0]", "GOA4 phase number", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1BCF", "goa5_type[4:0]", "GOA5 phase number", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH2", "0x1BD0", "inv_disch2", "disch2 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH2", "0x1BD1", "disch2_r[7:0]", "disch2 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH2", "0x1BD0", "disch2_r[13:8]", "disch2 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH2", "0x1BD2", "disch2_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH2", "0x1BD2", "disch2_sel_f_osc_trg", "select osc clk count to trigger falling position", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH2", "0x1BD3", "disch2_f[7:0]", "disch2 falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH2", "0x1BD2", "disch2_f[13:8]", "disch2 falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH2", "0x1BD5", "ln_disch2_s[7:0]", "disch2 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH2", "0x1BD4", "ln_disch2_s[14:8]", "disch2 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH2", "0x1BD7", "ln_disch2_e[7:0]", "disch2 end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "DISCH2", "0x1BD6", "ln_disch2_e[14:8]", "disch2 end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1BD8", "goa6_type[4:0]", "GOA6 phase number", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1BD9", "goa7_type[4:0]", "GOA7 phase number", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1BDA", "goa8_type[4:0]", "GOA8 phase number", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1BDB", "goa9_type[4:0]", "GOA9 phase number", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1BDC", "goa10_type[4:0]", "GOA10 phase number", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1BDD", "goa11_type[4:0]", "GOA11 phase number", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1BDE", "goa12_type[4:0]", "GOA12 phase number", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1BDF", "goa_clk1_msk_v", "goa initial line mask", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1BDF", "goa_clk2_msk_v", "goa initial line mask", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1BE0", "goa_clk3_msk_v", "goa initial line mask", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1BE0", "goa_clk4_msk_v", "goa initial line mask", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1BE1", "goa_clk5_msk_v", "goa initial line mask", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1BE1", "goa_clk6_msk_v", "goa initial line mask", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1BE3", "lsl_sh_even[7:0]", "lsl start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1BE2", "lsl_sh_even[13:8]", "lsl start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1BE5", "lsl_w_even[7:0]", "width of lsl", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_L", "0x1BE4", "lsl_w_even[13:8]", "width of lsl", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1BE7", "lsr_sh_even[7:0]", "lsr start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1BE6", "lsr_sh_even[13:8]", "lsr start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1BE9", "lsr_w_even[7:0]", "width of lsr", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_R", "0x1BE8", "lsr_w_even[13:8]", "width of lsr", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1BEA", "goa_clk7_msk_v", "goa initial line mask", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1BEA", "goa_clk8_msk_v", "goa initial line mask", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1BEB", "goa_clk9_msk_v", "goa initial line mask", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1BEB", "goa_clk10_msk_v", "goa initial line mask", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1BEC", "goa_clk11_msk_v", "goa initial line mask", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1BEC", "goa_clk12_msk_v", "goa initial line mask", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP_LED", "0x1BEE", "gsp_led_pol", "gsp_led polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP_LED", "0x1BEE", "en_gsp_led_2w", "enable gsp_led 2X sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP_LED", "0x1BEF", "gsp_led_sh[7:0]", "gsp_led start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP_LED", "0x1BEE", "gsp_led_sh[13:8]", "gsp_led start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP_LED", "0x1BF0", "en_gsp_led_or", "enable gsp_led OR gsp2. output to gpo_or_2_o", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP_LED", "0x1BF0", "gsp_led_sel_r_osc_trg", "select osc clk count to trigger start position", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP_LED", "0x1BF0", "gsp_led_sel_f_osc_trg", "select osc clk count to trigger falling position", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP_LED", "0x1BF0", "gsp_led_last_region_en", "1: gsp & last region (last region rising delay)", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP_LED", "0x1BF0", "gsp_led_w[3:0]", "width of gsp_led", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP_LED", "0x1BF1", "gsp_led_w_twice[3:0]", "width of gsp_led for twice output", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP_LED", "0x1BF3", "gsp_led_ST_ln[7:0]", "gsp_led start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP_LED", "0x1BF2", "gsp_led_ST_ln[14:8]", "gsp_led start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1BF5", "goa_clk9_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1BF4", "goa_clk9_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP_LED", "0x1BF6", "en_gsp_led_inx_2x_vs", "1: gsp_led output second pulse at vtotal/2 position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP_LED", "0x1BF7", "gsp_led_ST_ln_twice[7:0]", "gsp_led start vertical line for twice output", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP_LED", "0x1BF6", "gsp_led_ST_ln_twice[14:8]", "gsp_led start vertical line for twice output", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1BF8", "goa_clk7_pol", "goa_clk7 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1BF8", "en_goa_clk7_2w", "enable goa_clk7 2X width and sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1BF9", "goa_clk7_sh[7:0]", "goa_clk7 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1BF8", "goa_clk7_sh[13:8]", "goa_clk7 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1BFA", "goa_clk7_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1BFB", "goa_clk7_w[7:0]", "width of goa_clk7", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1BFA", "goa_clk7_w[14:8]", "width of goa_clk7", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1BFC", "goa_clk7_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1BFD", "goa_clk7_ST_ln[7:0]", "goa_clk7 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1BFC", "goa_clk7_ST_ln[14:8]", "goa_clk7 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1BFE", "en_goa_clk7_or", "enable goa_clk7 OR and output to goa_clk12", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1BFF", "goa_clk7_EN_ln[7:0]", "goa_clk7 end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1BFE", "goa_clk7_EN_ln[14:8]", "goa_clk7 end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_GSP", "0x1C00", "en_gsp_sdrv_msk", "enable gsp sdrv mask", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_GSP", "0x1C00", "gsp_sdrv_msk_high", "mask gsp high", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_GSP", "0x1C02", "gsp_sdrv_msk_EN_ln[7:0]", "gsp sdrv mask end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_GSP", "0x1C01", "gsp_sdrv_msk_EN_ln[14:8]", "gsp sdrv mask end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_GCK", "0x1C03", "gck_sdrv_msk_high", "mask gck high", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_GOE", "0x1C03", "goe_sdrv_msk_high", "mask goe high", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_LS", "0x1C03", "ls_sdrv_msk_high", "mask ls high", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_REV", "0x1C03", "en_rev_sdrv_msk", "enable rev sdrv mask", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_REV", "0x1C03", "rev_sdrv_msk_high", "mask rev high", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_GOA", "0x1C03", "goa_sdrv_msk_high", "mask goa high", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_TCON_IF", "0x1C04", "tconif_pol", "tconif polarity. 1:inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_TCON_IF", "0x1C05", "tconif_ST_ln[7:0]", "tconif start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_TCON_IF", "0x1C04", "tconif_ST_ln[14:8]", "tconif start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_TCON_IF", "0x1C07", "tconif_EN_ln[7:0]", "tconif end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_TCON_IF", "0x1C06", "tconif_EN_ln[14:8]", "tconif end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_TCON_IF", "0x1C09", "tconif_sh[7:0]", "tconif start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "SDRV_TCON_IF", "0x1C08", "tconif_sh[13:8]", "tconif start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "PSR_SDRV", "0x1C0B", "psr_hpd_r[7:0]", "psr_hpd rising position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "PSR_SDRV", "0x1C0A", "psr_hpd_r[13:8]", "psr_hpd rising position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "PSR_SDRV", "0x1C0D", "psr_hpd_f[7:0]", "psr_hpd falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "PSR_SDRV", "0x1C0C", "psr_hpd_f[13:8]", "psr_hpd falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "PSR_SDRV", "0x1C0E", "psr_sdrv_sel", "0 : output hpd_ctg\n1 : output hpd_gpio_ctg (from TX_top)", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "PSR_SDRV", "0x1C0F", "psr_hpd_ST_ln[7:0]", "psr_hpd start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "PSR_SDRV", "0x1C0E", "psr_hpd_ST_ln[14:8]", "psr_hpd start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "PSR_SDRV", "0x1C11", "psr_hpd_EN_ln[7:0]", "psr_hpd end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "PSR_SDRV", "0x1C10", "psr_hpd_EN_ln[14:8]", "psr_hpd end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1C15", "po_gsp1_high", "1 : power-on mask high", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1C15", "po_gsp2_high", "1 : power-on mask high", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1C15", "po_gsp3_high", "1 : power-on mask high", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1C15", "po_fs_high", "1 : power-on mask high", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1C15", "po_gsp_led_high", "1 : power-on mask high", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1C15", "po_disch1_high", "1 : power-on mask high", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1C15", "po_disch2_high", "1 : power-on mask high", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1C15", "po_goel_high", "1 : power-on mask high", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1C16", "po_goer_high", "1 : power-on mask high", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1C16", "po_gckl_high", "1 : power-on mask high", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1C16", "po_gckr_high", "1 : power-on mask high", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1C16", "po_lsl_high", "1 : power-on mask high", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1C16", "po_lsr_high", "1 : power-on mask high", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1C16", "po_rev1_high", "1 : power-on mask high", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "po_mask_high/low", "0x1C16", "po_rev2_high", "1 : power-on mask high", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C17", "ab_gsp1_high", "1 : abnormal mask high", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C17", "ab_gsp2_high", "1 : abnormal mask high", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C17", "ab_gsp3_high", "1 : abnormal mask high", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C17", "ab_fs_high", "1 : abnormal mask high", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C17", "ab_gsp_led_high", "1 : abnormal mask high", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C17", "ab_disch1_high", "1 : abnormal mask high", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C17", "ab_disch2_high", "1 : abnormal mask high", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C17", "ab_goel_high", "1 : abnormal mask high", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C18", "ab_goer_high", "1 : abnormal mask high", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C18", "ab_gckl_high", "1 : abnormal mask high", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C18", "ab_gckr_high", "1 : abnormal mask high", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C18", "ab_lsl_high", "1 : abnormal mask high", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C18", "ab_lsr_high", "1 : abnormal mask high", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C18", "ab_rev1_high", "1 : abnormal mask high", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C18", "ab_rev2_high", "1 : abnormal mask high", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C19", "ab_goa1_high", "1 : abnormal mask high", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C19", "ab_goa2_high", "1 : abnormal mask high", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C19", "ab_goa3_high", "1 : abnormal mask high", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C19", "ab_goa4_high", "1 : abnormal mask high", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C19", "ab_goa5_high", "1 : abnormal mask high", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C19", "ab_goa6_high", "1 : abnormal mask high", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C19", "ab_goa7_high", "1 : abnormal mask high", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "ab_mask_high/low", "0x1C19", "ab_goa8_high", "1 : abnormal mask high", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C1B", "rev_sh[7:0]", "rev start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C1A", "rev_sh[15:8]", "rev start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C1C", "rev_ref_ctg", "1 : internal frame pol reference ctg", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C1D", "rev_ST_ln[7:0]", "frame POL toggle vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C1C", "rev_ST_ln[14:8]", "frame POL toggle vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C1E", "rev_patt_num[3:0]", "rev pattern count :\nN line 1 cycle", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C20", "rev_EN_ln[7:0]", "rev end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C1F", "rev_EN_ln[14:8]", "rev end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C22", "rev_mode[7:0]", "rev frame inversion for standard chip", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C21", "rev_mode[15:8]", "rev frame inversion for standard chip", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C23", "rev_k", "REV N frame inversion. N=K*2^m (INX)", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C23", "rev_m", "REV N frame inversion. N=K*2^m (INX)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C26", "rev_patt[7:0]", "line inversion type", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C25", "rev_patt[15:8]", "line inversion type", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C28", "rev_set_frm_inv_cnt[7:0]", "2frame inversion number (設為0為disable此功能)\n1 frame：+-+-+-+-或+--++--+ \n2 frame：-+-+-+-+或-++--++- \n3 frame：+-+-+-+-或+--++--+ \n4 frame：-+-+-+-+或-++--++-\n.\n.\n2N-1frame：+-+-+-+-或+--++--+ \n2N frame：-+-+-+-+或-++--++-\n2N+1frame：-+-+-+-+或-++--++- \n2N+2frame：+-+-+-+-或+--++--+\n2N+3frame：-+-+-+-+或-++--++- \n2N+4frame：+-+-+-+-或+--++--+", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV1", "0x1C27", "rev_set_frm_inv_cnt[11:8]", "2frame inversion number (設為0為disable此功能)\n1 frame：+-+-+-+-或+--++--+ \n2 frame：-+-+-+-+或-++--++- \n3 frame：+-+-+-+-或+--++--+ \n4 frame：-+-+-+-+或-++--++-\n.\n.\n2N-1frame：+-+-+-+-或+--++--+ \n2N frame：-+-+-+-+或-++--++-\n2N+1frame：-+-+-+-+或-++--++- \n2N+2frame：+-+-+-+-或+--++--+\n2N+3frame：-+-+-+-+或-++--++- \n2N+4frame：+-+-+-+-或+--++--+", "3-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C2A", "rev2_k", "REV2 N frame inversion. N=K*2^m (INX)", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C2A", "rev2_m", "REV2 N frame inversion. N=K*2^m (INX)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C2C", "rev2_sh[7:0]", "rev2 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C2B", "rev2_sh[15:8]", "rev2 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C2D", "rev2_ref_ctg", "1 : internal frame pol reference ctg", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C2E", "rev2_ST_ln[7:0]", "frame POL toggle vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C2D", "rev2_ST_ln[14:8]", "frame POL toggle vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C2F", "rev2_patt_num[3:0]", "rev2 pattern count :\nN line 1 cycle", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C2F", "rev2_patt_num_PDET[3:0]", "useful at pattern detection enable:\nrev2 pattern count :\nN line 1 cycle", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C31", "rev2_EN_ln[7:0]", "rev2 end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C30", "rev2_EN_ln[14:8]", "rev2 end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C33", "rev2_mode[7:0]", "rev2 frame inversion for standard chip", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C32", "rev2_mode[15:8]", "rev2 frame inversion for standard chip", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C35", "rev2_mode_PDET[7:0]", "useful at pattern detection enable:\nrev2 frame inversion for standard chip", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C34", "rev2_mode_PDET[15:8]", "useful at pattern detection enable:\nrev2 frame inversion for standard chip", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C37", "rev2_patt[7:0]", "line inversion type", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C36", "rev2_patt[15:8]", "line inversion type", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C39", "rev2_patt_PDET[7:0]", "useful at pattern detection enable:\nline inversion type", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C38", "rev2_patt_PDET[15:8]", "useful at pattern detection enable:\nline inversion type", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C3B", "rev2_set_frm_inv_cnt[7:0]", "2frame inversion number (設為0為disable此功能)\n1 frame：+-+-+-+-或+--++--+ \n2 frame：-+-+-+-+或-++--++- \n3 frame：+-+-+-+-或+--++--+ \n4 frame：-+-+-+-+或-++--++-\n.\n.\n2N-1frame：+-+-+-+-或+--++--+ \n2N frame：-+-+-+-+或-++--++-\n2N+1frame：-+-+-+-+或-++--++- \n2N+2frame：+-+-+-+-或+--++--+\n2N+3frame：-+-+-+-+或-++--++- \n2N+4frame：+-+-+-+-或+--++--+", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "REV2", "0x1C3A", "rev2_set_frm_inv_cnt[11:8]", "2frame inversion number (設為0為disable此功能)\n1 frame：+-+-+-+-或+--++--+ \n2 frame：-+-+-+-+或-++--++- \n3 frame：+-+-+-+-或+--++--+ \n4 frame：-+-+-+-+或-++--++-\n.\n.\n2N-1frame：+-+-+-+-或+--++--+ \n2N frame：-+-+-+-+或-++--++-\n2N+1frame：-+-+-+-+或-++--++- \n2N+2frame：+-+-+-+-或+--++--+\n2N+3frame：-+-+-+-+或-++--++- \n2N+4frame：+-+-+-+-或+--++--+", "3-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C46", "goa_clk12_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C46", "goa_clk12_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C46", "goa_clk12_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C46", "goa_clk12_pol", "goa_clk12 polarity 1: inverse", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C46", "en_goa_clk12_2w", "enable goa_clk12 2X width and sh", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C46", "goa_clk12_sel_r_osc_trg", "select osc clk count to trigger start position", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C46", "goa_clk12_sel_f_osc_trg", "select osc clk count to trigger width", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C46", "po_goa12_high", "", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1C48", "goa_clk10_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1C47", "goa_clk10_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C4A", "ab_goa12_high", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C4B", "goa_clk12_sh_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C4A", "goa_clk12_sh_table2[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C4D", "goa_clk12_sh[7:0]", "goa_clk12 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C4C", "goa_clk12_sh[13:8]", "goa_clk12 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C4F", "goa_clk12_w_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C4E", "goa_clk12_w_table2[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C51", "goa_clk12_w[7:0]", "width of goa_clk12", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C50", "goa_clk12_w[14:8]", "width of goa_clk12", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C53", "goa_clk12_ST_ln[7:0]", "goa_clk12 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C52", "goa_clk12_ST_ln[14:8]", "goa_clk12 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C55", "goa_clk12_EN_ln[7:0]", "goa_clk12 end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C54", "goa_clk12_EN_ln[14:8]", "goa_clk12 end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C57", "goa_clk12_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C56", "goa_clk12_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C58", "goa_clk12_patt[23:16]", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C5A", "goa_clk12_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA12", "0x1C59", "goa_clk12_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C5B", "goa_clk11_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C5B", "goa_clk11_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C5B", "goa_clk11_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C5B", "goa_clk11_pol", "goa_clk11 polarity 1: inverse", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C5B", "en_goa_clk11_2w", "enable goa_clk11 2X width and sh", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C5B", "goa_clk11_sel_r_osc_trg", "select osc clk count to trigger start position", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C5B", "goa_clk11_sel_f_osc_trg", "select osc clk count to trigger width", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C5B", "po_goa11_high", "", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1C5D", "goa_clk10_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1C5C", "goa_clk10_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C5F", "ab_goa11_high", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C60", "goa_clk11_sh_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C5F", "goa_clk11_sh_table2[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C62", "goa_clk11_sh[7:0]", "goa_clk11 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C61", "goa_clk11_sh[13:8]", "goa_clk11 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C64", "goa_clk11_w_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C63", "goa_clk11_w_table2[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C66", "goa_clk11_w[7:0]", "width of goa_clk11", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C65", "goa_clk11_w[14:8]", "width of goa_clk11", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C68", "goa_clk11_ST_ln[7:0]", "goa_clk11 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C67", "goa_clk11_ST_ln[14:8]", "goa_clk11 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C69", "en_goa_clk11_or", "enable goa_clk11 OR and output to goa_clk12", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C6A", "goa_clk11_EN_ln[7:0]", "goa_clk11 end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C69", "goa_clk11_EN_ln[14:8]", "goa_clk11 end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C6C", "goa_clk11_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C6B", "goa_clk11_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C6D", "goa_clk11_patt[23:16]", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C6F", "goa_clk11_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA11", "0x1C6E", "goa_clk11_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C70", "goa_clk10_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C70", "goa_clk10_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C70", "goa_clk10_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C70", "goa_clk10_pol", "goa_clk10 polarity 1: inverse", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C70", "en_goa_clk10_2w", "enable goa_clk10 2X width and sh", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C70", "goa_clk10_sel_r_osc_trg", "select osc clk count to trigger start position", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C70", "goa_clk10_sel_f_osc_trg", "select osc clk count to trigger width", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C70", "po_goa10_high", "", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C74", "ab_goa10_high", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C75", "goa_clk10_sh_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C74", "goa_clk10_sh_table2[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C77", "goa_clk10_sh[7:0]", "goa_clk10 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C76", "goa_clk10_sh[13:8]", "goa_clk10 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C79", "goa_clk10_w_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C78", "goa_clk10_w_table2[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C7B", "goa_clk10_w[7:0]", "width of goa_clk10", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C7A", "goa_clk10_w[14:8]", "width of goa_clk10", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C7D", "goa_clk10_ST_ln[7:0]", "goa_clk10 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C7C", "goa_clk10_ST_ln[14:8]", "goa_clk10 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C7E", "en_goa_clk10_or", "enable goa_clk10 OR and output to goa_clk12", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C7F", "goa_clk10_EN_ln[7:0]", "goa_clk10 end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C7E", "goa_clk10_EN_ln[14:8]", "goa_clk10 end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C81", "goa_clk10_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C80", "goa_clk10_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C82", "goa_clk10_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C84", "goa_clk10_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA10", "0x1C83", "goa_clk10_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1C86", "tsyncn1_LHB_EN_ln_last[7:0]", "Last LHB tsyncn1 falling line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1C85", "tsyncn1_LHB_EN_ln_last[12:8]", "Last LHB tsyncn1 falling line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1C88", "tsyncn2_LHB_EN_ln_last[7:0]", "Last LHB tsyncn2 rising line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1C87", "tsyncn2_LHB_EN_ln_last[12:8]", "Last LHB tsyncn2 rising line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C90", "goa_clk9_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C90", "goa_clk9_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C90", "goa_clk9_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C90", "goa_clk9_pol", "goa_clk9 polarity 1: inverse", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C90", "en_goa_clk9_2w", "enable goa_clk9 2X width and sh", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C90", "goa_clk9_sel_r_osc_trg", "select osc clk count to trigger start position", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C90", "goa_clk9_sel_f_osc_trg", "select osc clk count to trigger width", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C90", "po_goa9_high", "", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C94", "ab_goa9_high", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C95", "goa_clk9_sh_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C94", "goa_clk9_sh_table2[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C97", "goa_clk9_sh[7:0]", "goa_clk9 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C96", "goa_clk9_sh[13:8]", "goa_clk9 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C99", "goa_clk9_w_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C98", "goa_clk9_w_table2[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C9B", "goa_clk9_w[7:0]", "width of goa_clk9", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C9A", "goa_clk9_w[14:8]", "width of goa_clk9", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C9D", "goa_clk9_ST_ln[7:0]", "goa_clk9 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C9C", "goa_clk9_ST_ln[14:8]", "goa_clk9 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C9E", "en_goa_clk9_or", "enable goa_clk9 OR and output to goa_clk12", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C9F", "goa_clk9_EN_ln[7:0]", "goa_clk9 end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1C9E", "goa_clk9_EN_ln[14:8]", "goa_clk9 end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1CA1", "goa_clk9_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1CA0", "goa_clk9_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1CA2", "goa_clk9_patt[23:16]", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1CA4", "goa_clk9_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA9", "0x1CA3", "goa_clk9_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CA5", "tsyncn1_LHB_EN_ln_offset[7:0]", "Last LHB end line reduce number (line base)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CA7", "tsyncn1_LHB_ST_ln[7:0]", "LHB tsyncn falling line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CA6", "tsyncn1_LHB_ST_ln[12:8]", "LHB tsyncn falling line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CA9", "tsyncn1_LHB_EN_ln[7:0]", "LHB tsyncn rising line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CA8", "tsyncn1_LHB_EN_ln[12:8]", "LHB tsyncn rising line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CAA", "goa_clk1_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CAA", "goa_clk2_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CAB", "tsyncn1_r[7:0]", "tsyncn1 rising position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CAA", "tsyncn1_r[13:8]", "tsyncn1 rising position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CAC", "goa_clk3_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CAC", "goa_clk4_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CAD", "tsyncn1_f[7:0]", "tsyncn1 falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CAC", "tsyncn1_f[13:8]", "tsyncn1 falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CAE", "tsyncn2_LHB_EN_ln_offset[7:0]", "Last LHB end line reduce number (line base)", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB0", "tsyncn2_LHB_ST_ln[7:0]", "LHB tsyncn falling line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CAF", "tsyncn2_LHB_ST_ln[12:8]", "LHB tsyncn falling line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB1", "tsyncn1_pol", "1: reverse tsyncn1", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB1", "tsyncn2_pol", "1: reverse tsyncn2", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB2", "goa_clk5_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB2", "goa_clk6_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB3", "tsyncn2_r[7:0]", "tsyncn2 rising position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB2", "tsyncn2_r[13:8]", "tsyncn2 rising position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB4", "goa_clk7_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB4", "goa_clk8_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB5", "tsyncn2_f[7:0]", "tsyncn2 falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB4", "tsyncn2_f[13:8]", "tsyncn2 falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB6", "goa_clk1_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB6", "goa_clk1_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB6", "goa_clk2_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB6", "goa_clk2_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB6", "goa_clk3_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB6", "goa_clk3_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB6", "goa_clk4_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB6", "goa_clk4_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB7", "goa_clk5_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB7", "goa_clk5_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB7", "goa_clk6_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB7", "goa_clk6_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB7", "goa_clk7_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB7", "goa_clk7_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB7", "goa_clk8_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB7", "goa_clk8_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB9", "tsyncn2_LHB_EN_ln[7:0]", "LHB tsyncn rising line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1CB8", "tsyncn2_LHB_EN_ln[12:8]", "LHB tsyncn rising line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CBB", "lh_sw_tc_LHB_ST_ln[7:0]", "Long H : TP_SW_TC rising line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CBA", "lh_sw_tc_LHB_ST_ln[12:8]", "Long H : TP_SW_TC rising line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CBD", "lh_sw_tc_LHB_EN_ln[7:0]", "Long H : TP_SW_TC falling line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CBC", "lh_sw_tc_LHB_EN_ln[12:8]", "Long H : TP_SW_TC falling line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CBF", "lh_sw_tc_LHB_EN_ln_last[7:0]", "Long H : TP_SW_TC falling line (last region)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CBE", "lh_sw_tc_LHB_EN_ln_last[12:8]", "Long H : TP_SW_TC falling line (last region)", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CC1", "lh_sw_tc_r[7:0]", "Long H : TP_SW_TC rising position", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CC0", "lh_sw_tc_r[14:8]", "Long H : TP_SW_TC rising position", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CC3", "lh_sw_tc_f[7:0]", "Long H : TP_SW_TC falling position", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CC2", "lh_sw_tc_f[14:8]", "Long H : TP_SW_TC falling position", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CC5", "lh_sw_sd_LHB_ST_ln[7:0]", "Long H : TP_SW_SD rising line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CC4", "lh_sw_sd_LHB_ST_ln[12:8]", "Long H : TP_SW_SD rising line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CC7", "lh_sw_sd_LHB_EN_ln[7:0]", "Long H : TP_SW_SD falling line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CC6", "lh_sw_sd_LHB_EN_ln[12:8]", "Long H : TP_SW_SD falling line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CC9", "lh_sw_sd_LHB_EN_ln_last[7:0]", "Long H : TP_SW_SD falling line (last region)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CC8", "lh_sw_sd_LHB_EN_ln_last[12:8]", "Long H : TP_SW_SD falling line (last region)", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CCB", "lh_sw_sd_r[7:0]", "Long H : TP_SW_SD rising position", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CCA", "lh_sw_sd_r[14:8]", "Long H : TP_SW_SD rising position", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CCD", "lh_sw_sd_f[7:0]", "Long H : TP_SW_SD falling position", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LongH", "0x1CCC", "lh_sw_sd_f[14:8]", "Long H : TP_SW_SD falling position", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CD0", "goa_clk8_pol", "goa_clk8 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CD0", "en_goa_clk8_2w", "enable goa_clk8 2X width and sh", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CD1", "goa_clk8_sh[7:0]", "goa_clk8 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CD0", "goa_clk8_sh[13:8]", "goa_clk8 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CD2", "goa_clk8_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CD3", "goa_clk8_w[7:0]", "width of goa_clk8", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CD2", "goa_clk8_w[14:8]", "width of goa_clk8", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CD4", "goa_clk8_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CD5", "goa_clk8_ST_ln[7:0]", "goa_clk8 start vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CD4", "goa_clk8_ST_ln[14:8]", "goa_clk8 start vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CD6", "en_goa_clk8_or", "enable goa_clk8 OR and output to goa_clk12", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CD7", "goa_clk8_EN_ln[7:0]", "goa_clk8 end vertical line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CD6", "goa_clk8_EN_ln[14:8]", "goa_clk8 end vertical line", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1CD9", "goa_clk1_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1CD8", "goa_clk1_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1CDA", "goa_clk1_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1CDC", "goa_clk1_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA1", "0x1CDB", "goa_clk1_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1CDE", "goa_clk2_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1CDD", "goa_clk2_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1CDF", "goa_clk2_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1CE1", "goa_clk2_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA2", "0x1CE0", "goa_clk2_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1CE3", "goa_clk3_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1CE2", "goa_clk3_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1CE4", "goa_clk3_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1CE6", "goa_clk3_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA3", "0x1CE5", "goa_clk3_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1CE8", "goa_clk4_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1CE7", "goa_clk4_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1CE9", "goa_clk4_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1CEB", "goa_clk4_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA4", "0x1CEA", "goa_clk4_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1CED", "goa_clk5_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1CEC", "goa_clk5_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1CEE", "goa_clk5_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1CF0", "goa_clk5_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA5", "0x1CEF", "goa_clk5_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1CF2", "goa_clk6_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1CF1", "goa_clk6_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1CF3", "goa_clk6_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1CF5", "goa_clk6_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA6", "0x1CF4", "goa_clk6_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1CF7", "goa_clk7_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1CF6", "goa_clk7_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1CF8", "goa_clk7_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1CFA", "goa_clk7_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA7", "0x1CF9", "goa_clk7_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CFC", "goa_clk8_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CFB", "goa_clk8_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CFD", "goa_clk8_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CFF", "goa_clk8_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOA8", "0x1CFE", "goa_clk8_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP1", "0x1D01", "Table2_gsp1_sh[7:0]", "gsp1 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP1", "0x1D00", "Table2_gsp1_sh[13:8]", "gsp1 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP1", "0x1D03", "Table2_gsp1_f[7:0]", "gsp1 falling position", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP1", "0x1D02", "Table2_gsp1_f[13:8]", "gsp1 falling position", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP1", "0x1D04", "Table2_gsp1_w_twice[3:0]", "width of gsp1 for twice output (line base)", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP1", "0x1D04", "Table2_gsp1_w[3:0]", "width of gsp1 (line base)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D06", "Ls_clk_ST[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D05", "Ls_clk_ST[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D07", "ab_ls_clk_high", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D08", "Ls_clk_EN[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D07", "Ls_clk_EN[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D09", "ab_msk_ls_clk", "", "7-6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP2", "0x1D0A", "Table2_gsp2_sh[7:0]", "gsp2 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP2", "0x1D09", "Table2_gsp2_sh[13:8]", "gsp2 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP2", "0x1D0C", "Table2_gsp2_f[7:0]", "gsp2 falling position", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP2", "0x1D0B", "Table2_gsp2_f[13:8]", "gsp2 falling position", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP2", "0x1D0D", "Table2_gsp2_w_twice[3:0]", "width of gsp2 for twice output (line base)", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP2", "0x1D0D", "Table2_gsp2_w[3:0]", "width of gsp2 (line base)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D0F", "Ls_lead_r[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D0E", "Ls_lead_r[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D11", "Ls_lead_f[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D10", "Ls_lead_f[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D12", "Ls_clk_half_width", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D13", "Ls_ST_value", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D13", "LS_EN_value", "", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D13", "LS_pol", "", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D13", "po_ls_clk_high", "", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D13", "INIT_LS_CLK", "", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D14", "ls_clk_sel_r_osc_trg", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "LS_CLK", "0x1D14", "ls_clk_sel_f_osc_trg", "", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_FS", "0x1D15", "Table2_fs_sh[7:0]", "fs start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_FS", "0x1D14", "Table2_fs_sh[13:8]", "fs start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_FS", "0x1D17", "Table2_fs_f[7:0]", "fs falling position", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_FS", "0x1D16", "Table2_fs_f[13:8]", "fs falling position", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_FS", "0x1D18", "Table2_fs_w_twice[3:0]", "width of fs for twice output (line base)", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_FS", "0x1D18", "Table2_fs_w[3:0]", "width of fs (line base)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP_LED", "0x1D1A", "Table2_gsp_led_sh[7:0]", "gsp_led start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP_LED", "0x1D19", "Table2_gsp_led_sh[13:8]", "gsp_led start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP_LED", "0x1D1B", "Table2_gsp_led_w_twice[3:0]", "width of gsp_led for twice output (line base)", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP_LED", "0x1D1B", "Table2_gsp_led_w[3:0]", "width of gsp_led (line base)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_L", "0x1D1D", "Table2_gckl_sh_even[7:0]", "gckl start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_L", "0x1D1C", "Table2_gckl_sh_even[13:8]", "gckl start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_L", "0x1D1F", "Table2_gckl_w_even[7:0]", "width of gckl", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_L", "0x1D1E", "Table2_gckl_w_even[13:8]", "width of gckl", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1D22", "Table2_goel_fm_msk_high", "goel frame mask high", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1D22", "Table2_goer_fm_msk_high", "goer frame mask high", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_L", "0x1D23", "Table2_goel_fm_msk_patt[7:0]", "goel frame mask use patt cnt\n0 : normal output\n1 : mask high or low", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GOE_R", "0x1D24", "Table2_goer_fm_msk_patt[7:0]", "goer frame mask use patt cnt\n0 : normal output\n1 : mask high or low", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_L", "0x1D26", "Table2_gckl_sh_odd[7:0]", "gckl start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_L", "0x1D25", "Table2_gckl_sh_odd[13:8]", "gckl start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_L", "0x1D28", "Table2_gckl_w_odd[7:0]", "width of gckl", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_L", "0x1D27", "Table2_gckl_w_odd[13:8]", "width of gckl", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_R", "0x1D2A", "Table2_gckr_sh_odd[7:0]", "gckr start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_R", "0x1D29", "Table2_gckr_sh_odd[13:8]", "gckr start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_R", "0x1D2C", "Table2_gckr_w_odd[7:0]", "width of gckr", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_R", "0x1D2B", "Table2_gckr_w_odd[13:8]", "width of gckr", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_L", "0x1D2E", "Table2_goel_sh_odd[7:0]", "goel start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_L", "0x1D2D", "Table2_goel_sh_odd[13:8]", "goel start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_L", "0x1D30", "Table2_goel_w_odd[7:0]", "width of goel", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_L", "0x1D2F", "Table2_goel_w_odd[13:8]", "width of goel", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_L", "0x1D32", "Table2_goel_sh_even[7:0]", "goel start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_L", "0x1D31", "Table2_goel_sh_even[13:8]", "goel start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_L", "0x1D34", "Table2_goel_w_even[7:0]", "width of goel", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_L", "0x1D33", "Table2_goel_w_even[13:8]", "width of goel", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_R", "0x1D36", "Table2_goer_sh_odd[7:0]", "goer start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_R", "0x1D35", "Table2_goer_sh_odd[13:8]", "goer start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_R", "0x1D38", "Table2_goer_w_odd[7:0]", "width of goer", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_R", "0x1D37", "Table2_goer_w_odd[13:8]", "width of goer", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_R", "0x1D3A", "Table2_goer_sh_even[7:0]", "goer start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_R", "0x1D39", "Table2_goer_sh_even[13:8]", "goer start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_R", "0x1D3C", "Table2_goer_w_even[7:0]", "width of goer", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOE_R", "0x1D3B", "Table2_goer_w_even[13:8]", "width of goer", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_L", "0x1D3E", "Table2_lsl_sh_odd[7:0]", "lsl start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_L", "0x1D3D", "Table2_lsl_sh_odd[13:8]", "lsl start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_L", "0x1D40", "Table2_lsl_w_odd[7:0]", "width of lsl", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_L", "0x1D3F", "Table2_lsl_w_odd[13:8]", "width of lsl", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_R", "0x1D42", "Table2_lsr_sh_odd[7:0]", "lsr start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_R", "0x1D41", "Table2_lsr_sh_odd[13:8]", "lsr start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_R", "0x1D44", "Table2_lsr_w_odd[7:0]", "width of lsr", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_R", "0x1D43", "Table2_lsr_w_odd[13:8]", "width of lsr", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP3", "0x1D46", "Table2_gsp3_sh[7:0]", "gsp3 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP3", "0x1D45", "Table2_gsp3_sh[13:8]", "gsp3 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP3", "0x1D48", "Table2_gsp3_f[7:0]", "gsp3 falling position", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP3", "0x1D47", "Table2_gsp3_f[13:8]", "gsp3 falling position", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP3", "0x1D49", "Table2_gsp3_w[3:0]", "width of gsp3 (line base)", "7-4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GSP3", "0x1D49", "Table2_gsp3_w_twice[3:0]", "width of gsp3 for twice output (line base)", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_R", "0x1D4B", "Table2_gckr_sh_even[7:0]", "gckr start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_R", "0x1D4A", "Table2_gckr_sh_even[13:8]", "gckr start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_R", "0x1D4D", "Table2_gckr_w_even[7:0]", "width of gckr", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GCK_R", "0x1D4C", "Table2_gckr_w_even[13:8]", "width of gckr", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_DISCH", "0x1D50", "Table2_disch_r[7:0]", "disch start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_DISCH", "0x1D4F", "Table2_disch_r[13:8]", "disch start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_DISCH", "0x1D52", "Table2_disch_f[7:0]", "disch falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_DISCH", "0x1D51", "Table2_disch_f[13:8]", "disch falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_DISCH2", "0x1D54", "Table2_disch2_r[7:0]", "disch2 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_DISCH2", "0x1D53", "Table2_disch2_r[13:8]", "disch2 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_DISCH2", "0x1D56", "Table2_disch2_f[7:0]", "disch2 falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_DISCH2", "0x1D55", "Table2_disch2_f[13:8]", "disch2 falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_L", "0x1D58", "Table2_lsl_sh_even[7:0]", "lsl start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_L", "0x1D57", "Table2_lsl_sh_even[13:8]", "lsl start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_L", "0x1D5A", "Table2_lsl_w_even[7:0]", "width of lsl", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_L", "0x1D59", "Table2_lsl_w_even[13:8]", "width of lsl", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_R", "0x1D5C", "Table2_lsr_sh_even[7:0]", "lsr start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_R", "0x1D5B", "Table2_lsr_sh_even[13:8]", "lsr start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_R", "0x1D5E", "Table2_lsr_w_even[7:0]", "width of lsr", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_LS_R", "0x1D5D", "Table2_lsr_w_even[13:8]", "width of lsr", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA1", "0x1D60", "Table2_goa_clk1_sh[7:0]", "goa_clk1 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA1", "0x1D5F", "Table2_goa_clk1_sh[13:8]", "goa_clk1 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA1", "0x1D62", "Table2_goa_clk1_w[7:0]", "width of goa_clk1", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA1", "0x1D61", "Table2_goa_clk1_w[14:8]", "width of goa_clk1", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA2", "0x1D64", "Table2_goa_clk2_sh[7:0]", "goa_clk2 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA2", "0x1D63", "Table2_goa_clk2_sh[13:8]", "goa_clk2 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA2", "0x1D66", "Table2_goa_clk2_w[7:0]", "width of goa_clk2", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA2", "0x1D65", "Table2_goa_clk2_w[14:8]", "width of goa_clk2", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA3", "0x1D68", "Table2_goa_clk3_sh[7:0]", "goa_clk3 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA3", "0x1D67", "Table2_goa_clk3_sh[13:8]", "goa_clk3 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA3", "0x1D6A", "Table2_goa_clk3_w[7:0]", "width of goa_clk3", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA3", "0x1D69", "Table2_goa_clk3_w[14:8]", "width of goa_clk3", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA4", "0x1D6C", "Table2_goa_clk4_sh[7:0]", "goa_clk4 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA4", "0x1D6B", "Table2_goa_clk4_sh[13:8]", "goa_clk4 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA4", "0x1D6E", "Table2_goa_clk4_w[7:0]", "width of goa_clk4", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA4", "0x1D6D", "Table2_goa_clk4_w[14:8]", "width of goa_clk4", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA5", "0x1D70", "Table2_goa_clk5_sh[7:0]", "goa_clk5 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA5", "0x1D6F", "Table2_goa_clk5_sh[13:8]", "goa_clk5 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA5", "0x1D72", "Table2_goa_clk5_w[7:0]", "width of goa_clk5", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA5", "0x1D71", "Table2_goa_clk5_w[14:8]", "width of goa_clk5", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA6", "0x1D74", "Table2_goa_clk6_sh[7:0]", "goa_clk6 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA6", "0x1D73", "Table2_goa_clk6_sh[13:8]", "goa_clk6 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA6", "0x1D76", "Table2_goa_clk6_w[7:0]", "width of goa_clk6", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA6", "0x1D75", "Table2_goa_clk6_w[14:8]", "width of goa_clk6", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA7", "0x1D78", "Table2_goa_clk7_sh[7:0]", "goa_clk7 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA7", "0x1D77", "Table2_goa_clk7_sh[13:8]", "goa_clk7 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA7", "0x1D7A", "Table2_goa_clk7_w[7:0]", "width of goa_clk7", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA7", "0x1D79", "Table2_goa_clk7_w[14:8]", "width of goa_clk7", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA8", "0x1D7C", "Table2_goa_clk8_sh[7:0]", "goa_clk8 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA8", "0x1D7B", "Table2_goa_clk8_sh[13:8]", "goa_clk8 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA8", "0x1D7E", "Table2_goa_clk8_w[7:0]", "width of goa_clk8", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "Table2_GOA8", "0x1D7D", "Table2_goa_clk8_w[14:8]", "width of goa_clk8", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1D80", "goa_clk11_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1D7F", "goa_clk11_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1D82", "goa_clk11_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1D81", "goa_clk11_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1D83", "adjust_fm[7:0]", "Adjust GSP at each N frames. \nusefule when en_adjust_gsp = 1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1D84", "rst_adj_fm[7:0]", "After M frames, reset gsp_ST_ln to initial value\nusefule when en_adjust_gsp = 1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1D86", "gsp1_f[7:0]", "gsp1 falling position", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1D85", "gsp1_f[13:8]", "gsp1 falling position", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1D88", "gsp2_f[7:0]", "gsp2 falling position", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP2", "0x1D87", "gsp2_f[13:8]", "gsp2 falling position", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "FS", "0x1D8A", "fs_f[7:0]", "fs falling position", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "FS", "0x1D89", "fs_f[13:8]", "fs falling position", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1D8B", "adj_gsp_st_ln[3:0]", "adjust gsp_ST_ln", "3-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1D8C", "en_adjust_gsp", "1 : enable adjust gsp_ST_ln", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1D8C", "en_adjust_sh", "enable adjust GCLK/GOE rising position", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1D8C", "en_adjust_w", "enable adjust GCLK/GOE width", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1D8D", "adjust_ln[7:0]", "Adjust GCLK/GOE at each N lines. \nEnable adjust function when adjust_ln[9:0] > 0", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "GSP1", "0x1D8C", "adjust_ln[9:8]", "Adjust GCLK/GOE at each N lines. \nEnable adjust function when adjust_ln[9:0] > 0", "1-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1D91", "goa_clk12_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1D90", "goa_clk12_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1D93", "goa_clk12_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1D92", "goa_clk12_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D94", "osc_clk_div[5:0]", "osc clock div for 3D RL", "5-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D95", "r_inv", "3D R inverse", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D95", "l_inv", "3D L inverse", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D95", "gsp_3d_sel", "select 3D RL reference signal\n0 : GSP1\n1 : GSP2", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D95", "r_mode[1:0]", "3D R mode\n00 : R \n01 : R | L\n10 : R | L with carrier\n11 : bypass (RL_input)", "3-2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D95", "l_mode[1:0]", "3D L mode\n00 : L \n01 : R | L\n10 : R | L with carrier\n11 : bypass (RL_input)", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D97", "R_3D_r[7:0]", "R_3D rising position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D96", "R_3D_r[15:8]", "R_3D rising position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D99", "R_dly_ln[7:0]", "use at RL_input bypass mode\nset delay line number for R output", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D98", "R_dly_ln[14:8]", "use at RL_input bypass mode\nset delay line number for R output", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D9B", "L_dly_ln[7:0]", "use at RL_input bypass mode\nset delay line number for L output", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D9A", "L_dly_ln[14:8]", "use at RL_input bypass mode\nset delay line number for L output", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D9D", "rl_3d_clk_div[7:0]", "3D RL carrier (base on OSC clk)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D9C", "rl_3d_clk_div[11:8]", "3D RL carrier (base on OSC clk)", "3-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D9F", "R_3D_f[7:0]", "R_3D falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1D9E", "R_3D_f[15:8]", "R_3D falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1DA1", "L_3D_r[7:0]", "L_3D rising position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1DA0", "L_3D_r[15:8]", "L_3D rising position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1DA3", "L_3D_f[7:0]", "L_3D falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "3D_RL", "0x1DA2", "L_3D_f[15:8]", "L_3D falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DA5", "gpo_offset_x[7:0]", " offset for zone1(rising position)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DA4", "gpo_offset_x[13:8]", " offset for zone1(rising position)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DA7", "gpo_offset_y[7:0]", " offset for zone2(rising position)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DA6", "gpo_offset_y[13:8]", " offset for zone2(rising position)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DA9", "gpo_offset_z[7:0]", " offset for zone3(rising position)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DA8", "gpo_offset_z[13:8]", " offset for zone3(rising position)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DAB", "gpo_offset_u[7:0]", " offset for zone4(rising position)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DAA", "gpo_offset_u[13:8]", " offset for zone4(rising position)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DAD", "gpo_offset_v[7:0]", " offset for zone5(rising position)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DAC", "gpo_offset_v[13:8]", " offset for zone5(rising position)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DAE", "en_rst_zone2", "enable offset for zone2", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DAE", "en_rst_zone3", "enable offset for zone3", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DAE", "en_rst_zone4", "enable offset for zone4", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DAE", "en_rst_zone5", "enable offset for zone5", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DAF", "en_smart_oe_offset", "enable offset for every block shift", "5", "RW", "0x00", "0x01", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DAF", "gpo_shift_x", "block x shit value (+1 or 0),(-1,0 during minus case)", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DAF", "gpo_shift_y", "block y shit value (+1 or 0),(-1,0 during minus case)", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DAF", "gpo_shift_z", "block z shit value (+1 or 0),(-1,0 during minus case)", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DAF", "gpo_shift_u", "block u shit value (+1 or 0),(-1,0 during minus case)", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DAF", "gpo_shift_v", "block v shit value (+1 or 0),(-1,0 during minus case)", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DB1", "gpo_soe_A[7:0]", "block 2 start position (line base)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DB0", "gpo_soe_A[11:8]", "block 2 start position (line base)", "3-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DB3", "gpo_soe_B[7:0]", "block 3 start position (line base)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DB2", "gpo_soe_B[11:8]", "block 3 start position (line base)", "3-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DB5", "gpo_soe_C[7:0]", "block 4 start position (line base)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DB4", "gpo_soe_C[11:8]", "block 4 start position (line base)", "3-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DB7", "gpo_soe_D[7:0]", "block 5 start position (line base)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DB6", "gpo_soe_D[11:8]", "block 5 start position (line base)", "3-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DB8", "gpo_soe_X[7:0]", "every x line shift once during block1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DB9", "gpo_soe_Y[7:0]", "every y line shift once during block1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBA", "gpo_soe_Z[7:0]", "every z line shift once during block1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBB", "gpo_soe_U[7:0]", "every u line shift once during block1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBC", "gpo_soe_V[7:0]", "every v line shift once during block1", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBD", "en_smart_oe_goel", "enable smart oe function for goel", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBD", "en_smart_oe_goer", "enable smart oe function for goer", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBD", "en_smart_oe_gckl", "enable smart oe function for gckl", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBD", "en_smart_oe_gckr", "enable smart oe function for gckr", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBD", "en_smart_oe_lsl", "enable smart oe function for lsl", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBD", "en_smart_oe", "turn on smart oe function", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBE", "en_smart_oe_goel_minus", "enable smart oe function for goel(minus)", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBE", "en_smart_oe_goer_minus", "enable smart oe function for goer(minus)", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBE", "en_smart_oe_gckl_minus", "enable smart oe function for gckl(minus)", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBE", "en_smart_oe_gckr_minus", "enable smart oe function for gckr(minus)", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBE", "en_smart_oe_lsl_minus", "enable smart oe function for lsl(minus)", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBF", "en_smart_oe_goa1", "enable smart oe function for goa1", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBF", "en_smart_oe_goa2", "enable smart oe function for goa2", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBF", "en_smart_oe_goa3", "enable smart oe function for goa3", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBF", "en_smart_oe_goa4", "enable smart oe function for goa4", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBF", "en_smart_oe_goa5", "enable smart oe function for goa5", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBF", "en_smart_oe_goa6", "enable smart oe function for goa6", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBF", "en_smart_oe_goa7", "enable smart oe function for goa7", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DBF", "en_smart_oe_goa8", "enable smart oe function for goa8", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC0", "en_smart_oe_goa9", "enable smart oe function for goa9", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC0", "en_smart_oe_goa10", "enable smart oe function for goa10", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC0", "en_smart_oe_goa11", "enable smart oe function for goa11", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC0", "en_smart_oe_goa12", "enable smart oe function for goa12", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC0", "en_smart_oe_goa1_minus", "enable smart oe function for goa1(minus)", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC0", "en_smart_oe_goa2_minus", "enable smart oe function for goa2(minus)", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC0", "en_smart_oe_goa3_minus", "enable smart oe function for goa3(minus)", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC0", "en_smart_oe_goa4_minus", "enable smart oe function for goa4(minus)", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC1", "en_smart_oe_goa5_minus", "enable smart oe function for goa5(minus)", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC1", "en_smart_oe_goa6_minus", "enable smart oe function for goa6(minus)", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC1", "en_smart_oe_goa7_minus", "enable smart oe function for goa7(minus)", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC1", "en_smart_oe_goa8_minus", "enable smart oe function for goa8(minus)", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC1", "en_smart_oe_goa9_minus", "enable smart oe function for goa9(minus)", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC1", "en_smart_oe_goa10_minus", "enable smart oe function for goa10(minus)", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC1", "en_smart_oe_goa11_minus", "enable smart oe function for goa11(minus)", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "smartoe", "0x1DC1", "en_smart_oe_goa12_minus", "enable smart oe function for goa12(minus)", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DC3", "goa_clk1_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DC2", "goa_clk1_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DC5", "goa_clk1_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DC4", "goa_clk1_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DC7", "goa_clk2_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DC6", "goa_clk2_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DC9", "goa_clk2_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DC8", "goa_clk2_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DCB", "goa_clk3_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DCA", "goa_clk3_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DCD", "goa_clk3_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DCC", "goa_clk3_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DCF", "goa_clk4_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DCE", "goa_clk4_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DD1", "goa_clk4_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DD0", "goa_clk4_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DD3", "goa_clk5_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DD2", "goa_clk5_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DD5", "goa_clk5_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DD4", "goa_clk5_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DD7", "goa_clk6_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DD6", "goa_clk6_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DD9", "goa_clk6_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DD8", "goa_clk6_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DDB", "goa_clk7_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DDA", "goa_clk7_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DDD", "goa_clk7_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DDC", "goa_clk7_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DDF", "goa_clk8_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DDE", "goa_clk8_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DE1", "goa_clk8_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DE0", "goa_clk8_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DE3", "goa_clk9_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DE2", "goa_clk9_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DE5", "goa_clk9_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DE4", "goa_clk9_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DE7", "goa_clk10_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DE6", "goa_clk10_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DE9", "goa_clk10_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DE8", "goa_clk10_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DEB", "goa_clk11_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DEA", "goa_clk11_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DED", "goa_clk11_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DEC", "goa_clk11_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DEF", "goa_clk12_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DEE", "goa_clk12_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DF1", "goa_clk12_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DF0", "goa_clk12_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DF3", "goa_clk1_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DF2", "goa_clk1_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DF5", "goa_clk1_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DF4", "goa_clk1_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DF7", "goa_clk2_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DF6", "goa_clk2_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DF9", "goa_clk2_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DF8", "goa_clk2_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DFB", "goa_clk3_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DFA", "goa_clk3_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DFD", "goa_clk3_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DFC", "goa_clk3_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DFF", "goa_clk4_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1DFE", "goa_clk4_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E01", "goa_clk4_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E00", "goa_clk4_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E03", "goa_clk5_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E02", "goa_clk5_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E05", "goa_clk5_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E04", "goa_clk5_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E07", "goa_clk6_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E06", "goa_clk6_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E09", "goa_clk6_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E08", "goa_clk6_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E0B", "goa_clk7_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E0A", "goa_clk7_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E0D", "goa_clk7_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E0C", "goa_clk7_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E0F", "goa_clk8_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E0E", "goa_clk8_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E11", "goa_clk8_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E10", "goa_clk8_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E13", "goa_clk9_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E12", "goa_clk9_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E15", "goa_clk9_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E14", "goa_clk9_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E17", "goa_clk10_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E16", "goa_clk10_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E19", "goa_clk10_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E18", "goa_clk10_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E1B", "goa_clk11_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E1A", "goa_clk11_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E1D", "goa_clk11_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E1C", "goa_clk11_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E1F", "goa_clk12_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E1E", "goa_clk12_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E21", "goa_clk12_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E20", "goa_clk12_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E23", "goa_clk1_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E22", "goa_clk1_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E25", "goa_clk2_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E24", "goa_clk2_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E27", "goa_clk3_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E26", "goa_clk3_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E29", "goa_clk4_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E28", "goa_clk4_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E2B", "goa_clk5_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E2A", "goa_clk5_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E2D", "goa_clk6_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E2C", "goa_clk6_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E2F", "goa_clk7_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E2E", "goa_clk7_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E31", "goa_clk8_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E30", "goa_clk8_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E33", "goa_clk9_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E32", "goa_clk9_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E35", "goa_clk10_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E34", "goa_clk10_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E37", "goa_clk11_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E36", "goa_clk11_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E39", "goa_clk12_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E38", "goa_clk12_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E3B", "goa_clk1_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E3A", "goa_clk1_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E3D", "goa_clk2_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E3C", "goa_clk2_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E3F", "goa_clk3_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E3E", "goa_clk3_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E41", "goa_clk4_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E40", "goa_clk4_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E43", "goa_clk5_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E42", "goa_clk5_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E45", "goa_clk6_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E44", "goa_clk6_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E47", "goa_clk7_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E46", "goa_clk7_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E49", "goa_clk8_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E48", "goa_clk8_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E4B", "goa_clk9_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E4A", "goa_clk9_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E4D", "goa_clk10_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E4C", "goa_clk10_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E4F", "goa_clk11_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E4E", "goa_clk11_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E51", "goa_clk12_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E50", "goa_clk12_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E53", "gch_r[7:0]", "gch rising position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E52", "gch_r[13:8]", "gch rising position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E55", "gch_f[7:0]", "gch falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E54", "gch_f[13:8]", "gch falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E57", "gch_LHB_ST_ln[7:0]", "LHB gch falling line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E56", "gch_LHB_ST_ln[12:8]", "LHB gch falling line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E59", "gch_LHB_EN_ln[7:0]", "LHB gch rising line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E58", "gch_LHB_EN_ln[12:8]", "LHB gch rising line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E5B", "gch_VBK_ln[7:0]", "gch v-blanking line (output low)", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E5A", "gch_VBK_ln[14:8]", "gch v-blanking line (output low)", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E5D", "goa_clk1_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E5C", "goa_clk1_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E5F", "goa_clk1_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E5E", "goa_clk1_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E61", "goa_clk2_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E60", "goa_clk2_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E63", "goa_clk2_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E62", "goa_clk2_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E65", "goa_clk3_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E64", "goa_clk3_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E67", "goa_clk3_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E66", "goa_clk3_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E69", "goa_clk4_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E68", "goa_clk4_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E6B", "goa_clk4_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E6A", "goa_clk4_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E6D", "goa_clk5_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E6C", "goa_clk5_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E6F", "goa_clk5_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E6E", "goa_clk5_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E71", "goa_clk6_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E70", "goa_clk6_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E73", "goa_clk6_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E72", "goa_clk6_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E75", "goa_clk7_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E74", "goa_clk7_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E77", "goa_clk7_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E76", "goa_clk7_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E79", "goa_clk8_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E78", "goa_clk8_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E7B", "goa_clk8_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E7A", "goa_clk8_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E7D", "goa_clk9_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E7C", "goa_clk9_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E7F", "goa_clk9_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E7E", "goa_clk9_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E81", "goa_clk10_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E80", "goa_clk10_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E83", "goa_clk10_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E82", "goa_clk10_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E85", "goa_clk11_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E84", "goa_clk11_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E87", "goa_clk11_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E86", "goa_clk11_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E89", "goa_clk12_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E88", "goa_clk12_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E8B", "goa_clk12_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E8A", "goa_clk12_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E8D", "goa_clk1_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E8C", "goa_clk1_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E8F", "goa_clk1_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E8E", "goa_clk1_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E91", "goa_clk2_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E90", "goa_clk2_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E93", "goa_clk2_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E92", "goa_clk2_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E95", "goa_clk3_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E94", "goa_clk3_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E97", "goa_clk3_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E96", "goa_clk3_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E99", "goa_clk4_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E98", "goa_clk4_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E9B", "goa_clk4_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E9A", "goa_clk4_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E9D", "goa_clk5_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E9C", "goa_clk5_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E9F", "goa_clk5_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1E9E", "goa_clk5_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EA1", "goa_clk6_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EA0", "goa_clk6_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EA3", "goa_clk6_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EA2", "goa_clk6_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EA5", "goa_clk7_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EA4", "goa_clk7_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EA7", "goa_clk7_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EA6", "goa_clk7_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EA9", "goa_clk8_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EA8", "goa_clk8_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EAB", "goa_clk8_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EAA", "goa_clk8_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EAD", "goa_clk9_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EAC", "goa_clk9_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EAF", "goa_clk9_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EAE", "goa_clk9_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EB1", "goa_clk10_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EB0", "goa_clk10_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EB3", "goa_clk10_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EB2", "goa_clk10_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EB5", "goa_clk11_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EB4", "goa_clk11_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EB7", "goa_clk11_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EB6", "goa_clk11_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EB9", "goa_clk12_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EB8", "goa_clk12_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EBB", "goa_clk12_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EBA", "goa_clk12_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EBD", "goa_clk1_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EBC", "goa_clk1_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EBF", "goa_clk1_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EBE", "goa_clk1_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EC1", "goa_clk2_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EC0", "goa_clk2_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EC3", "goa_clk2_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EC2", "goa_clk2_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EC5", "goa_clk3_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EC4", "goa_clk3_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EC7", "goa_clk3_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EC6", "goa_clk3_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EC9", "goa_clk4_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EC8", "goa_clk4_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ECB", "goa_clk4_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ECA", "goa_clk4_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ECD", "goa_clk5_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ECC", "goa_clk5_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ECF", "goa_clk5_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ECE", "goa_clk5_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ED1", "goa_clk6_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ED0", "goa_clk6_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ED3", "goa_clk6_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ED2", "goa_clk6_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ED5", "goa_clk7_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ED4", "goa_clk7_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ED7", "goa_clk7_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ED6", "goa_clk7_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ED9", "goa_clk8_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1ED8", "goa_clk8_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EDB", "goa_clk8_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EDA", "goa_clk8_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EDD", "goa_clk9_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EDC", "goa_clk9_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EDF", "goa_clk9_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EDE", "goa_clk9_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EE1", "goa_clk10_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EE0", "goa_clk10_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EE3", "goa_clk10_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EE2", "goa_clk10_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EE5", "goa_clk11_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EE4", "goa_clk11_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EE7", "goa_clk11_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EE6", "goa_clk11_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EE9", "goa_clk12_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EE8", "goa_clk12_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EEB", "goa_clk12_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EEA", "goa_clk12_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EED", "goa_clk1_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EEC", "goa_clk1_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EEF", "goa_clk1_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EEE", "goa_clk1_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EF1", "goa_clk2_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EF0", "goa_clk2_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EF3", "goa_clk2_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EF2", "goa_clk2_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EF5", "goa_clk3_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EF4", "goa_clk3_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EF7", "goa_clk3_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EF6", "goa_clk3_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EF9", "goa_clk4_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EF8", "goa_clk4_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EFB", "goa_clk4_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EFA", "goa_clk4_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EFD", "goa_clk5_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EFC", "goa_clk5_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EFF", "goa_clk5_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("CTG(0x1B,0x1E)", "AIT", "0x1EFE", "goa_clk5_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B00", "goa_clk13_en_LHB_mask", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B00", "goa_clk13_en_LHB_output", "", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B00", "goa_clk13_pol", "", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B00", "en_goa_clk13_2w", "", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B00", "goa_clk13_sel_r_osc_trg", "", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B00", "goa_clk13_sel_f_osc_trg", "", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B00", "po_goa13_high", "", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B00", "ab_goa13_high", "", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B01", "goa_clk13_type", "", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B03", "goa_clk13_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B02", "goa_clk13_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B05", "goa_clk13_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B04", "goa_clk13_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B07", "goa_clk13_ST_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B06", "goa_clk13_ST_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B09", "goa_clk13_EN_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B08", "goa_clk13_EN_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B0B", "goa_clk13_msk_h[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B0A", "goa_clk13_msk_h[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B0E", "goa_clk13_patt[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B0D", "goa_clk13_patt[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA13", "0x4B0C", "goa_clk13_patt[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B10", "goa_clk14_en_LHB_mask", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B10", "goa_clk14_en_LHB_output", "", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B10", "goa_clk14_pol", "", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B10", "en_goa_clk14_2w", "", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B10", "goa_clk14_sel_r_osc_trg", "", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B10", "goa_clk14_sel_f_osc_trg", "", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B10", "po_goa14_high", "", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B10", "ab_goa14_high", "", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B11", "goa_clk14_type", "", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B13", "goa_clk14_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B12", "goa_clk14_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B15", "goa_clk14_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B14", "goa_clk14_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B17", "goa_clk14_ST_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B16", "goa_clk14_ST_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B19", "goa_clk14_EN_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B18", "goa_clk14_EN_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B1B", "goa_clk14_msk_h[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B1A", "goa_clk14_msk_h[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B1E", "goa_clk14_patt[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B1D", "goa_clk14_patt[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA14", "0x4B1C", "goa_clk14_patt[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B20", "goa_clk15_en_LHB_mask", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B20", "goa_clk15_en_LHB_output", "", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B20", "goa_clk15_pol", "", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B20", "en_goa_clk15_2w", "", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B20", "goa_clk15_sel_r_osc_trg", "", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B20", "goa_clk15_sel_f_osc_trg", "", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B20", "po_goa15_high", "", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B20", "ab_goa15_high", "", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B21", "goa_clk15_type", "", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B23", "goa_clk15_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B22", "goa_clk15_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B25", "goa_clk15_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B24", "goa_clk15_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B27", "goa_clk15_ST_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B26", "goa_clk15_ST_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B29", "goa_clk15_EN_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B28", "goa_clk15_EN_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B2B", "goa_clk15_msk_h[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B2A", "goa_clk15_msk_h[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B2E", "goa_clk15_patt[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B2D", "goa_clk15_patt[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA15", "0x4B2C", "goa_clk15_patt[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B30", "goa_clk16_en_LHB_mask", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B30", "goa_clk16_en_LHB_output", "", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B30", "goa_clk16_pol", "", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B30", "en_goa_clk16_2w", "", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B30", "goa_clk16_sel_r_osc_trg", "", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B30", "goa_clk16_sel_f_osc_trg", "", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B30", "po_goa16_high", "", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B30", "ab_goa16_high", "", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B31", "goa_clk16_type", "", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B33", "goa_clk16_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B32", "goa_clk16_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B35", "goa_clk16_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B34", "goa_clk16_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B37", "goa_clk16_ST_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B36", "goa_clk16_ST_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B39", "goa_clk16_EN_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B38", "goa_clk16_EN_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B3B", "goa_clk16_msk_h[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B3A", "goa_clk16_msk_h[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B3E", "goa_clk16_patt[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B3D", "goa_clk16_patt[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA16", "0x4B3C", "goa_clk16_patt[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B40", "goa_clk17_en_LHB_mask", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B40", "goa_clk17_en_LHB_output", "", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B40", "goa_clk17_pol", "", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B40", "en_goa_clk17_2w", "", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B40", "goa_clk17_sel_r_osc_trg", "", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B40", "goa_clk17_sel_f_osc_trg", "", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B40", "po_goa17_high", "", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B40", "ab_goa17_high", "", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B41", "goa_clk17_type", "", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B43", "goa_clk17_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B42", "goa_clk17_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B45", "goa_clk17_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B44", "goa_clk17_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B47", "goa_clk17_ST_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B46", "goa_clk17_ST_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B49", "goa_clk17_EN_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B48", "goa_clk17_EN_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B4B", "goa_clk17_msk_h[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B4A", "goa_clk17_msk_h[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B4E", "goa_clk17_patt[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B4D", "goa_clk17_patt[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA17", "0x4B4C", "goa_clk17_patt[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B50", "goa_clk18_en_LHB_mask", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B50", "goa_clk18_en_LHB_output", "", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B50", "goa_clk18_pol", "", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B50", "en_goa_clk18_2w", "", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B50", "goa_clk18_sel_r_osc_trg", "", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B50", "goa_clk18_sel_f_osc_trg", "", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B50", "po_goa18_high", "", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B50", "ab_goa18_high", "", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B51", "goa_clk18_type", "", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B53", "goa_clk18_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B52", "goa_clk18_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B55", "goa_clk18_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B54", "goa_clk18_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B57", "goa_clk18_ST_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B56", "goa_clk18_ST_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B59", "goa_clk18_EN_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B58", "goa_clk18_EN_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B5B", "goa_clk18_msk_h[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B5A", "goa_clk18_msk_h[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B5E", "goa_clk18_patt[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B5D", "goa_clk18_patt[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA18", "0x4B5C", "goa_clk18_patt[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B60", "goa_clk19_en_LHB_mask", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B60", "goa_clk19_en_LHB_output", "", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B60", "goa_clk19_pol", "", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B60", "en_goa_clk19_2w", "", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B60", "goa_clk19_sel_r_osc_trg", "", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B60", "goa_clk19_sel_f_osc_trg", "", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B60", "po_goa19_high", "", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B60", "ab_goa19_high", "", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B61", "goa_clk19_type", "", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B63", "goa_clk19_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B62", "goa_clk19_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B65", "goa_clk19_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B64", "goa_clk19_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B67", "goa_clk19_ST_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B66", "goa_clk19_ST_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B69", "goa_clk19_EN_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B68", "goa_clk19_EN_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B6B", "goa_clk19_msk_h[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B6A", "goa_clk19_msk_h[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B6E", "goa_clk19_patt[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B6D", "goa_clk19_patt[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA19", "0x4B6C", "goa_clk19_patt[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B70", "goa_clk20_en_LHB_mask", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B70", "goa_clk20_en_LHB_output", "", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B70", "goa_clk20_pol", "", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B70", "en_goa_clk20_2w", "", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B70", "goa_clk20_sel_r_osc_trg", "", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B70", "goa_clk20_sel_f_osc_trg", "", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B70", "po_goa20_high", "", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B70", "ab_goa20_high", "", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B71", "goa_clk20_type", "", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B73", "goa_clk20_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B72", "goa_clk20_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B75", "goa_clk20_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B74", "goa_clk20_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B77", "goa_clk20_ST_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B76", "goa_clk20_ST_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B79", "goa_clk20_EN_ln[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B78", "goa_clk20_EN_ln[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B7B", "goa_clk20_msk_h[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B7A", "goa_clk20_msk_h[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B7E", "goa_clk20_patt[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B7D", "goa_clk20_patt[15:8]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "GOA20", "0x4B7C", "goa_clk20_patt[23:16]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B81", "goa_clk13_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B80", "goa_clk13_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B83", "goa_clk14_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B82", "goa_clk14_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B85", "goa_clk15_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B84", "goa_clk15_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B87", "goa_clk16_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B86", "goa_clk16_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B89", "goa_clk17_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B88", "goa_clk17_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B8B", "goa_clk18_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B8A", "goa_clk18_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B8D", "goa_clk19_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B8C", "goa_clk19_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B8F", "goa_clk20_LHB_first_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B8E", "goa_clk20_LHB_first_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B91", "goa_clk13_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B90", "goa_clk13_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B93", "goa_clk14_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B92", "goa_clk14_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B95", "goa_clk15_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B94", "goa_clk15_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B97", "goa_clk16_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B96", "goa_clk16_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B99", "goa_clk17_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B98", "goa_clk17_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B9B", "goa_clk18_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B9A", "goa_clk18_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B9D", "goa_clk19_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B9C", "goa_clk19_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B9F", "goa_clk20_LHB_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4B9E", "goa_clk20_LHB_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BA1", "goa_clk13_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BA0", "goa_clk13_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BA3", "goa_clk14_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BA2", "goa_clk14_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BA5", "goa_clk15_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BA4", "goa_clk15_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BA7", "goa_clk16_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BA6", "goa_clk16_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BA9", "goa_clk17_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BA8", "goa_clk17_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BAB", "goa_clk18_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BAA", "goa_clk18_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BAD", "goa_clk19_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BAC", "goa_clk19_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BAF", "goa_clk20_LHB_last_ST_ln[7:0]", "LHB touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BAE", "goa_clk20_LHB_last_ST_ln[12:8]", "LHB touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BB1", "goa_clk13_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BB0", "goa_clk13_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BB3", "goa_clk14_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BB2", "goa_clk14_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BB5", "goa_clk15_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BB4", "goa_clk15_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BB7", "goa_clk16_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BB6", "goa_clk16_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BB9", "goa_clk17_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BB8", "goa_clk17_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BBB", "goa_clk18_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BBA", "goa_clk18_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BBD", "goa_clk19_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BBC", "goa_clk19_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BBF", "goa_clk20_LHB_first_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BBE", "goa_clk20_LHB_first_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BC1", "goa_clk13_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BC0", "goa_clk13_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BC3", "goa_clk14_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BC2", "goa_clk14_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BC5", "goa_clk15_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BC4", "goa_clk15_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BC7", "goa_clk16_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BC6", "goa_clk16_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BC9", "goa_clk17_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BC8", "goa_clk17_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BCB", "goa_clk18_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BCA", "goa_clk18_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BCD", "goa_clk19_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BCC", "goa_clk19_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BCF", "goa_clk20_LHB_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BCE", "goa_clk20_LHB_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BD1", "goa_clk13_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BD0", "goa_clk13_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BD3", "goa_clk14_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BD2", "goa_clk14_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BD5", "goa_clk15_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BD4", "goa_clk15_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BD7", "goa_clk16_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BD6", "goa_clk16_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BD9", "goa_clk17_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BD8", "goa_clk17_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BDB", "goa_clk18_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BDA", "goa_clk18_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BDD", "goa_clk19_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BDC", "goa_clk19_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BDF", "goa_clk20_LHB_last_EN_ln[7:0]", "LHB touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x4BDE", "goa_clk20_LHB_last_EN_ln[12:8]", "LHB touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BE1", "Talbe2_goa_clk13_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BE0", "Talbe2_goa_clk13_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BE3", "Talbe2_goa_clk13_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BE2", "Talbe2_goa_clk13_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BE5", "Talbe2_goa_clk14_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BE4", "Talbe2_goa_clk14_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BE7", "Talbe2_goa_clk14_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BE6", "Talbe2_goa_clk14_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BE9", "Talbe2_goa_clk15_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BE8", "Talbe2_goa_clk15_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BEB", "Talbe2_goa_clk15_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BEA", "Talbe2_goa_clk15_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BED", "Talbe2_goa_clk16_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BEC", "Talbe2_goa_clk16_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BEF", "Talbe2_goa_clk16_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BEE", "Talbe2_goa_clk16_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BF1", "Talbe2_goa_clk17_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BF0", "Talbe2_goa_clk17_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BF3", "Talbe2_goa_clk17_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BF2", "Talbe2_goa_clk17_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BF5", "Talbe2_goa_clk18_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BF4", "Talbe2_goa_clk18_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BF7", "Talbe2_goa_clk18_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BF6", "Talbe2_goa_clk18_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BF9", "Talbe2_goa_clk19_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BF8", "Talbe2_goa_clk19_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BFB", "Talbe2_goa_clk19_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BFA", "Talbe2_goa_clk19_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BFD", "Talbe2_goa_clk20_sh[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BFC", "Talbe2_goa_clk20_sh[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BFF", "Talbe2_goa_clk20_w[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Table2 GOA13~20", "0x4BFE", "Talbe2_goa_clk20_w[14:8]", "", "6-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5101", "goa_clk13_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5100", "goa_clk13_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5103", "goa_clk14_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5102", "goa_clk14_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5105", "goa_clk15_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5104", "goa_clk15_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5107", "goa_clk16_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5106", "goa_clk16_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5109", "goa_clk17_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5108", "goa_clk17_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x510B", "goa_clk18_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x510A", "goa_clk18_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x510D", "goa_clk19_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x510C", "goa_clk19_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x510F", "goa_clk20_DISP_first_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x510E", "goa_clk20_DISP_first_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5111", "goa_clk13_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5110", "goa_clk13_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5113", "goa_clk14_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5112", "goa_clk14_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5115", "goa_clk15_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5114", "goa_clk15_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5117", "goa_clk16_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5116", "goa_clk16_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5119", "goa_clk17_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5118", "goa_clk17_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x511B", "goa_clk18_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x511A", "goa_clk18_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x511D", "goa_clk19_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x511C", "goa_clk19_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x511F", "goa_clk20_DISP_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x511E", "goa_clk20_DISP_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5121", "goa_clk13_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5120", "goa_clk13_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5123", "goa_clk14_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5122", "goa_clk14_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5125", "goa_clk15_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5124", "goa_clk15_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5127", "goa_clk16_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5126", "goa_clk16_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5129", "goa_clk17_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5128", "goa_clk17_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x512B", "goa_clk18_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x512A", "goa_clk18_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x512D", "goa_clk19_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x512C", "goa_clk19_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x512F", "goa_clk20_DISP_last_ST_ln[7:0]", "DISP touch region mask start line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x512E", "goa_clk20_DISP_last_ST_ln[12:8]", "DISP touch region mask start line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5131", "goa_clk13_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5130", "goa_clk13_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5133", "goa_clk14_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5132", "goa_clk14_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5135", "goa_clk15_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5134", "goa_clk15_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5137", "goa_clk16_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5136", "goa_clk16_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5139", "goa_clk17_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5138", "goa_clk17_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x513B", "goa_clk18_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x513A", "goa_clk18_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x513D", "goa_clk19_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x513C", "goa_clk19_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x513F", "goa_clk20_DISP_first_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x513E", "goa_clk20_DISP_first_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5141", "goa_clk13_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5140", "goa_clk13_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5143", "goa_clk14_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5142", "goa_clk14_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5145", "goa_clk15_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5144", "goa_clk15_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5147", "goa_clk16_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5146", "goa_clk16_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5149", "goa_clk17_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5148", "goa_clk17_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x514B", "goa_clk18_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x514A", "goa_clk18_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x514D", "goa_clk19_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x514C", "goa_clk19_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x514F", "goa_clk20_DISP_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x514E", "goa_clk20_DISP_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5151", "goa_clk13_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5150", "goa_clk13_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5153", "goa_clk14_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5152", "goa_clk14_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5155", "goa_clk15_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5154", "goa_clk15_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5157", "goa_clk16_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5156", "goa_clk16_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5159", "goa_clk17_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5158", "goa_clk17_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x515B", "goa_clk18_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x515A", "goa_clk18_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x515D", "goa_clk19_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x515C", "goa_clk19_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x515F", "goa_clk20_DISP_last_EN_ln[7:0]", "DISP touch region mask end line", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x515E", "goa_clk20_DISP_last_EN_ln[12:8]", "DISP touch region mask end line", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5161", "goa_clk13_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5160", "goa_clk13_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5163", "goa_clk14_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5162", "goa_clk14_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5165", "goa_clk15_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5164", "goa_clk15_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5167", "goa_clk16_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5166", "goa_clk16_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5169", "goa_clk17_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5168", "goa_clk17_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x516B", "goa_clk18_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x516A", "goa_clk18_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x516D", "goa_clk19_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x516C", "goa_clk19_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x516F", "goa_clk20_DISP_SW_ln[7:0]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x516E", "goa_clk20_DISP_SW_ln[12:8]", "DISP touch region switch setting line, switch from clk_sh to clk_sh_disp", "4-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5171", "goa_clk13_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5170", "goa_clk13_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5173", "goa_clk14_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5172", "goa_clk14_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5175", "goa_clk15_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5174", "goa_clk15_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5177", "goa_clk16_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5176", "goa_clk16_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5179", "goa_clk17_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x5178", "goa_clk17_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x517B", "goa_clk18_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x517A", "goa_clk18_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x517D", "goa_clk19_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x517C", "goa_clk19_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x517F", "goa_clk20_sh_disp[7:0]", "", "7-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT GOA13~20", "0x517E", "goa_clk20_sh_disp[13:8]", "", "5-0", "RW", "0x00", "0x0", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5180", "en_smart_oe_goa_clk13", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5180", "en_smart_oe_goa_clk14", "", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5180", "en_smart_oe_goa_clk15", "", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5180", "en_smart_oe_goa_clk16", "", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5180", "en_smart_oe_goa_clk17", "", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5180", "en_smart_oe_goa_clk18", "", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5180", "en_smart_oe_goa_clk19", "", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5180", "en_smart_oe_goa_clk20", "", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5181", "minus_en_smart_oe_goa13", "", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5181", "minus_en_smart_oe_goa14", "", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5181", "minus_en_smart_oe_goa15", "", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5181", "minus_en_smart_oe_goa16", "", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5181", "minus_en_smart_oe_goa17", "", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5181", "minus_en_smart_oe_goa18", "", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5181", "minus_en_smart_oe_goa19", "", "1", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "Smartoe GOA13~20", "0x5181", "minus_en_smart_oe_goa20", "", "0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT+TCON_IF", "0x5182", "tconif_mode", "0: mode1, 1: mode2", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT+TCON_IF", "0x5182", "tsyncn_msk", "tsyncn1 mask function when static display\n2'b10, 2b'11 : normal display\n2'b00 : mask high\n2'b01: mask low", "3-2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT+TCON_IF", "0x5182", "tvsyncn_msk", "fs mask function when static display\n2'b10, 2b'11 : normal display\n2'b00 : mask high\n2'b01: mask low", "1-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT+TCON_IF", "0x5183", "tconif_first_ST_ait[12:8]", "tcon_if falling line in first region when ait_en = 1\n(display counter)", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT+TCON_IF", "0x5184", "tconif_first_ST_ait[7:0]", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT+TCON_IF", "0x5185", "tconif_ST_ait[12:8]", "tcon_if falling line in middle region when ait_en = 1\n(display counter)", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT+TCON_IF", "0x5186", "tconif_ST_ait[7:0]", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT+TCON_IF", "0x5187", "tconif_last_ST_ait[12:8]", "tcon_if falling line in last region when ait_en = 1\n(display counter)", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT+TCON_IF", "0x5188", "tconif_last_ST_ait[7:0]", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT+TCON_IF", "0x5189", "tconif_EN_ait[12:8]", "tcon_if rising line when ait_en = 1\n(ait counter)", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT+TCON_IF", "0x518A", "tconif_EN_ait[7:0]", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT+TCON_IF", "0x518B", "tconif_last_EN_ait[12:8]", "tcon_if rising line in last region when ait_en = 1\n(ait counter)", "4-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "AIT+TCON_IF", "0x518C", "tconif_last_EN_ait[7:0]", "", "7-0", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "SDRV", "0x518D", "gck_sdrv_mask_en", "when static frame, goe / gck / ls 1: mask 0: normal output", "7", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "SDRV", "0x518D", "gck_sdrv_mask_value", "goe / gck / ls mask value, when enable = 1", "6", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "SDRV", "0x518D", "goa_sdrv_mask_en", "when static frame, goa1~12 1: mask 0: normal output", "5", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "SDRV", "0x518D", "goa_sdrv_mask_value", "goa1~12 mask value, when enable = 1", "4", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "SDRV", "0x518D", "ls_clk_sdrv_mask_en", "when static frame, ls_clk 1: mask 0: normal output", "3", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("GOA entend (page 0x4B, 0x51)", "SDRV", "0x518D", "ls_clk_sdrv_mask_value", "ls_clk mask value, when enable = 1", "2", "RW", "0x00", "0x00", "0"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2100", "plus_mark_en", "specify whether to overlap the plus mark at the original image\n1'b1: enable this function\n1'b0: disable this function", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2100", "plus_mark_type", "define the plus mark type, useful when plus_mark_en = 1'b1\n1'b1: plus mark size is 1 horizontal line by 1 vertical line\n1'b0: plus mark size is 5 pixels by 5 pxiels", "6", "RW", "0x00", "0x01", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2100", "capture_stage_sel[4:0]", "specify which stage output red/green/blue data must be captured\n5'd0: capture edp line buffer output red/green/blue data\n5'd1: capture input process output red/green/blue data\n5'd2: capture pattern generator output red/green/blue data\n5'd3: capture frc_1 12 to 10 output red/green/blue data\n5'd4: capture frc_1 10 to 8 output red/green/blue data\n5'd5: capture display fbs output red/green/blue data\n5'd6: capture hdr output red/green/blue data\n5'd7: capture mura output red/green/blue data\n5'd8: capture cm output red/green/blue data\n5'd9: capture cabc output red/green/blue data\n5'd10: capture ldc output red/green/blue data\n5'd11: capture wg output red/green/blue data (2port)\n5'd12: capture ce output red/green/blue data (2port)\n5'd13: capture mura output red/green/blue data (2port)\n5'd14: capture gma3 output red/green/blue data (2port)\n5'd15: capture osd output red/green/blue data\n5'd16: capture acc output red/green/blue data\n5'd17: capture greenish output red/green/blue data\n5'd18: capture od fbs output red/green/blue data\n5'd19: capture line od output red/green/blue data\n5'd20: capture tx_frc output red/green/blue data\n5'd21: capture frc_2 12 to 10 output red/green/blue data\n5'd22: capture frc_2 10 to 8 output red/green/blue data\n5'd23: capture LGD DVG output red/green/blue data\n5'd24: capture hsc output red/green/blue data\n\n\n", "4-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2102", "plus_mark_red[7:0]", "red data component showed at the plus mark,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "RW", "0x00", "0xFF", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2101", "plus_mark_red[11:8]", "red data component showed at the plus mark,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "RW", "0x00", "0xF", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2104", "plus_mark_green[7:0]", "green data component showed at the plus mark,\nif the input green data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "RW", "0x00", "0xFF", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2103", "plus_mark_green[11:8]", "green data component showed at the plus mark,\nif the input green data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "RW", "0x00", "0xF", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2106", "plus_mark_blue[7:0]", "blue data component showed at the plus mark,\nif the input blue data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "RW", "0x00", "0xFF", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2105", "plus_mark_blue[11:8]", "blue data component showed at the plus mark,\nif the input blue data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "RW", "0x00", "0xF", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2108", "capture_hor_pos[7:0]", "define the red/green/blue captured horizontal position\n14'd0: capture the horizontal position 0\n14'd199: capture the horizontal position 199", "7-0", "RW", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2107", "capture_hor_pos[13:8]", "define the red/green/blue captured horizontal position\n14'd0: capture the horizontal position 0\n14'd199: capture the horizontal position 199", "5-0", "RW", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x210A", "capture_ver_pos[7:0]", "define the red/green/blue captured vertical position\n14'd0: capture the vertical position 0\n14'd199: capture the vertical position 199", "7-0", "RW", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2109", "capture_ver_pos[13:8]", "define the red/green/blue captured vertical position\n14'd0: capture the vertical position 0\n14'd199: capture the vertical position 199", "5-0", "RW", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x210C", "capture_in_video_hact[7:0]", "define the input video hactive size.\nFor 3840 x 2160 resolution, must set 14'd3840", "7-0", "RW", "0xF00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x210B", "capture_in_video_hact[13:8]", "define the input video hactive size.\nFor 3840 x 2160 resolution, must set 14'd3840", "5-0", "RW", "0xF00", "0xF", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x210E", "capture_in_video_vact[7:0]", "define the input video hactive size.\nFor 3840 x 2160 resolution, must set 14'd2160", "7-0", "RW", "0x870", "0x70", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x210D", "capture_in_video_vact[13:8]", "define the input video hactive size.\nFor 3840 x 2160 resolution, must set 14'd2160", "5-0", "RW", "0x870", "0x8", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x210F", "capture_region_mode", "define the rgb capture operation mode\n1'b0: capture 1 line total 36 pixels\n1'b1: capture 3x3 block 9 pixels, will be also dependent on capture_frame_num[1:0]", "7", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x210F", "capture_always_mode", "define whether to enable always capture operation mode\n1'b1: only require to trigger 1 0 -> 1 capture_start signal to enable always capture mode\n1'b0: 1 0 -> 1 capture_start signal will be only trigger 1 capture operation", "6", "RW", "0x01", "0x01", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x210F", "capture_start", "0 -> 1 change used to trigger rgb capture operation,\nif capture_always_mode = 1'b1, only require to trigger 1 time", "4", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x210F", "capture_frame_num[1:0]", "define the number of continuous frame required to be captured (combine with capture_region_mode = 1'b1)\n2'd0: 1 frame; 2'd1: 2 frames; 2'd2: 3 frames; 2'd3: 4 frames", "1-0", "RW", "0x00", "0x00", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2111", "stored_red1[3:0]", "the captured red data 1 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2110", "stored_red1[11:4]", "the captured red data 1 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2112", "stored_green1[7:0]", "the captured green data 1 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2111", "stored_green1[11:8]", "the captured green data 1 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2114", "stored_blue1[3:0]", "the captured blue data 1 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2113", "stored_blue1[11:4]", "the captured blue data 1 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2116", "stored_red2[3:0]", "the captured red data 2 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2115", "stored_red2[11:4]", "the captured red data 2 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2117", "stored_green2[7:0]", "the captured green data 2 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2116", "stored_green2[11:8]", "the captured green data 2 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2119", "stored_blue2[3:0]", "the captured blue data 2 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2118", "stored_blue2[11:4]", "the captured blue data 2 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x211B", "stored_red3[3:0]", "the captured red data 3 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x211A", "stored_red3[11:4]", "the captured red data 3 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x211C", "stored_green3[7:0]", "the captured green data 3 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x211B", "stored_green3[11:8]", "the captured green data 3 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x211E", "stored_blue3[3:0]", "the captured blue data 3 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x211D", "stored_blue3[11:4]", "the captured blue data 3 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2120", "stored_red4[3:0]", "the captured red data 4 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x211F", "stored_red4[11:4]", "the captured red data 4 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2121", "stored_green4[7:0]", "the captured green data 4 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2120", "stored_green4[11:8]", "the captured green data 4 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2123", "stored_blue4[3:0]", "the captured blue data 4 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2122", "stored_blue4[11:4]", "the captured blue data 4 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2125", "stored_red5[3:0]", "the captured red data 5 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2124", "stored_red5[11:4]", "the captured red data 5 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2126", "stored_green5[7:0]", "the captured green data 5 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2125", "stored_green5[11:8]", "the captured green data 5 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2128", "stored_blue5[3:0]", "the captured blue data 5 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2127", "stored_blue5[11:4]", "the captured blue data 5 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x212A", "stored_red6[3:0]", "the captured red data 6 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2129", "stored_red6[11:4]", "the captured red data 6 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x212B", "stored_green6[7:0]", "the captured green data 6 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x212A", "stored_green6[11:8]", "the captured green data 6 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x212D", "stored_blue6[3:0]", "the captured blue data 6 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x212C", "stored_blue6[11:4]", "the captured blue data 6 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x212F", "stored_red7[3:0]", "the captured red data 7 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x212E", "stored_red7[11:4]", "the captured red data 7 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2130", "stored_green7[7:0]", "the captured green data 7 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x212F", "stored_green7[11:8]", "the captured green data 7 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2132", "stored_blue7[3:0]", "the captured blue data 7 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2131", "stored_blue7[11:4]", "the captured blue data 7 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2134", "stored_red8[3:0]", "the captured red data 8 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2133", "stored_red8[11:4]", "the captured red data 8 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2135", "stored_green8[7:0]", "the captured green data 8 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2134", "stored_green8[11:8]", "the captured green data 8 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2137", "stored_blue8[3:0]", "the captured blue data 8 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2136", "stored_blue8[11:4]", "the captured blue data 8 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2139", "stored_red9[3:0]", "the captured red data 9 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2138", "stored_red9[11:4]", "the captured red data 9 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x213A", "stored_green9[7:0]", "the captured green data 9 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2139", "stored_green9[11:8]", "the captured green data 9 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x213C", "stored_blue9[3:0]", "the captured blue data 9 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x213B", "stored_blue9[11:4]", "the captured blue data 9 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x213E", "stored_red10[3:0]", "the captured red data 10 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x213D", "stored_red10[11:4]", "the captured red data 10 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x213F", "stored_green10[7:0]", "the captured green data 10 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x213E", "stored_green10[11:8]", "the captured green data 10 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2141", "stored_blue10[3:0]", "the captured blue data 10 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2140", "stored_blue10[11:4]", "the captured blue data 10 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2143", "stored_red11[3:0]", "the captured red data 11 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2142", "stored_red11[11:4]", "the captured red data 11 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2144", "stored_green11[7:0]", "the captured green data 11 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2143", "stored_green11[11:8]", "the captured green data 11 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2146", "stored_blue11[3:0]", "the captured blue data 11 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2145", "stored_blue11[11:4]", "the captured blue data 11 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2148", "stored_red12[3:0]", "the captured red data 12 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2147", "stored_red12[11:4]", "the captured red data 12 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2149", "stored_green12[7:0]", "the captured green data 12 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2148", "stored_green12[11:8]", "the captured green data 12 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x214B", "stored_blue12[3:0]", "the captured blue data 12 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x214A", "stored_blue12[11:4]", "the captured blue data 12 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x214D", "stored_red13[3:0]", "the captured red data 13 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x214C", "stored_red13[11:4]", "the captured red data 13 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x214E", "stored_green13[7:0]", "the captured green data 13 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x214D", "stored_green13[11:8]", "the captured green data 13 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2150", "stored_blue13[3:0]", "the captured blue data 13 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x214F", "stored_blue13[11:4]", "the captured blue data 13 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2152", "stored_red14[3:0]", "the captured red data 14 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2151", "stored_red14[11:4]", "the captured red data 14 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2153", "stored_green14[7:0]", "the captured green data 14 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2152", "stored_green14[11:8]", "the captured green data 14 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2155", "stored_blue14[3:0]", "the captured blue data 14 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2154", "stored_blue14[11:4]", "the captured blue data 14 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2157", "stored_red15[3:0]", "the captured red data 15 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2156", "stored_red15[11:4]", "the captured red data 15 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2158", "stored_green15[7:0]", "the captured green data 15 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2157", "stored_green15[11:8]", "the captured green data 15 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x215A", "stored_blue15[3:0]", "the captured blue data 15 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2159", "stored_blue15[11:4]", "the captured blue data 15 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x215C", "stored_red16[3:0]", "the captured red data 16 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x215B", "stored_red16[11:4]", "the captured red data 16 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x215D", "stored_green16[7:0]", "the captured green data 16 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x215C", "stored_green16[11:8]", "the captured green data 16 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x215F", "stored_blue16[3:0]", "the captured blue data 16 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x215E", "stored_blue16[11:4]", "the captured blue data 16 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2161", "stored_red17[3:0]", "the captured red data 17 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2160", "stored_red17[11:4]", "the captured red data 17 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2162", "stored_green17[7:0]", "the captured green data 17 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2161", "stored_green17[11:8]", "the captured green data 17 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2164", "stored_blue17[3:0]", "the captured blue data 17 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2163", "stored_blue17[11:4]", "the captured blue data 17 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2166", "stored_red18[3:0]", "the captured red data 18 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2165", "stored_red18[11:4]", "the captured red data 18 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2167", "stored_green18[7:0]", "the captured green data 18 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2166", "stored_green18[11:8]", "the captured green data 18 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2169", "stored_blue18[3:0]", "the captured blue data 18 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2168", "stored_blue18[11:4]", "the captured blue data 18 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x216B", "stored_red19[3:0]", "the captured red data 19 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x216A", "stored_red19[11:4]", "the captured red data 19 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x216C", "stored_green19[7:0]", "the captured green data 19 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x216B", "stored_green19[11:8]", "the captured green data 19 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x216E", "stored_blue19[3:0]", "the captured blue data 19 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x216D", "stored_blue19[11:4]", "the captured blue data 19 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2170", "stored_red20[3:0]", "the captured red data 20 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x216F", "stored_red20[11:4]", "the captured red data 20 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2171", "stored_green20[7:0]", "the captured green data 20 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2170", "stored_green20[11:8]", "the captured green data 20 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2173", "stored_blue20[3:0]", "the captured blue data 20 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2172", "stored_blue20[11:4]", "the captured blue data 20 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2175", "stored_red21[3:0]", "the captured red data 21 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2174", "stored_red21[11:4]", "the captured red data 21 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2176", "stored_green21[7:0]", "the captured green data 21 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2175", "stored_green21[11:8]", "the captured green data 21 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2178", "stored_blue21[3:0]", "the captured blue data 21 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2177", "stored_blue21[11:4]", "the captured blue data 21 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x217A", "stored_red22[3:0]", "the captured red data 22 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2179", "stored_red22[11:4]", "the captured red data 22 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x217B", "stored_green22[7:0]", "the captured green data 22 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x217A", "stored_green22[11:8]", "the captured green data 22 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x217D", "stored_blue22[3:0]", "the captured blue data 22 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x217C", "stored_blue22[11:4]", "the captured blue data 22 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x217F", "stored_red23[3:0]", "the captured red data 23 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x217E", "stored_red23[11:4]", "the captured red data 23 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2180", "stored_green23[7:0]", "the captured green data 23 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x217F", "stored_green23[11:8]", "the captured green data 23 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2182", "stored_blue23[3:0]", "the captured blue data 23 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2181", "stored_blue23[11:4]", "the captured blue data 23 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2184", "stored_red24[3:0]", "the captured red data 24 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2183", "stored_red24[11:4]", "the captured red data 24 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2185", "stored_green24[7:0]", "the captured green data 24 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2184", "stored_green24[11:8]", "the captured green data 24 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2187", "stored_blue24[3:0]", "the captured blue data 24 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2186", "stored_blue24[11:4]", "the captured blue data 24 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2189", "stored_red25[3:0]", "the captured red data 25 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2188", "stored_red25[11:4]", "the captured red data 25 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x218A", "stored_green25[7:0]", "the captured green data 25 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2189", "stored_green25[11:8]", "the captured green data 25 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x218C", "stored_blue25[3:0]", "the captured blue data 25 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x218B", "stored_blue25[11:4]", "the captured blue data 25 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x218E", "stored_red26[3:0]", "the captured red data 26 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x218D", "stored_red26[11:4]", "the captured red data 26 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x218F", "stored_green26[7:0]", "the captured green data 26 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x218E", "stored_green26[11:8]", "the captured green data 26 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2191", "stored_blue26[3:0]", "the captured blue data 26 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2190", "stored_blue26[11:4]", "the captured blue data 26 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2193", "stored_red27[3:0]", "the captured red data 27 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2192", "stored_red27[11:4]", "the captured red data 27 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2194", "stored_green27[7:0]", "the captured green data 27 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2193", "stored_green27[11:8]", "the captured green data 27 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2196", "stored_blue27[3:0]", "the captured blue data 27 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2195", "stored_blue27[11:4]", "the captured blue data 27 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2198", "stored_red28[3:0]", "the captured red data 28 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2197", "stored_red28[11:4]", "the captured red data 28 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2199", "stored_green28[7:0]", "the captured green data 28 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x2198", "stored_green28[11:8]", "the captured green data 28 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x219B", "stored_blue28[3:0]", "the captured blue data 28 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x219A", "stored_blue28[11:4]", "the captured blue data 28 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x219D", "stored_red29[3:0]", "the captured red data 29 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x219C", "stored_red29[11:4]", "the captured red data 29 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x219E", "stored_green29[7:0]", "the captured green data 29 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x219D", "stored_green29[11:8]", "the captured green data 29 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21A0", "stored_blue29[3:0]", "the captured blue data 29 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x219F", "stored_blue29[11:4]", "the captured blue data 29 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21A2", "stored_red30[3:0]", "the captured red data 30 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21A1", "stored_red30[11:4]", "the captured red data 30 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21A3", "stored_green30[7:0]", "the captured green data 30 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21A2", "stored_green30[11:8]", "the captured green data 30 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21A5", "stored_blue30[3:0]", "the captured blue data 30 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21A4", "stored_blue30[11:4]", "the captured blue data 30 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21A7", "stored_red31[3:0]", "the captured red data 31 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21A6", "stored_red31[11:4]", "the captured red data 31 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21A8", "stored_green31[7:0]", "the captured green data 31 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21A7", "stored_green31[11:8]", "the captured green data 31 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21AA", "stored_blue31[3:0]", "the captured blue data 31 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21A9", "stored_blue31[11:4]", "the captured blue data 31 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21AC", "stored_red32[3:0]", "the captured red data 32 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21AB", "stored_red32[11:4]", "the captured red data 32 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21AD", "stored_green32[7:0]", "the captured green data 32 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21AC", "stored_green32[11:8]", "the captured green data 32 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21AF", "stored_blue32[3:0]", "the captured blue data 32 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21AE", "stored_blue32[11:4]", "the captured blue data 32 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21B1", "stored_red33[3:0]", "the captured red data 33 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21B0", "stored_red33[11:4]", "the captured red data 33 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21B2", "stored_green33[7:0]", "the captured green data 33 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21B1", "stored_green33[11:8]", "the captured green data 33 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21B4", "stored_blue33[3:0]", "the captured blue data 33 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21B3", "stored_blue33[11:4]", "the captured blue data 33 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21B6", "stored_red34[3:0]", "the captured red data 34 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21B5", "stored_red34[11:4]", "the captured red data 34 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21B7", "stored_green34[7:0]", "the captured green data 34 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21B6", "stored_green34[11:8]", "the captured green data 34 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21B9", "stored_blue34[3:0]", "the captured blue data 34 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21B8", "stored_blue34[11:4]", "the captured blue data 34 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21BB", "stored_red35[3:0]", "the captured red data 35 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21BA", "stored_red35[11:4]", "the captured red data 35 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21BC", "stored_green35[7:0]", "the captured green data 35 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21BB", "stored_green35[11:8]", "the captured green data 35 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21BE", "stored_blue35[3:0]", "the captured blue data 35 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21BD", "stored_blue35[11:4]", "the captured blue data 35 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21C0", "stored_red36[3:0]", "the captured red data 36 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21BF", "stored_red36[11:4]", "the captured red data 36 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21C1", "stored_green36[7:0]", "the captured green data 36 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21C0", "stored_green36[11:8]", "the captured green data 36 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "3-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21C3", "stored_blue36[3:0]", "the captured blue data 36 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-4", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21C2", "stored_blue36[11:4]", "the captured blue data 36 information, the captured stage is dependent on capture_stage_sel,\nif the input red data bus width is not 12-bit, shift the data to MSB and fill 0s at the LSB", "7-0", "R", "0x00", "0x0", "1"));
            myreg.Add(new TCON_REG("RGB Capture (0x21)", "RGBCapture", "0x21C3", "capture_complete", "specify whether the current capture function is complete or not (1'b1: complete)", "0", "R", "0x00", "0x00", "1"));
}
