init_tcon_define();
public void init_tcon_define()
{
		Title = "AUO4H500_Register_v01";
		myreg.Clear();

		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO", "0x0191", "auo_chess_v_num[7:0]", "AUO Chess V Num", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO", "0x0190", "auo_chess_v_num[13:8]", "AUO Chess V Num", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO", "0x0193", "auo_chess_h_num[7:0]", "AUO Chess H Num", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO", "0x0192", "auo_chess_h_num[13:8]", "AUO Chess H Num", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x0194", "agen_reg", "Display AUO Aging Pattern (reg)", "7", "RW", "0x01", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x0194", "vca_en_reg", "Display AUO Aging Pattern, VCA mode (reg)", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x0194", "ag_ptn_sel", "AG pattern, fix mode, sel one pattern to print", "4-0", "RW", "0x01", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x0195", "ag_rolling_def[19:16]", "AG pattern, rolling mode, sel patterns of No.1 ~ No.20 to roll\nif ag_rolling_def[19:0] : 20'b0000_0000_0000_0000_1101; rolling No.1, No. 3, No. 4 patterns", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x0196", "ag_rolling_def[15:8]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x0197", "ag_rolling_def[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x019F", "ag_speed[15:8]", "each patterns rolling period \n0, 1: 1 frame\n2 : 2 frames…", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01A0", "ag_speed[7:0]", "", "7-0", "RW", "0x01", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01A1", "ag_hline_odd_clr[9:8]", "for No.11 pattern, odd line color", "5-4", "RW", "0x03", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01A1", "ag_hline_even_clr[9:8]", "for No.11 pattern, even line color", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01A2", "ag_hline_odd_clr[7:0]", "for No.11 pattern, odd line color", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01A3", "ag_hline_even_clr[7:0]", "for No.11 pattern, even line color", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01A4", "rectangle_pat_L1[9:8]", "for No.21 pattern, background color", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01A4", "rectangle_pat_L2[9:8]", "for No.21 pattern, foreground color", "1-0", "RW", "0x03", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01A5", "rectangle_pat_L1[7:0]", "for No.21 pattern, background color", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01A6", "rectangle_pat_L2[7:0]", "for No.21 pattern, foreground color", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01A7", "rectangle_pat_X1[11:8]", "inner margin in y-direction, x1 (0~4096)", "7-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01A7", "rectangle_pat_Y1[11:8]", "inner margin in y-direction, y1\nn: n, n>2303: 2304", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01A8", "rectangle_pat_X1[7:0]", "inner margin in y-direction, x1 (0~4096)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01A9", "rectangle_pat_Y1[7:0]", "inner margin in y-direction, y1\nn: n, n>2303: 2304", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01AA", "rectangle_pat_X2[12:8]", "width of rectangle\nn: n, n>4095: 4096", "4-0", "RW", "0x01", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01AB", "rectangle_pat_X2[7:0]", "", "7-0", "RW", "0xF4", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01AC", "rectangle_pat_Y2[11:8]", "height of rectangle\nn: n, n>2303: 2304", "3-0", "RW", "0x03", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01AD", "rectangle_pat_Y2[7:0]", "", "7-0", "RW", "0xE8", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01B0", "vca_l1[23:16]", "for VCA mode pattern, Line1 on/off setting", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01B1", "vca_l1[15:8]", "", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01B2", "vca_l1[7:0]", "", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01B3", "vca_l2[23:16]", "for VCA mode pattern, Line2 on/off setting", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01B4", "vca_l2[15:8]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01B5", "vca_l2[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01B6", "vca_l3[23:16]", "for VCA mode pattern, Line3 on/off setting", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01B7", "vca_l3[15:8]", "", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01B8", "vca_l3[7:0]", "", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01B9", "vca_l4[23:16]", "for VCA mode pattern, Line4 on/off setting", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01BA", "vca_l4[15:8]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01BB", "vca_l4[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01BC", "vca_l5[23:16]", "for VCA mode pattern, Line5 on/off setting", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01BD", "vca_l5[15:8]", "", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01BE", "vca_l5[7:0]", "", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01BF", "vca_l6[23:16]", "for VCA mode pattern, Line6 on/off setting", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01C0", "vca_l6[15:8]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01C1", "vca_l6[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01C2", "vca_l7[23:16]", "for VCA mode pattern, Line7 on/off setting", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01C3", "vca_l7[15:8]", "", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01C4", "vca_l7[7:0]", "", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01C5", "vca_l8[23:16]", "for VCA mode pattern, Line8 on/off setting", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01C6", "vca_l8[15:8]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01C7", "vca_l8[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01C8", "vca_r[9:8]", "for VCA mode pattern, Line on red color channel", "1-0", "RW", "0x03", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01C9", "vca_r[7:0]", "", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01CA", "vca_g[9:8]", "for VCA mode pattern, Line on green color channel", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01CB", "vca_g[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01CC", "vca_b[9:8]", "for VCA mode pattern, Line on blue color channel", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01CD", "vca_b[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01CE", "frame_pat_L1", "for No.22 pattern, background color\n0:0, 1:1023", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01CE", "frame_pat_L2", "for No.22 pattern, foreground color\n0:0, 1:1023", "0", "RW", "0x01", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01CF", "frame_pat_DX1", "inner margin in x-direction, Δx1 (0~31)", "4-0", "RW", "0x0F", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01D0", "frame_pat_DY1", "inner margin in x-direction, Δy1 (0~31)", "4-0", "RW", "0x0F", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01D1", "frame_pat_DX2", "width of the frame in x direction , Δx2 (0~31)", "4-0", "RW", "0x0F", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01D2", "frame_pat_DY2", "width of the frame in y direction , Δy2 (0~31)", "4-0", "RW", "0x0F", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01D3", "cross_pat_L1[9:8]", "for No.23 pattern, background color (0~1023)", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01D3", "cross_pat_L2[9:8]", "for No.23 pattern, foreground color (0~1023)", "1-0", "RW", "0x03", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01D4", "cross_pat_L1[7:0]", "for No.23 pattern, background color (0~1023)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01D5", "cross_pat_L2[7:0]", "for No.23 pattern, foreground color (0~1023)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01D6", "cross_pat_DX[12:8]", "cross position in x direction ,Δx\nn: n, n>4095: 4096", "4-0", "RW", "0x03", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01D7", "cross_pat_DX[7:0]", "", "7-0", "RW", "0xE8", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01D8", "cross_pat_DL2", "The line width of the pattern , ΔL2 (0~15)", "7-4", "RW", "0x0A", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01D8", "cross_pat_DY[11:8]", "cross position in y direction ,Δy\nn: n, n>2303: 2304", "3-0", "RW", "0x01", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01D9", "cross_pat_DY[7:0]", "", "7-0", "RW", "0xF4", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01DA", "dot_pat_L1", "for No.24 pattern, background color\n0:0, 1:1023", "4", "RW", "0x01", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01DA", "dot_pat_L2", "for No.24 pattern, foreground color\n0:0, 1:1023", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01DB", "dot_pat_DX1[9:8]", "for No.24 pattern, the width of big dot, Δx1 (0~1023)", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01DB", "dot_pat_DY1[9:8]", "for No.24 pattern, the height of big dot, Δy1 (0~1023)", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01DC", "dot_pat_DX1[7:0]", "for No.24 pattern, the width of big dot, Δx1 (0~1023)", "7-0", "RW", "0x64", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01DD", "dot_pat_DY1[7:0]", "for No.24 pattern, the height of big dot, Δy1 (0~1023)", "7-0", "RW", "0x32", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01DE", "dot_pat_DX2", "for No.24 pattern, the width of small dot, Δx2 (0~31)", "4-0", "RW", "0x14", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01DF", "dot_pat_DY2", "for No.24 pattern, the height of small dot, Δy2 (0~31)", "4-0", "RW", "0x0A", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01E0", "dot_pat_X1", "the left margin of frame dot, x1 (0~255)", "7-0", "RW", "0xC8", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01E1", "dot_pat_Y1", "the top margin of frame dot, y1 (0~255)", "7-0", "RW", "0xC8", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01E2", "dot_pat_X2", "the pitch of frame dot in x direction, x2 (0~255)", "7-0", "RW", "0x64", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01E3", "dot_pat_Y2", "the pitch of frame dot in x direction, y2 (0~255)", "7-0", "RW", "0x64", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01E4", "v_stripe_pat_L1A", "color of the forground in upper area, L1A\n0:0, 1:1023", "4", "RW", "0x01", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01E4", "v_stripe_pat_L1B", "color of the background in upper area, L1B\n0:0, 1:1023", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01E5", "v_stripe_pat_L2A", "color of the forground in middle area, L2A\n0:0, 1:1023", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01E5", "v_stripe_pat_L2B", "color of the background in middle area, L2B\n0:0, 1:1023", "0", "RW", "0x01", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01E6", "v_stripe_pat_L3A", "color of the forground in lower area, L3A\n0:0, 1:1023", "4", "RW", "0x01", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01E6", "v_stripe_pat_L3B", "color of the background in lower area, L3B\n0:0, 1:1023", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01E7", "v_stripe_pat_DX1", "the width of the stripe in upper area, Δx1 (0~15)", "3-0", "RW", "0x05", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01E8", "v_stripe_pat_DX2", "the width of the stripe in middle area, Δx2 (0~15)", "7-4", "RW", "0x0A", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x01E8", "v_stripe_pat_DX3", "the width of the stripe in lower area, Δx3 (0~15)", "3-0", "RW", "0x0F", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1500", "block_pat_BLOCK_L_DEF", "for No.26 pattern, size of block\n0: 120x120\n1: 240x240\n2: 360x360\n3: 480x480", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1501", "block_pat_DL_DEF", "Inner-Margin of Block, dL (0~255)", "7-0", "RW", "0x32", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1502", "block_pat_BATCH_DIM_DEF", "Dimmenssion of Batch (Row fo Batch,Col of Batch) : \n0: (2, 32) \n1: (4, 16) \n2: (8, 8) \n3: (16, 4)", "3-0", "RW", "0x03", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1503", "block_pat_ROW_START", "First Row of Display Zone (0~255)", "7-0", "RW", "0x32", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1504", "block_pat_COL_START", "First Column of Display Zone (0~255)", "7-0", "RW", "0x64", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1505", "block_pat_D_ZONE_H_DEF[11:8]", "Height of Display Zone, d_zone_H\nn:n, n>2303:2304", "3-0", "RW", "0x07", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1506", "block_pat_D_ZONE_H_DEF[7:0]", "", "7-0", "RW", "0xD0", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1507", "block_pat_D_ZONE_W_DEF[12:8]", "Height of Display Zone, d_zone_W\nn:n, n>4095:4096", "4-0", "RW", "0x0B", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1508", "block_pat_D_ZONE_W_DEF[7:0]", "", "7-0", "RW", "0xB8", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1510", "BLOCK_PAT_GL_R0", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1511", "BLOCK_PAT_GL_G0", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1512", "BLOCK_PAT_GL_B0", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1513", "BLOCK_PAT_GL_R1", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1514", "BLOCK_PAT_GL_G1", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1515", "BLOCK_PAT_GL_B1", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1516", "BLOCK_PAT_GL_R2", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1517", "BLOCK_PAT_GL_G2", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1518", "BLOCK_PAT_GL_B2", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1519", "BLOCK_PAT_GL_R3", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x151A", "BLOCK_PAT_GL_G3", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x151B", "BLOCK_PAT_GL_B3", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x151C", "BLOCK_PAT_GL_R4", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x151D", "BLOCK_PAT_GL_G4", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x151E", "BLOCK_PAT_GL_B4", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1520", "BLOCK_PAT_GL_R5", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1521", "BLOCK_PAT_GL_G5", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1522", "BLOCK_PAT_GL_B5", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1523", "BLOCK_PAT_GL_R6", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1524", "BLOCK_PAT_GL_G6", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1525", "BLOCK_PAT_GL_B6", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1526", "BLOCK_PAT_GL_R7", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1527", "BLOCK_PAT_GL_G7", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1528", "BLOCK_PAT_GL_B7", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1529", "BLOCK_PAT_GL_R8", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x152A", "BLOCK_PAT_GL_G8", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x152B", "BLOCK_PAT_GL_B8", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x152C", "BLOCK_PAT_GL_R9", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x152D", "BLOCK_PAT_GL_G9", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x152E", "BLOCK_PAT_GL_B9", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1530", "BLOCK_PAT_GL_R10", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1531", "BLOCK_PAT_GL_G10", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1532", "BLOCK_PAT_GL_B10", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1533", "BLOCK_PAT_GL_R11", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1534", "BLOCK_PAT_GL_G11", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1535", "BLOCK_PAT_GL_B11", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1536", "BLOCK_PAT_GL_R12", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1537", "BLOCK_PAT_GL_G12", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1538", "BLOCK_PAT_GL_B12", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1539", "BLOCK_PAT_GL_R13", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x153A", "BLOCK_PAT_GL_G13", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x153B", "BLOCK_PAT_GL_B13", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x153C", "BLOCK_PAT_GL_R14", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x153D", "BLOCK_PAT_GL_G14", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x153E", "BLOCK_PAT_GL_B14", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1540", "BLOCK_PAT_GL_R15", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1541", "BLOCK_PAT_GL_G15", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1542", "BLOCK_PAT_GL_B15", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1543", "BLOCK_PAT_GL_R16", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1544", "BLOCK_PAT_GL_G16", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1545", "BLOCK_PAT_GL_B16", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1546", "BLOCK_PAT_GL_R17", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1547", "BLOCK_PAT_GL_G17", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1548", "BLOCK_PAT_GL_B17", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1549", "BLOCK_PAT_GL_R18", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x154A", "BLOCK_PAT_GL_G18", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x154B", "BLOCK_PAT_GL_B18", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x154C", "BLOCK_PAT_GL_R19", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x154D", "BLOCK_PAT_GL_G19", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x154E", "BLOCK_PAT_GL_B19", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1550", "BLOCK_PAT_GL_R20", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1551", "BLOCK_PAT_GL_G20", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1552", "BLOCK_PAT_GL_B20", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1553", "BLOCK_PAT_GL_R21", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1554", "BLOCK_PAT_GL_G21", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1555", "BLOCK_PAT_GL_B21", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1556", "BLOCK_PAT_GL_R22", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1557", "BLOCK_PAT_GL_G22", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1558", "BLOCK_PAT_GL_B22", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1559", "BLOCK_PAT_GL_R23", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x155A", "BLOCK_PAT_GL_G23", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x155B", "BLOCK_PAT_GL_B23", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x155C", "BLOCK_PAT_GL_R24", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x155D", "BLOCK_PAT_GL_G24", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x155E", "BLOCK_PAT_GL_B24", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1560", "BLOCK_PAT_GL_R25", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1561", "BLOCK_PAT_GL_G25", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1562", "BLOCK_PAT_GL_B25", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1563", "BLOCK_PAT_GL_R26", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1564", "BLOCK_PAT_GL_G26", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1565", "BLOCK_PAT_GL_B26", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1566", "BLOCK_PAT_GL_R27", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1567", "BLOCK_PAT_GL_G27", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1568", "BLOCK_PAT_GL_B27", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1569", "BLOCK_PAT_GL_R28", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x156A", "BLOCK_PAT_GL_G28", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x156B", "BLOCK_PAT_GL_B28", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x156C", "BLOCK_PAT_GL_R29", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x156D", "BLOCK_PAT_GL_G29", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x156E", "BLOCK_PAT_GL_B29", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1570", "BLOCK_PAT_GL_R30", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1571", "BLOCK_PAT_GL_G30", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1572", "BLOCK_PAT_GL_B30", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1573", "BLOCK_PAT_GL_R31", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1574", "BLOCK_PAT_GL_G31", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1575", "BLOCK_PAT_GL_B31", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1576", "BLOCK_PAT_GL_R32", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1577", "BLOCK_PAT_GL_G32", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1578", "BLOCK_PAT_GL_B32", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1579", "BLOCK_PAT_GL_R33", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x157A", "BLOCK_PAT_GL_G33", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x157B", "BLOCK_PAT_GL_B33", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x157C", "BLOCK_PAT_GL_R34", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x157D", "BLOCK_PAT_GL_G34", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x157E", "BLOCK_PAT_GL_B34", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1580", "BLOCK_PAT_GL_R35", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1581", "BLOCK_PAT_GL_G35", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1582", "BLOCK_PAT_GL_B35", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1583", "BLOCK_PAT_GL_R36", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1584", "BLOCK_PAT_GL_G36", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1585", "BLOCK_PAT_GL_B36", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1586", "BLOCK_PAT_GL_R37", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1587", "BLOCK_PAT_GL_G37", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1588", "BLOCK_PAT_GL_B37", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1589", "BLOCK_PAT_GL_R38", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x158A", "BLOCK_PAT_GL_G38", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x158B", "BLOCK_PAT_GL_B38", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x158C", "BLOCK_PAT_GL_R39", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x158D", "BLOCK_PAT_GL_G39", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x158E", "BLOCK_PAT_GL_B39", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1590", "BLOCK_PAT_GL_R40", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1591", "BLOCK_PAT_GL_G40", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1592", "BLOCK_PAT_GL_B40", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1593", "BLOCK_PAT_GL_R41", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1594", "BLOCK_PAT_GL_G41", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1595", "BLOCK_PAT_GL_B41", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1596", "BLOCK_PAT_GL_R42", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1597", "BLOCK_PAT_GL_G42", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1598", "BLOCK_PAT_GL_B42", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x1599", "BLOCK_PAT_GL_R43", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x159A", "BLOCK_PAT_GL_G43", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x159B", "BLOCK_PAT_GL_B43", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x159C", "BLOCK_PAT_GL_R44", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x159D", "BLOCK_PAT_GL_G44", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x159E", "BLOCK_PAT_GL_B44", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15A0", "BLOCK_PAT_GL_R45", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15A1", "BLOCK_PAT_GL_G45", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15A2", "BLOCK_PAT_GL_B45", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15A3", "BLOCK_PAT_GL_R46", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15A4", "BLOCK_PAT_GL_G46", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15A5", "BLOCK_PAT_GL_B46", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15A6", "BLOCK_PAT_GL_R47", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15A7", "BLOCK_PAT_GL_G47", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15A8", "BLOCK_PAT_GL_B47", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15A9", "BLOCK_PAT_GL_R48", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15AA", "BLOCK_PAT_GL_G48", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15AB", "BLOCK_PAT_GL_B48", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15AC", "BLOCK_PAT_GL_R49", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15AD", "BLOCK_PAT_GL_G49", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15AE", "BLOCK_PAT_GL_B49", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15B0", "BLOCK_PAT_GL_R50", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15B1", "BLOCK_PAT_GL_G50", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15B2", "BLOCK_PAT_GL_B50", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15B3", "BLOCK_PAT_GL_R51", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15B4", "BLOCK_PAT_GL_G51", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15B5", "BLOCK_PAT_GL_B51", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15B6", "BLOCK_PAT_GL_R52", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15B7", "BLOCK_PAT_GL_G52", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15B8", "BLOCK_PAT_GL_B52", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15B9", "BLOCK_PAT_GL_R53", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15BA", "BLOCK_PAT_GL_G53", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15BB", "BLOCK_PAT_GL_B53", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15BC", "BLOCK_PAT_GL_R54", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15BD", "BLOCK_PAT_GL_G54", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15BE", "BLOCK_PAT_GL_B54", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15C0", "BLOCK_PAT_GL_R55", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15C1", "BLOCK_PAT_GL_G55", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15C2", "BLOCK_PAT_GL_B55", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15C3", "BLOCK_PAT_GL_R56", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15C4", "BLOCK_PAT_GL_G56", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15C5", "BLOCK_PAT_GL_B56", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15C6", "BLOCK_PAT_GL_R57", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15C7", "BLOCK_PAT_GL_G57", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15C8", "BLOCK_PAT_GL_B57", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15C9", "BLOCK_PAT_GL_R58", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15CA", "BLOCK_PAT_GL_G58", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15CB", "BLOCK_PAT_GL_B58", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15CC", "BLOCK_PAT_GL_R59", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15CD", "BLOCK_PAT_GL_G59", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15CE", "BLOCK_PAT_GL_B59", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15D0", "BLOCK_PAT_GL_R60", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15D1", "BLOCK_PAT_GL_G60", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15D2", "BLOCK_PAT_GL_B60", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15D3", "BLOCK_PAT_GL_R61", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15D4", "BLOCK_PAT_GL_G61", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15D5", "BLOCK_PAT_GL_B61", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15D6", "BLOCK_PAT_GL_R62", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15D7", "BLOCK_PAT_GL_G62", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15D8", "BLOCK_PAT_GL_B62", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15D9", "BLOCK_PAT_GL_R63", "GL of R Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15DA", "BLOCK_PAT_GL_G63", "GL of G Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "AUO_AG", "0x15DB", "BLOCK_PAT_GL_B63", "GL of B Channel for Pixels in Block (0,4, 8 … 1016, 1020)", "7-0", "RW", "0xFF", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "Resolution", "0x08A0", "hact[15:8]", "Horizontal active pixel number per line. Resolution setting", "7-0", "RW", "0x00", "0x07", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "Resolution", "0x08A1", "hact[7:0]", "Horizontal active pixel number per line. Resolution setting", "7-0", "RW", "0x00", "0x80", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "Resolution", "0x08A2", "vact[15:8]", "Vertical active line number per frame. Resolution setting", "7-0", "RW", "0x00", "0x04", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "Resolution", "0x08A3", "vact[7:0]", "Vertical active line number per frame. Resolution setting", "7-0", "RW", "0x00", "0x38", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "Resolution", "0x08A4", "htot[15:8]", "Horizontal total pixel number per line. Resolution setting", "7-0", "RW", "0x00", "0x08", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "Resolution", "0x08A5", "htot[7:0]", "Horizontal total pixel number per line. Resolution setting", "7-0", "RW", "0x00", "0x98", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "Resolution", "0x08A6", "vtot_nor[15:8]", "Vertical total line number per frame. Resolution setting", "7-0", "RW", "0x00", "0x04", "0" ));
		myreg.Add(new TCON_REG ( "PattGen (0x01, 0x15)", "Resolution", "0x08A7", "vtot_nor[7:0]", "Vertical total line number per frame. Resolution setting", "7-0", "RW", "0x00", "0x65", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x1E00", "gsp1_pol", "gsp1 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x1E00", "en_gsp1_2w", "enable gsp1 2X sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x1E01", "gsp1_sh[7:0]", "gsp1 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x1E00", "gsp1_sh[13:8]", "gsp1 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x1E02", "en_gsp1_or", "enable gsp1 output to gpo_or_1_o", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x1E02", "gsp1_sel_r_osc_trg", "select osc clk count to trigger start position", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x1E02", "gsp1_sel_f_osc_trg", "select osc clk count to trigger falling position", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x1E02", "gsp1_w[11:8]", "width of gsp1 (line base)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x1E03", "gsp1_w[7:0]", "width of gsp1 (line base)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x1E05", "gsp1_ST_ln[7:0]", "gsp1 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x1E04", "gsp1_ST_ln[14:8]", "gsp1 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x1E09", "gsp1_ST_ln_twice[7:0]", "gsp1 start vertical line for twice output", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x1E08", "gsp1_ST_ln_twice[14:8]", "gsp1 start vertical line for twice output", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x1E0A", "gsp2_pol", "gsp2 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x1E0A", "en_gsp2_2w", "enable gsp2 2X sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x1E0B", "gsp2_sh[7:0]", "gsp2 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x1E0A", "gsp2_sh[13:8]", "gsp2 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x1E0C", "en_gsp2_or", "enable gsp2 output to gpo_or_1_o", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x1E0C", "gsp2_sel_r_osc_trg", "select osc clk count to trigger start position", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x1E0C", "gsp2_sel_f_osc_trg", "select osc clk count to trigger falling position", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x1E0C", "gsp2_w[11:8]", "width of gsp2 (line base)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x1E0D", "gsp2_w[7:0]", "width of gsp2 (line base)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x1E0F", "gsp2_ST_ln[7:0]", "gsp2 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x1E0E", "gsp2_ST_ln[14:8]", "gsp2 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x1E11", "gsp2_ST_ln_twice[7:0]", "gsp2 start vertical line for twice output", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x1E10", "gsp2_ST_ln_twice[14:8]", "gsp2 start vertical line for twice output", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E1F", "goel_sh_even[7:0]", "goel start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E1E", "goel_sh_even[13:8]", "goel start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E21", "goel_w_even[7:0]", "width of goel", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E20", "goel_w_even[13:8]", "width of goel", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E23", "goer_sh_even[7:0]", "goer start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E22", "goer_sh_even[13:8]", "goer start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E25", "goer_w_even[7:0]", "width of goer", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E24", "goer_w_even[13:8]", "width of goer", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1E26", "gckl_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1E26", "gckl_sel_f_osc_trg", "select osc clk count to trigger width", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1E27", "gckl_sh[7:0]", "gckl start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1E26", "gckl_sh[13:8]", "gckl start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1E28", "gckl_pol", "gckl polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1E28", "en_gckl_2w", "enable gckl 2X width and sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1E29", "gckl_w[7:0]", "width of gckl", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1E28", "gckl_w[13:8]", "width of gckl", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1E2A", "en_gckl_odd_even", "enable gck odd/even line use different rising/falling setting", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1E2B", "gckl_ST_ln[7:0]", "gckl start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1E2A", "gckl_ST_ln[14:8]", "gckl start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1E2C", "en_gck_l_or", "enable gck_l output to gpo_or_1_o", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1E2D", "gckl_EN_ln[7:0]", "gckl end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1E2C", "gckl_EN_ln[14:8]", "gckl end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1E2E", "gckr_pol", "gckr polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1E2E", "en_gckr_2w", "enable gckr 2X width and sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1E2F", "gckr_sh[7:0]", "gckr start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1E2E", "gckr_sh[13:8]", "gckr start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1E30", "gckr_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1E30", "gckr_sel_f_osc_trg", "select osc clk count to trigger width", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1E31", "gckr_w[7:0]", "width of gckr", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1E30", "gckr_w[13:8]", "width of gckr", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1E32", "en_gckr_odd_even", "enable gck odd/even line use different rising/falling setting", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1E33", "gckr_ST_ln[7:0]", "gckr start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1E32", "gckr_ST_ln[14:8]", "gckr start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1E34", "en_gck_r_or", "enable gck_r output to gpo_or_2_o", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1E35", "gckr_EN_ln[7:0]", "gckr end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1E34", "gckr_EN_ln[14:8]", "gckr end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E36", "goel_pol", "goel polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E36", "en_goel_2w", "enable goel 2X width and sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E37", "goel_sh_odd[7:0]", "goel start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E36", "goel_sh_odd[13:8]", "goel start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E38", "goel_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E38", "goel_sel_f_osc_trg", "select osc clk count to trigger width", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E39", "goel_w_odd[7:0]", "width of goel", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E38", "goel_w_odd[13:8]", "width of goel", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E3A", "en_goel_odd_even", "enable goe odd/even line use different rising/falling setting", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E3B", "goel_ST_ln[7:0]", "goel start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E3A", "goel_ST_ln[14:8]", "goel start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E3D", "goel_EN_ln[7:0]", "goel end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_L", "0x1E3C", "goel_EN_ln[14:8]", "goel end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E3E", "goer_pol", "goer polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E3E", "en_goer_2w", "enable goer 2X width and sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E3F", "goer_sh_odd[7:0]", "goer start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E3E", "goer_sh_odd[13:8]", "goer start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E40", "goer_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E40", "goer_sel_f_osc_trg", "select osc clk count to trigger width", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E41", "goer_w_odd[7:0]", "width of goer", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E40", "goer_w_odd[13:8]", "width of goer", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E42", "en_goer_odd_even", "enable goe odd/even line use different rising/falling setting", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E43", "goer_ST_ln[7:0]", "goer start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E42", "goer_ST_ln[14:8]", "goer start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E45", "goer_EN_ln[7:0]", "goer end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOE_R", "0x1E44", "goer_EN_ln[14:8]", "goer end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1E46", "lsl_pol", "lsl polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1E46", "en_lsl_2w", "enable lsl 2X width and sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1E47", "lsl_sh_odd[7:0]", "lsl start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1E46", "lsl_sh_odd[13:8]", "lsl start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1E48", "lsl_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1E48", "lsl_sel_f_osc_trg", "select osc clk count to trigger width", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1E49", "lsl_w_odd[7:0]", "width of lsl", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1E48", "lsl_w_odd[13:8]", "width of lsl", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1E4A", "en_lsl_odd_even", "enable ls odd/even line use different rising/falling setting", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1E4B", "lsl_ST_ln[7:0]", "lsl start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1E4A", "lsl_ST_ln[14:8]", "lsl start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1E4C", "en_lsl_pw_save", "enable ls power saving function\n寬度4 Line 一個循環, 1,4 Line T1 , 2,3Line T2", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1E4D", "lsl_EN_ln[7:0]", "lsl end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1E4C", "lsl_EN_ln[14:8]", "lsl end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1E54", "lsr_pol", "lsr polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1E54", "en_lsr_2w", "enable lsr 2X width and sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1E55", "lsr_sh_odd[7:0]", "lsr start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1E54", "lsr_sh_odd[13:8]", "lsr start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1E56", "lsr_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1E56", "lsr_sel_f_osc_trg", "select osc clk count to trigger width", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1E57", "lsr_w_odd[7:0]", "width of lsr", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1E56", "lsr_w_odd[13:8]", "width of lsr", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1E58", "en_lsr_odd_even", "enable ls odd/even line use different rising/falling setting", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1E59", "lsr_ST_ln[7:0]", "lsr start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1E58", "lsr_ST_ln[14:8]", "lsr start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1E5A", "en_lsr_pw_save", "enable ls power saving function\n寬度4 Line 一個循環, 1,4 Line T1 , 2,3Line T2", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1E5B", "lsr_EN_ln[7:0]", "lsr end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1E5A", "lsr_EN_ln[14:8]", "lsr end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x1E62", "gsp3_pol", "gsp3 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x1E62", "en_gsp3_2w", "enable gsp3 2X sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x1E63", "gsp3_sh[7:0]", "gsp3 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x1E62", "gsp3_sh[13:8]", "gsp3 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x1E64", "gsp3_w[11:8]", "width of gsp3 (line base)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x1E65", "gsp3_w[7:0]", "width of gsp3 (line base)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x1E66", "en_gsp3_or", "enable gsp3 output to gpo_or_2_o", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x1E67", "gsp3_ST_ln[7:0]", "gsp3 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x1E66", "gsp3_ST_ln[14:8]", "gsp3 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x1E69", "gsp3_ST_ln_twice[7:0]", "gsp3 start vertical line for twice output", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x1E68", "gsp3_ST_ln_twice[14:8]", "gsp3 start vertical line for twice output", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x1E6A", "gsp3_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x1E6A", "gsp3_sel_f_osc_trg", "select osc clk count to trigger falling position", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x1E6B", "gsp3_f[7:0]", "gsp3 falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x1E6A", "gsp3_f[13:8]", "gsp3 falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH", "0x1E6C", "inv_disch", "disch polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH", "0x1E6D", "disch_r[7:0]", "disch start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH", "0x1E6C", "disch_r[13:8]", "disch start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH", "0x1E6E", "disch_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH", "0x1E6E", "disch_sel_f_osc_trg", "select osc clk count to trigger falling position", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH", "0x1E6F", "disch_f[7:0]", "disch falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH", "0x1E6E", "disch_f[13:8]", "disch falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH", "0x1E71", "ln_disch_s[7:0]", "disch start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH", "0x1E70", "ln_disch_s[14:8]", "disch start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH", "0x1E73", "ln_disch_e[7:0]", "disch end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH", "0x1E72", "ln_disch_e[14:8]", "disch end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD/GEVN", "0x1E75", "godd_gevn_fm_cnt[7:0]", "godd/geven(LC1/LC2) N frame inversion", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD/GEVN", "0x1E74", "godd_gevn_fm_cnt[9:8]", "godd/geven(LC1/LC2) N frame inversion", "1-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD/GEVN", "0x1E76", "godd_evn_sel_osc_trg", "select osc clk count to trigger toggle position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD/GEVN", "0x1E77", "ln_godd_evn[7:0]", "godd / geven toggle line count", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD/GEVN", "0x1E76", "ln_godd_evn[14:8]", "godd / geven toggle line count", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD/GEVN", "0x1E78", "en_lgd_eo", "1 : GODD output LGD simple-GIP mode signal PVDD_EO\n GEVN output LGD simple-GIP mode signal PVDD_OE", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD/GEVN", "0x1E79", "godd_evn_tog[7:0]", "godd/gevn (LC1/LC2) falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD/GEVN", "0x1E78", "godd_evn_tog[13:8]", "godd/gevn (LC1/LC2) falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD/GEVN", "0x1E7B", "godd_evn_intv[7:0]", "godd/gevn (LC1/LC2) rising position (clk domain)\nrising = falling + interval", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD/GEVN", "0x1E7A", "godd_evn_intv[13:8]", "godd/gevn (LC1/LC2) rising position (clk domain)\nrising = falling + interval", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD2/GEVN2", "0x1E7D", "godd_gevn2_fm_cnt[7:0]", "godd2/geven2(LC3/LC4) N frame inversion", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD2/GEVN2", "0x1E7C", "godd_gevn2_fm_cnt[9:8]", "godd2/geven2(LC3/LC4) N frame inversion", "1-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD2/GEVN2", "0x1E7E", "godd_evn2_sel_osc_trg", "select osc clk count to trigger toggle position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD2/GEVN2", "0x1E7F", "ln_godd_evn2[7:0]", "godd2 / geven2 toggle line count", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD2/GEVN2", "0x1E7E", "ln_godd_evn2[14:8]", "godd2 / geven2 toggle line count", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD2/GEVN2", "0x1E80", "en_lgd_eo2", "1 : GODD2 output LGD simple-GIP mode signal PVDD_EO2\n GEVN2 output LGD simple-GIP mode signal PVDD_OE2", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD2/GEVN2", "0x1E80", "godd_even_po_high_dly", "1: godd, geven, godd2, geven2 power mask high will delay 1T after dur_ctrl_sel trans to L", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD2/GEVN2", "0x1E81", "godd_evn2_tog[7:0]", "godd2/gevn2 (LC3/LC4) falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD2/GEVN2", "0x1E80", "godd_evn2_tog[13:8]", "godd2/gevn2 (LC3/LC4) falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD2/GEVN2", "0x1E83", "godd_evn2_intv[7:0]", "godd2/gevn2 (LC3/LC4) rising position (clk domain)\nrising = falling + interval", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GODD2/GEVN2", "0x1E82", "godd_evn2_intv[13:8]", "godd2/gevn2 (LC3/LC4) rising position (clk domain)\nrising = falling + interval", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E84", "INIT_GSP1[3:0]", "frame count of gsp1 power-on mask", "7-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E84", "INIT_GSP2[3:0]", "frame count of gsp2 power-on mask", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E85", "sel_vs", "select vs type for power-on mask\n3'b000 : 1 frame\n3'b001 : 2 frame \n3'b010 : 4 frame\n3'b011 : 8 frame\n3'b1xx : 16 frame", "6-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E85", "INIT_FS[3:0]", "frame count of fs power-on mask", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E86", "INIT_GOE[3:0]", "frame count of goe power-on mask", "7-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E86", "INIT_GCK[3:0]", "frame count of gck power-on mask", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E87", "INIT_GSP3[3:0]", "frame count of gsp3 power-on mask", "7-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E87", "INIT_LS[3:0]", "frame count of ls power-on mask", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E88", "INIT_REV[3:0]", "frame count of rev power-on mask", "7-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E88", "INIT_GSP_LED[3:0]", "frame count of gsp_led power-on mask", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E89", "INIT_DISCH[3:0]", "frame count of DISCH power-on mask", "7-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E89", "INIT_LC[3:0]", "frame count of LC power-on mask", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "Abnormalmask", "0x1E8A", "gsp_ab_fm_cnt[1:0]", "mask frame count for gsp1~3, fs, gsp_led\n0: disable abnormal mask", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "Abnormalmask", "0x1E8A", "gck_ab_fm_cnt[1:0]", "mask frame count for gckl, gckr\n0: disable abnormal mask", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "Abnormalmask", "0x1E8A", "ls_ab_fm_cnt[1:0]", "mask frame count for lsl, lsr\n0: disable abnormal mask", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "Abnormalmask", "0x1E8A", "rev_ab_fm_cnt[1:0]", "mask frame count for rev1, rev2\n0: disable abnormal mask", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "Abnormalmask", "0x1E8B", "disch_ab_fm_cnt[1:0]", "mask frame count for disch\n0: disable abnormal mask", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "Abnormalmask", "0x1E8B", "lc_ab_fm_cnt[1:0]", "mask frame count for lc\n0: disable abnormal mask", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "Abnormalmask", "0x1E8B", "goa_odd_ab_fm_cnt[1:0]", "mask frame count for odd goa\n0: disable abnormal mask", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "Abnormalmask", "0x1E8B", "goa_even_ab_fm_cnt[1:0]", "mask frame count for even goa\n0: disable abnormal mask", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "Abnormalmask", "0x1E8C", "oe_ab_msk_fm_cnt[3:0]", "mask oe frame count when tx abnormal\n0: disable abnormal mask", "7-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "Abnormalmask", "0x1E8C", "ab_godd_high", "abnormal mask LC1 high", "3", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "Abnormalmask", "0x1E8C", "ab_gevn_high", "abnormal mask LC2 high", "2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E8C", "po_godd", "power on mask high/low of LC1", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E8C", "po_gevn", "power on mask high/low of LC2", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1E8D", "ab_godd2_high", "abnormal mask LC3 high", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1E8D", "ab_gevn2_high", "abnormal mask LC4 high", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E8D", "po_godd2", "power on mask high/low of LC3", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1E8D", "po_gevn2", "power on mask high/low of LC4", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOAOR", "0x1E8D", "en_goa_clk1_or2", "enable OR2 function", "3", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOAOR", "0x1E8D", "en_goa_clk2_or2", "enable OR2 function", "2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOAOR", "0x1E8D", "en_goa_clk3_or2", "enable OR2 function", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOAOR", "0x1E8D", "en_goa_clk4_or2", "enable OR2 function", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOAOR", "0x1E8E", "en_goa_clk5_or2", "enable OR2 function", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOAOR", "0x1E8E", "en_goa_clk6_or2", "enable OR2 function", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOAOR", "0x1E8E", "en_goa_clk7_or2", "enable OR2 function", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOAOR", "0x1E8E", "en_goa_clk8_or2", "enable OR2 function", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOAOR", "0x1E8E", "en_goa_clk9_or2", "enable OR2 function", "3", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOAOR", "0x1E8E", "en_goa_clk10_or2", "enable OR2 function", "2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOAOR", "0x1E8E", "en_goa_clk11_or2", "enable OR2 function", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOAOR", "0x1E8E", "en_goa_clk12_or2", "enable OR2 function", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "iSPmask", "0x1E8F", "sel_vs", "OE / GOA masked while iSP unlock\n0: Disable\n1: Enable", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "iSPmask", "0x1E8F", "isp_oe_mask_type", "OE mask type selection while iSP unlock\n0: OE masked by line\n1: OE masked by frame", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "iSPmask", "0x1E8F", "isp_ls_mask_high", "0 : ls oulsut normal\n1 : ls oulsut high", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "iSPmask", "0x1E8F", "isp_ls_unlock_en", "ls oulsut type while isp unlock\n0 : ls oulsut low\n1 : ls outout normal", "4", "RW", "0x00", "0x01", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "iSPmask", "0x1E8F", "isp_oe_mask_cnt[2:0]", "OE mask line count\n0 : only mask when unlock\n1 : mask at unlock region and 1st line at lock region\n2 : mask at unlock region and 2nd line at lock region\n3 : mask at unlock region and 3rd line at lock region", "2-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1E90", "goa_clk1_pol", "goa_clk1 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1E90", "en_goa_clk1_2w", "enable goa_clk1 2X width and sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1E91", "goa_clk1_sh[7:0]", "goa_clk1 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1E90", "goa_clk1_sh[13:8]", "goa_clk1 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1E92", "goa_clk1_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1E93", "goa_clk1_w[7:0]", "width of goa_clk1", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1E92", "goa_clk1_w[14:8]", "width of goa_clk1", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1E94", "goa_clk1_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1E95", "goa_clk1_ST_ln[7:0]", "goa_clk1 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1E94", "goa_clk1_ST_ln[14:8]", "goa_clk1 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1E96", "en_goa_clk1_or", "enable goa_clk1 output to gpo_or_1_o", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1E97", "goa_clk1_EN_ln[7:0]", "goa_clk1 end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1E96", "goa_clk1_EN_ln[14:8]", "goa_clk1 end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1E98", "goa_clk2_pol", "goa_clk2 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1E98", "en_goa_clk2_2w", "enable goa_clk2 2X width and sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1E99", "goa_clk2_sh[7:0]", "goa_clk2 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1E98", "goa_clk2_sh[13:8]", "goa_clk2 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1E9A", "goa_clk2_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1E9B", "goa_clk2_w[7:0]", "width of goa_clk2", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1E9A", "goa_clk2_w[14:8]", "width of goa_clk2", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1E9C", "goa_clk2_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1E9D", "goa_clk2_ST_ln[7:0]", "goa_clk2 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1E9C", "goa_clk2_ST_ln[14:8]", "goa_clk2 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1E9E", "en_goa_clk2_or", "enable goa_clk2 output to gpo_or_2_o", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1E9F", "goa_clk2_EN_ln[7:0]", "goa_clk2 end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1E9E", "goa_clk2_EN_ln[14:8]", "goa_clk2 end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1EA0", "goa_clk3_pol", "goa_clk3 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1EA0", "en_goa_clk3_2w", "enable goa_clk3 2X width and sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1EA1", "goa_clk3_sh[7:0]", "goa_clk3 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1EA0", "goa_clk3_sh[13:8]", "goa_clk3 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1EA2", "goa_clk3_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1EA3", "goa_clk3_w[7:0]", "width of goa_clk3", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1EA2", "goa_clk3_w[14:8]", "width of goa_clk3", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1EA4", "goa_clk3_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1EA5", "goa_clk3_ST_ln[7:0]", "goa_clk3 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1EA4", "goa_clk3_ST_ln[14:8]", "goa_clk3 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1EA7", "goa_clk3_EN_ln[7:0]", "goa_clk3 end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1EA6", "goa_clk3_EN_ln[14:8]", "goa_clk3 end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1EA8", "goa_clk4_pol", "goa_clk4 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1EA8", "en_goa_clk4_2w", "enable goa_clk4 2X width and sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1EA9", "goa_clk4_sh[7:0]", "goa_clk4 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1EA8", "goa_clk4_sh[13:8]", "goa_clk4 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1EAA", "goa_clk4_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1EAB", "goa_clk4_w[7:0]", "width of goa_clk4", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1EAA", "goa_clk4_w[14:8]", "width of goa_clk4", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1EAC", "goa_clk4_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1EAD", "goa_clk4_ST_ln[7:0]", "goa_clk4 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1EAC", "goa_clk4_ST_ln[14:8]", "goa_clk4 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1EAF", "goa_clk4_EN_ln[7:0]", "goa_clk4 end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1EAE", "goa_clk4_EN_ln[14:8]", "goa_clk4 end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1EB0", "goa_clk5_pol", "goa_clk5 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1EB0", "en_goa_clk5_2w", "enable goa_clk5 2X width and sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1EB1", "goa_clk5_sh[7:0]", "goa_clk5 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1EB0", "goa_clk5_sh[13:8]", "goa_clk5 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1EB2", "goa_clk5_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1EB3", "goa_clk5_w[7:0]", "width of goa_clk5", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1EB2", "goa_clk5_w[14:8]", "width of goa_clk5", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1EB4", "goa_clk5_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1EB5", "goa_clk5_ST_ln[7:0]", "goa_clk5 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1EB4", "goa_clk5_ST_ln[14:8]", "goa_clk5 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1EB7", "goa_clk5_EN_ln[7:0]", "goa_clk5 end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1EB6", "goa_clk5_EN_ln[14:8]", "goa_clk5 end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1EB8", "goa_clk6_pol", "goa_clk6 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1EB8", "en_goa_clk6_2w", "enable goa_clk6 2X width and sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1EB9", "goa_clk6_sh[7:0]", "goa_clk6 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1EB8", "goa_clk6_sh[13:8]", "goa_clk6 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1EBA", "goa_clk6_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1EBB", "goa_clk6_w[7:0]", "width of goa_clk6", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1EBA", "goa_clk6_w[14:8]", "width of goa_clk6", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1EBC", "goa_clk6_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1EBD", "goa_clk6_ST_ln[7:0]", "goa_clk6 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1EBC", "goa_clk6_ST_ln[14:8]", "goa_clk6 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1EBF", "goa_clk6_EN_ln[7:0]", "goa_clk6 end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1EBE", "goa_clk6_EN_ln[14:8]", "goa_clk6 end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1EC0", "INIT_GOA_odd[3:0]", "frame count of odd goa power-on mask", "7-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "poweronmask", "0x1EC0", "INIT_GOA_even[3:0]", "frame count of even goa power-on mask", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1EC2", "po_goa1_high", "1 : power-on mask high", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1EC2", "po_goa2_high", "1 : power-on mask high", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1EC2", "po_goa3_high", "1 : power-on mask high", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1EC2", "po_goa4_high", "1 : power-on mask high", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1EC2", "po_goa5_high", "1 : power-on mask high", "3", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1EC2", "po_goa6_high", "1 : power-on mask high", "2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1EC2", "po_goa7_high", "1 : power-on mask high", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1EC2", "po_goa8_high", "1 : power-on mask high", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1EC4", "gckl_sh_even[7:0]", "gckl start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1EC3", "gckl_sh_even[13:8]", "gckl start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1EC6", "gckl_w_even[7:0]", "width of gckl", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_L", "0x1EC5", "gckl_w_even[13:8]", "width of gckl", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1EC8", "gckr_sh_even[7:0]", "gckr start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1EC7", "gckr_sh_even[13:8]", "gckr start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1ECA", "gckr_w_even[7:0]", "width of gckr", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GCK_R", "0x1EC9", "gckr_w_even[13:8]", "width of gckr", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1ECB", "goa_clk1_frm_st_high", "value between vs and ST", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1ECB", "goa_clk1_frm_end_high", "value between EN and vs", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1ECB", "goa1_type[4:0]", "GOA1 phase number", "4-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1ECC", "goa_clk2_frm_st_high", "1: initial value when hit vs", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1ECC", "goa_clk2_frm_end_high", "value between EN and vs", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1ECC", "goa2_type[4:0]", "GOA2 phase number", "4-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1ECD", "goa_clk3_frm_st_high", "1: initial value when hit vs", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1ECD", "goa_clk3_frm_end_high", "value between EN and vs", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1ECD", "goa3_type[4:0]", "GOA3 phase number", "4-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1ECE", "goa_clk4_frm_st_high", "1: initial value when hit vs", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1ECE", "goa_clk4_frm_end_high", "value between EN and vs", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1ECE", "goa4_type[4:0]", "GOA4 phase number", "4-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1ECF", "goa_clk5_frm_st_high", "1: initial value when hit vs", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1ECF", "goa_clk5_frm_end_high", "value between EN and vs", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1ECF", "goa5_type[4:0]", "GOA5 phase number", "4-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH2", "0x1ED0", "inv_disch2", "disch2 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH2", "0x1ED1", "disch2_r[7:0]", "disch2 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH2", "0x1ED0", "disch2_r[13:8]", "disch2 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH2", "0x1ED2", "disch2_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH2", "0x1ED2", "disch2_sel_f_osc_trg", "select osc clk count to trigger falling position", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH2", "0x1ED3", "disch2_f[7:0]", "disch2 falling position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH2", "0x1ED2", "disch2_f[13:8]", "disch2 falling position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH2", "0x1ED5", "ln_disch2_s[7:0]", "disch2 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH2", "0x1ED4", "ln_disch2_s[14:8]", "disch2 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH2", "0x1ED7", "ln_disch2_e[7:0]", "disch2 end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "DISCH2", "0x1ED6", "ln_disch2_e[14:8]", "disch2 end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1ED8", "goa_clk6_frm_st_high", "1: initial value when hit vs", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1ED8", "goa_clk6_frm_end_high", "value between EN and vs", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1ED8", "goa6_type[4:0]", "GOA6 phase number", "4-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1ED9", "goa_clk7_frm_st_high", "1: initial value when hit vs", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1ED9", "goa_clk7_frm_end_high", "value between EN and vs", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1ED9", "goa7_type[4:0]", "GOA7 phase number", "4-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1EDA", "goa_clk8_frm_st_high", "1: initial value when hit vs", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1EDA", "goa_clk8_frm_end_high", "value between EN and vs", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1EDA", "goa8_type[4:0]", "GOA8 phase number", "4-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1EDB", "goa_clk9_frm_st_high", "1: initial value when hit vs", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1EDB", "goa_clk9_frm_end_high", "value between EN and vs", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1EDB", "goa9_type[4:0]", "GOA9 phase number", "4-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1EDC", "goa_clk10_frm_st_high", "1: initial value when hit vs", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1EDC", "goa_clk10_frm_end_high", "value between EN and vs", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1EDC", "goa10_type[4:0]", "GOA10 phase number", "4-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1EDD", "goa_clk11_frm_st_high", "1: initial value when hit vs", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1EDD", "goa11_type[4:0]", "GOA11 phase number", "4-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1EDE", "goa_clk12_frm_st_high", "1: initial value when hit vs", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1EDE", "goa_clk12_frm_end_high", "value between EN and vs", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1EDE", "goa12_type[4:0]", "GOA12 phase number", "4-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1EE3", "lsl_sh_even[7:0]", "lsl start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1EE2", "lsl_sh_even[13:8]", "lsl start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1EE5", "lsl_w_even[7:0]", "width of lsl", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_L", "0x1EE4", "lsl_w_even[13:8]", "width of lsl", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1EE7", "lsr_sh_even[7:0]", "lsr start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1EE6", "lsr_sh_even[13:8]", "lsr start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1EE9", "lsr_w_even[7:0]", "width of lsr", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_R", "0x1EE8", "lsr_w_even[13:8]", "width of lsr", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x1EEE", "gsp_led_pol", "gsp_led polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x1EEE", "en_gsp_led_2w", "enable gsp_led 2X sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x1EEF", "gsp_led_sh[7:0]", "gsp_led start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x1EEE", "gsp_led_sh[13:8]", "gsp_led start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x1EF0", "en_gsp_led_or", "enable gsp_led OR gsp2. output to gpo_or_2_o", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x1EF0", "gsp_led_sel_r_osc_trg", "select osc clk count to trigger start position", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x1EF0", "gsp_led_sel_f_osc_trg", "select osc clk count to trigger falling position", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x1EF0", "gsp_led_last_region_en", "1: gsp & last region (last region rising delay)", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x1EF0", "gsp_led_w[11:8]", "width of gsp_led", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x1EF1", "gsp_led_w[7:0]", "width of gsp_led", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x1EF3", "gsp_led_ST_ln[7:0]", "gsp_led start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x1EF2", "gsp_led_ST_ln[14:8]", "gsp_led start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x1EF7", "gsp_led_ST_ln_twice[7:0]", "gsp_led start vertical line for twice output", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x1EF6", "gsp_led_ST_ln_twice[14:8]", "gsp_led start vertical line for twice output", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1EF8", "goa_clk7_pol", "goa_clk7 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1EF8", "en_goa_clk7_2w", "enable goa_clk7 2X width and sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1EF9", "goa_clk7_sh[7:0]", "goa_clk7 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1EF8", "goa_clk7_sh[13:8]", "goa_clk7 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1EFA", "goa_clk7_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1EFB", "goa_clk7_w[7:0]", "width of goa_clk7", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1EFA", "goa_clk7_w[14:8]", "width of goa_clk7", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1EFC", "goa_clk7_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1EFD", "goa_clk7_ST_ln[7:0]", "goa_clk7 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1EFC", "goa_clk7_ST_ln[14:8]", "goa_clk7 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1EFE", "en_goa_clk7_or", "enable goa_clk7 OR and output to goa_clk12", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1EFF", "goa_clk7_EN_ln[7:0]", "goa_clk7 end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1EFE", "goa_clk7_EN_ln[14:8]", "goa_clk7 end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1F15", "po_gsp1_high", "1 : power-on mask high", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1F15", "po_gsp2_high", "1 : power-on mask high", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1F15", "po_gsp3_high", "1 : power-on mask high", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1F15", "po_fs_high", "1 : power-on mask high", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1F15", "po_gsp_led_high", "1 : power-on mask high", "3", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1F15", "po_disch1_high", "1 : power-on mask high", "2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1F15", "po_disch2_high", "1 : power-on mask high", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1F15", "po_goel_high", "1 : power-on mask high", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1F16", "po_goer_high", "1 : power-on mask high", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1F16", "po_gckl_high", "1 : power-on mask high", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1F16", "po_gckr_high", "1 : power-on mask high", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1F16", "po_lsl_high", "1 : power-on mask high", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1F16", "po_lsr_high", "1 : power-on mask high", "3", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1F16", "po_rev1_high", "1 : power-on mask high", "2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "po_mask_high/low", "0x1F16", "po_rev2_high", "1 : power-on mask high", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F17", "ab_gsp1_high", "1 : abnormal mask high", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F17", "ab_gsp2_high", "1 : abnormal mask high", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F17", "ab_gsp3_high", "1 : abnormal mask high", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F17", "ab_fs_high", "1 : abnormal mask high", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F17", "ab_gsp_led_high", "1 : abnormal mask high", "3", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F17", "ab_disch1_high", "1 : abnormal mask high", "2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F17", "ab_disch2_high", "1 : abnormal mask high", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F17", "ab_goel_high", "1 : abnormal mask high", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F18", "ab_goer_high", "1 : abnormal mask high", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F18", "ab_gckl_high", "1 : abnormal mask high", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F18", "ab_gckr_high", "1 : abnormal mask high", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F18", "ab_lsl_high", "1 : abnormal mask high", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F18", "ab_lsr_high", "1 : abnormal mask high", "3", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F18", "ab_rev1_high", "1 : abnormal mask high", "2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F18", "ab_rev2_high", "1 : abnormal mask high", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F19", "ab_goa1_high", "1 : abnormal mask high", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F19", "ab_goa2_high", "1 : abnormal mask high", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F19", "ab_goa3_high", "1 : abnormal mask high", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F19", "ab_goa4_high", "1 : abnormal mask high", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F19", "ab_goa5_high", "1 : abnormal mask high", "3", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F19", "ab_goa6_high", "1 : abnormal mask high", "2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F19", "ab_goa7_high", "1 : abnormal mask high", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "ab_mask_high/low", "0x1F19", "ab_goa8_high", "1 : abnormal mask high", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F46", "goa_clk12_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F46", "goa_clk12_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F46", "goa_clk12_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F46", "goa_clk12_pol", "goa_clk12 polarity 1: inverse", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F46", "en_goa_clk12_2w", "enable goa_clk12 2X width and sh", "3", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F46", "goa_clk12_sel_r_osc_trg", "select osc clk count to trigger start position", "2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F46", "goa_clk12_sel_f_osc_trg", "select osc clk count to trigger width", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F46", "po_goa12_high", "", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F4A", "ab_goa12_high", "", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F4B", "goa_clk12_sh_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F4A", "goa_clk12_sh_table2[13:8]", "", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F4D", "goa_clk12_sh[7:0]", "goa_clk12 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F4C", "goa_clk12_sh[13:8]", "goa_clk12 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F4F", "goa_clk12_w_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F4E", "goa_clk12_w_table2[14:8]", "", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F51", "goa_clk12_w[7:0]", "width of goa_clk12", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F50", "goa_clk12_w[14:8]", "width of goa_clk12", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F53", "goa_clk12_ST_ln[7:0]", "goa_clk12 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F52", "goa_clk12_ST_ln[14:8]", "goa_clk12 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F55", "goa_clk12_EN_ln[7:0]", "goa_clk12 end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F54", "goa_clk12_EN_ln[14:8]", "goa_clk12 end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F57", "goa_clk12_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F56", "goa_clk12_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F58", "goa_clk12_patt[23:16]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F5A", "goa_clk12_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA12", "0x1F59", "goa_clk12_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F5B", "goa_clk11_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F5B", "goa_clk11_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F5B", "goa_clk11_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F5B", "goa_clk11_pol", "goa_clk11 polarity 1: inverse", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F5B", "en_goa_clk11_2w", "enable goa_clk11 2X width and sh", "3", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F5B", "goa_clk11_sel_r_osc_trg", "select osc clk count to trigger start position", "2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F5B", "goa_clk11_sel_f_osc_trg", "select osc clk count to trigger width", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F5B", "po_goa11_high", "", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F5F", "ab_goa11_high", "", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F60", "goa_clk11_sh_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F5F", "goa_clk11_sh_table2[13:8]", "", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F62", "goa_clk11_sh[7:0]", "goa_clk11 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F61", "goa_clk11_sh[13:8]", "goa_clk11 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F64", "goa_clk11_w_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F63", "goa_clk11_w_table2[14:8]", "", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F66", "goa_clk11_w[7:0]", "width of goa_clk11", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F65", "goa_clk11_w[14:8]", "width of goa_clk11", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F68", "goa_clk11_ST_ln[7:0]", "goa_clk11 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F67", "goa_clk11_ST_ln[14:8]", "goa_clk11 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F69", "en_goa_clk11_or", "enable goa_clk11 OR and output to goa_clk12", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F6A", "goa_clk11_EN_ln[7:0]", "goa_clk11 end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F69", "goa_clk11_EN_ln[14:8]", "goa_clk11 end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F6C", "goa_clk11_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F6B", "goa_clk11_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F6D", "goa_clk11_patt[23:16]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F6F", "goa_clk11_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA11", "0x1F6E", "goa_clk11_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F70", "goa_clk10_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F70", "goa_clk10_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F70", "goa_clk10_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F70", "goa_clk10_pol", "goa_clk10 polarity 1: inverse", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F70", "en_goa_clk10_2w", "enable goa_clk10 2X width and sh", "3", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F70", "goa_clk10_sel_r_osc_trg", "select osc clk count to trigger start position", "2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F70", "goa_clk10_sel_f_osc_trg", "select osc clk count to trigger width", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F70", "po_goa10_high", "", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F74", "ab_goa10_high", "", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F75", "goa_clk10_sh_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F74", "goa_clk10_sh_table2[13:8]", "", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F77", "goa_clk10_sh[7:0]", "goa_clk10 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F76", "goa_clk10_sh[13:8]", "goa_clk10 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F79", "goa_clk10_w_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F78", "goa_clk10_w_table2[14:8]", "", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F7B", "goa_clk10_w[7:0]", "width of goa_clk10", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F7A", "goa_clk10_w[14:8]", "width of goa_clk10", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F7D", "goa_clk10_ST_ln[7:0]", "goa_clk10 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F7C", "goa_clk10_ST_ln[14:8]", "goa_clk10 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F7E", "en_goa_clk10_or", "enable goa_clk10 OR and output to goa_clk12", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F7F", "goa_clk10_EN_ln[7:0]", "goa_clk10 end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F7E", "goa_clk10_EN_ln[14:8]", "goa_clk10 end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F81", "goa_clk10_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F80", "goa_clk10_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F82", "goa_clk10_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F84", "goa_clk10_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA10", "0x1F83", "goa_clk10_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F90", "goa_clk9_en_LHB_mask", "0 : normal output\n1 : enable LHB touch region mask", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F90", "goa_clk9_en_LHB_output", "0 : LHB touch region mask signal\n1 : enable LHB touch region output signal", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F90", "goa_clk9_LHB_msk_high", "0 : LHB touch region mask signal low\n1 : LHB touch region mask signal high", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F90", "goa_clk9_pol", "goa_clk9 polarity 1: inverse", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F90", "en_goa_clk9_2w", "enable goa_clk9 2X width and sh", "3", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F90", "goa_clk9_sel_r_osc_trg", "select osc clk count to trigger start position", "2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F90", "goa_clk9_sel_f_osc_trg", "select osc clk count to trigger width", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F90", "po_goa9_high", "", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F94", "ab_goa9_high", "", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F95", "goa_clk9_sh_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F94", "goa_clk9_sh_table2[13:8]", "", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F97", "goa_clk9_sh[7:0]", "goa_clk9 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F96", "goa_clk9_sh[13:8]", "goa_clk9 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F99", "goa_clk9_w_table2[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F98", "goa_clk9_w_table2[14:8]", "", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F9B", "goa_clk9_w[7:0]", "width of goa_clk9", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F9A", "goa_clk9_w[14:8]", "width of goa_clk9", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F9D", "goa_clk9_ST_ln[7:0]", "goa_clk9 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F9C", "goa_clk9_ST_ln[14:8]", "goa_clk9 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F9E", "en_goa_clk9_or", "enable goa_clk9 OR and output to goa_clk12", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F9F", "goa_clk9_EN_ln[7:0]", "goa_clk9 end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1F9E", "goa_clk9_EN_ln[14:8]", "goa_clk9 end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1FA1", "goa_clk9_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1FA0", "goa_clk9_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1FA2", "goa_clk9_patt[23:16]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1FA4", "goa_clk9_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA9", "0x1FA3", "goa_clk9_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FD0", "goa_clk8_pol", "goa_clk8 polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FD0", "en_goa_clk8_2w", "enable goa_clk8 2X width and sh", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FD1", "goa_clk8_sh[7:0]", "goa_clk8 start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FD0", "goa_clk8_sh[13:8]", "goa_clk8 start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FD2", "goa_clk8_sel_r_osc_trg", "select osc clk count to trigger start position", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FD3", "goa_clk8_w[7:0]", "width of goa_clk8", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FD2", "goa_clk8_w[14:8]", "width of goa_clk8", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FD4", "goa_clk8_sel_f_osc_trg", "select osc clk count to trigger width", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FD5", "goa_clk8_ST_ln[7:0]", "goa_clk8 start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FD4", "goa_clk8_ST_ln[14:8]", "goa_clk8 start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FD6", "en_goa_clk8_or", "enable goa_clk8 OR and output to goa_clk12", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FD7", "goa_clk8_EN_ln[7:0]", "goa_clk8 end vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FD6", "goa_clk8_EN_ln[14:8]", "goa_clk8 end vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1FD9", "goa_clk1_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1FD8", "goa_clk1_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1FDA", "goa_clk1_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1FDC", "goa_clk1_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA1", "0x1FDB", "goa_clk1_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1FDE", "goa_clk2_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1FDD", "goa_clk2_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1FDF", "goa_clk2_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1FE1", "goa_clk2_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA2", "0x1FE0", "goa_clk2_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1FE3", "goa_clk3_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1FE2", "goa_clk3_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1FE4", "goa_clk3_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1FE6", "goa_clk3_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA3", "0x1FE5", "goa_clk3_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1FE8", "goa_clk4_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1FE7", "goa_clk4_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1FE9", "goa_clk4_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1FEB", "goa_clk4_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA4", "0x1FEA", "goa_clk4_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1FED", "goa_clk5_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1FEC", "goa_clk5_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1FEE", "goa_clk5_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1FF0", "goa_clk5_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA5", "0x1FEF", "goa_clk5_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1FF2", "goa_clk6_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1FF1", "goa_clk6_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1FF3", "goa_clk6_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1FF5", "goa_clk6_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA6", "0x1FF4", "goa_clk6_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1FF7", "goa_clk7_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1FF6", "goa_clk7_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1FF8", "goa_clk7_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1FFA", "goa_clk7_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA7", "0x1FF9", "goa_clk7_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FFC", "goa_clk8_msk_h[7:0]", "goa initial pixel mask", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FFB", "goa_clk8_msk_h[13:8]", "goa initial pixel mask", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FFD", "goa_clk8_patt[23:16]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FFF", "goa_clk8_patt[7:0]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GOA8", "0x1FFE", "goa_clk8_patt[15:8]", "use patt count to generate goa clk", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2006", "Ls_clk_ST[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2005", "Ls_clk_ST[14:8]", "", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2007", "ab_ls_clk_high", "", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2008", "Ls_clk_EN[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2007", "Ls_clk_EN[14:8]", "", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2009", "ab_msk_ls_clk", "", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x200F", "Ls_lead_r[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x200E", "Ls_lead_r[15:8]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2011", "Ls_lead_f[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2010", "Ls_lead_f[15:8]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2012", "Ls_clk_half_width", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2013", "Ls_ST_value", "", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2013", "LS_EN_value", "", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2013", "LS_pol", "", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2013", "po_ls_clk_high", "", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2013", "INIT_LS_CLK", "", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2014", "ls_clk_sel_r_osc_trg", "", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "LS_CLK", "0x2014", "ls_clk_sel_f_osc_trg", "", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x2083", "adjust_fm[7:0]", "Adjust GSP at each N frames. \nusefule when en_adjust_gsp = 1", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x2084", "rst_adj_fm[7:0]", "After M frames, reset gsp_ST_ln to initial value\nusefule when en_adjust_gsp = 1", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x2086", "gsp1_f[7:0]", "gsp1 falling position", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x2085", "gsp1_f[13:8]", "gsp1 falling position", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x2088", "gsp2_f[7:0]", "gsp2 falling position", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x2087", "gsp2_f[13:8]", "gsp2 falling position", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x208B", "adj_gsp_st_ln[3:0]", "adjust gsp_ST_ln", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x208C", "en_adjust_gsp", "1 : enable adjust gsp_ST_ln", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x208C", "en_adjust_sh", "enable adjust GCLK/GOE rising position", "3", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x208C", "en_adjust_w", "enable adjust GCLK/GOE width", "2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x208D", "adjust_ln[7:0]", "Adjust GCLK/GOE at each N lines. \nEnable adjust function when adjust_ln[9:0] > 0", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x208C", "adjust_ln[9:8]", "Adjust GCLK/GOE at each N lines. \nEnable adjust function when adjust_ln[9:0] > 0", "1-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x22A9", "gsp1_w_twice[11:4]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x22AA", "gsp1_w_twice[3:0]", "", "7-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x22AA", "gsp1_w_third[11:8]", "", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x22AB", "gsp1_w_third[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x22AC", "gsp1_ST_ln_third[14:8]", "", "6-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP1", "0x22AD", "gsp1_ST_ln_third[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x22AE", "gsp2_w_twice[11:4]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x22AF", "gsp2_w_twice[3:0]", "", "7-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x22AF", "gsp2_w_third[11:8]", "", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x22B0", "gsp2_w_third[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x22B1", "gsp2_ST_ln_third[14:8]", "", "6-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP2", "0x22B2", "gsp2_ST_ln_third[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x22B3", "gsp3_w_twice[11:4]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x22B4", "gsp3_w_twice[3:0]", "", "7-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x22B4", "gsp3_w_third[11:8]", "", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x22B5", "gsp3_w_third[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x22B6", "gsp3_ST_ln_third[14:8]", "", "6-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP3", "0x22B7", "gsp3_ST_ln_third[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x22B8", "gsp_led_w_twice[11:4]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x22B9", "gsp_led_w_twice[3:0]", "", "7-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x22B9", "gsp_led_w_third[11:8]", "", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x22BA", "gsp_led_w_third[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x22BB", "gsp_led_ST_ln_third[14:8]", "", "6-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "GSP_LED", "0x22BC", "gsp_led_ST_ln_third[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "FS", "0x1E14", "fs_pol", "fs polarity 1: inverse", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "FS", "0x1E15", "fs_sh[7:0]", "fs start position (clk domain)", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "FS", "0x1E14", "fs_sh[13:8]", "fs start position (clk domain)", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "FS", "0x1E16", "fs_w[11:8]", "width of fs", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "FS", "0x1E17", "fs_w[7:0]", "width of fs", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "FS", "0x1E19", "fs_ST_ln[7:0]", "fs start vertical line", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "FS", "0x1E18", "fs_ST_ln[14:8]", "fs start vertical line", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "FS", "0x208A", "fs_f[7:0]", "fs falling position", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "CTG(0x1E00~0x22FF)", "FS", "0x2089", "fs_f[13:8]", "fs falling position", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6400", "EXTEND_PXL_EN", "Extend pixel function control\n1'b0 : disable\n1'b1 : enable", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6400", "EXTEND_PXL_U", "Extend pixel number on up direction out of the display region\n1'b0 : 4 pixels\n1'b1 : 8 pixels", "5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6400", "EXTEND_PXL_D", "Extend pixel number on down direction out of the display region\n1'b0 : 4 pixels\n1'b1 : 8 pixels", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6400", "EXTEND_PXL_L[1:0]", "Extend pixel number on left direction out of the display region\n2'b00 : 4 pixels\n2'b01 : 8 pixels\n2'b10 : 12 pixels\n2'b11 : 16 pixels", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6400", "EXTEND_PXL_R[1:0]", "Extend pixel number on right direction out of the display region\n2'b00 : 4 pixels\n2'b01 : 8 pixels\n2'b10 : 12 pixels\n2'b11 : 16 pixels", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6404", "Reserved", "", "7-0", "RW", "0x00", "0x08", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6407", "STEP_INTERVAL[15:8]", "Frame count (0~65535 frame) for pixel staying after each step finish.\n(The real staying time is STEP_INTERVAL * 1/frame_rate)\nEx : STEP_INTERVAL=480 for 120Hz application, the step interval is 4 seconds", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6408", "STEP_INTERVAL[7:0]", "Frame count (0~65535 frame) for pixel staying after each step finish.\n(The real staying time is STEP_INTERVAL * 1/frame_rate)\nEx : STEP_INTERVAL=480 for 120Hz application, the step interval is 4 seconds", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6410", "STAGE_0_DirCtrl[1:0]", "STAGE 0 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6410", "STAGE_0_Hsft", "STAGE 0 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6410", "STAGE_0_Vsft", "STAGE 0 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6411", "STAGE_0_Hunit[1:0]", "STAGE 0 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6411", "STAGE_0_Vunit[1:0]", "STAGE 0 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6411", "STAGE_0_StepNum[3:0]", "STAGE 0 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6412", "STAGE_1_DirCtrl[1:0]", "STAGE 1 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6412", "STAGE_1_Hsft", "STAGE 1 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6412", "STAGE_1_Vsft", "STAGE 1 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6413", "STAGE_1_Hunit[1:0]", "STAGE 1 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6413", "STAGE_1_Vunit[1:0]", "STAGE 1 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6413", "STAGE_1_StepNum[3:0]", "STAGE 1 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6414", "STAGE_2_DirCtrl[1:0]", "STAGE 2 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6414", "STAGE_2_Hsft", "STAGE 2 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6414", "STAGE_2_Vsft", "STAGE 2 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6415", "STAGE_2_Hunit[1:0]", "STAGE 2 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6415", "STAGE_2_Vunit[1:0]", "STAGE 2 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6415", "STAGE_2_StepNum[3:0]", "STAGE 2 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6416", "STAGE_3_DirCtrl[1:0]", "STAGE 3 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6416", "STAGE_3_Hsft", "STAGE 3 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6416", "STAGE_3_Vsft", "STAGE 3 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6417", "STAGE_3_Hunit[1:0]", "STAGE 3 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6417", "STAGE_3_Vunit[1:0]", "STAGE 3 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6417", "STAGE_3_StepNum[3:0]", "STAGE 3 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6418", "STAGE_4_DirCtrl[1:0]", "STAGE 4 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6418", "STAGE_4_Hsft", "STAGE 4 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6418", "STAGE_4_Vsft", "STAGE 4 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6419", "STAGE_4_Hunit[1:0]", "STAGE 4 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6419", "STAGE_4_Vunit[1:0]", "STAGE 4 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6419", "STAGE_4_StepNum[3:0]", "STAGE 4 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641A", "STAGE_5_DirCtrl[1:0]", "STAGE 5 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641A", "STAGE_5_Hsft", "STAGE 5 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641A", "STAGE_5_Vsft", "STAGE 5 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641B", "STAGE_5_Hunit[1:0]", "STAGE 5 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641B", "STAGE_5_Vunit[1:0]", "STAGE 5 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641B", "STAGE_5_StepNum[3:0]", "STAGE 5 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641C", "STAGE_6_DirCtrl[1:0]", "STAGE 6 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641C", "STAGE_6_Hsft", "STAGE 6 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641C", "STAGE_6_Vsft", "STAGE 6 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641D", "STAGE_6_Hunit[1:0]", "STAGE 6 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641D", "STAGE_6_Vunit[1:0]", "STAGE 6 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641D", "STAGE_6_StepNum[3:0]", "STAGE 6 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641E", "STAGE_7_DirCtrl[1:0]", "STAGE 7 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641E", "STAGE_7_Hsft", "STAGE 7 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641E", "STAGE_7_Vsft", "STAGE 7 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641F", "STAGE_7_Hunit[1:0]", "STAGE 7 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641F", "STAGE_7_Vunit[1:0]", "STAGE 7 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x641F", "STAGE_7_StepNum[3:0]", "STAGE 7 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6420", "STAGE_8_DirCtrl[1:0]", "STAGE 8 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6420", "STAGE_8_Hsft", "STAGE 8 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6420", "STAGE_8_Vsft", "STAGE 8 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6421", "STAGE_8_Hunit[1:0]", "STAGE 8 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6421", "STAGE_8_Vunit[1:0]", "STAGE 8 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6421", "STAGE_8_StepNum[3:0]", "STAGE 8 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6422", "STAGE_9_DirCtrl[1:0]", "STAGE 9 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6422", "STAGE_9_Hsft", "STAGE 9 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6422", "STAGE_9_Vsft", "STAGE 9 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6423", "STAGE_9_Hunit[1:0]", "STAGE 9 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6423", "STAGE_9_Vunit[1:0]", "STAGE 9 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6423", "STAGE_9_StepNum[3:0]", "STAGE 9 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6424", "STAGE_10_DirCtrl[1:0]", "STAGE 10 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6424", "STAGE_10_Hsft", "STAGE 10 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6424", "STAGE_10_Vsft", "STAGE 10 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6425", "STAGE_10_Hunit[1:0]", "STAGE 10 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6425", "STAGE_10_Vunit[1:0]", "STAGE 10 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6425", "STAGE_10_StepNum[3:0]", "STAGE 10 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6426", "STAGE_11_DirCtrl[1:0]", "STAGE 11 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6426", "STAGE_11_Hsft", "STAGE 11 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6426", "STAGE_11_Vsft", "STAGE 11 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6427", "STAGE_11_Hunit[1:0]", "STAGE 11 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6427", "STAGE_11_Vunit[1:0]", "STAGE 11 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6427", "STAGE_11_StepNum[3:0]", "STAGE 11 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6428", "STAGE_12_DirCtrl[1:0]", "STAGE 12 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6428", "STAGE_12_Hsft", "STAGE 12 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6428", "STAGE_12_Vsft", "STAGE 12 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6429", "STAGE_12_Hunit[1:0]", "STAGE 12 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6429", "STAGE_12_Vunit[1:0]", "STAGE 12 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6429", "STAGE_12_StepNum[3:0]", "STAGE 12 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642A", "STAGE_13_DirCtrl[1:0]", "STAGE 13 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642A", "STAGE_13_Hsft", "STAGE 13 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642A", "STAGE_13_Vsft", "STAGE 13 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642B", "STAGE_13_Hunit[1:0]", "STAGE 13 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642B", "STAGE_13_Vunit[1:0]", "STAGE 13 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642B", "STAGE_13_StepNum[3:0]", "STAGE 13 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642C", "STAGE_14_DirCtrl[1:0]", "STAGE 14 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642C", "STAGE_14_Hsft", "STAGE 14 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642C", "STAGE_14_Vsft", "STAGE 14 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642D", "STAGE_14_Hunit[1:0]", "STAGE 14 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642D", "STAGE_14_Vunit[1:0]", "STAGE 14 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642D", "STAGE_14_StepNum[3:0]", "STAGE 14 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642E", "STAGE_15_DirCtrl[1:0]", "STAGE 15 Shift direction control\n2'b00 : No shift\n2'b01 : Horizontal shift only\n2'b10 : Vertical shift only\n2'b11 : Horizontal and Vertical shift", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642E", "STAGE_15_Hsft", "STAGE 15 Horizontal shift direction\n1'b0 : Right shift\n1'b1 : Left shift", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642E", "STAGE_15_Vsft", "STAGE 15 Vertical shift direction\n1'b0 : Up shift\n1'b1 : Down shift", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642F", "STAGE_15_Hunit[1:0]", "STAGE 15 Horizontal shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642F", "STAGE_15_Vunit[1:0]", "STAGE 15 Vertical shift unit per step\n2'b00 : 0 pixels\n2'b01 : 1 pixels\n2'b10 : 2 pixels\n2'b11 : 3 pixels", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x642F", "STAGE_15_StepNum[3:0]", "STAGE 15 Pixel shift step number in this stage\n4'd0 : This stage disable (skip to next stage)\n4'd1~4'd15 : Shift 1~15 step (time interval per step determined by STEP_INTERVAL)", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6433", "Reserved", "", "4-0", "RW", "0x10", "0x10", "1" ));
		myreg.Add(new TCON_REG ( "ORBIT(0x64)", "ORBIT", "0x6434", "Reserved", "", "5-0", "RW", "0x20", "0x20", "1" ));
        myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2200", "gp1_sel_r_osc_trig", "", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2200", "gp1_sel_f_osc_trig", "", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2201", "gp1_r[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2200", "gp1_r[13:8]", "", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2202", "gp1_sel", "1: gp1 output is goa13, default is gp1", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2203", "gp1_f[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2202", "gp1_f[13:8]", "", "5-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2204", "gp1_pol", "", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2205", "gp1_ST_1st[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2204", "gp1_ST_1st[14:8]", "", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2207", "gp1_EN_1st[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2206", "gp1_EN_1st[14:8]", "", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2209", "gp1_ST_2nd[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2208", "gp1_ST_2nd[14:8]", "", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x220B", "gp1_EN_2nd[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x220A", "gp1_EN_2nd[14:8]", "", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x220D", "gp1_ST_3rd[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x220C", "gp1_ST_3rd[14:8]", "", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x220F", "gp1_EN_3rd[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x220E", "gp1_EN_3rd[14:8]", "", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2211", "gp1_ST_4th[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2210", "gp1_ST_4th[14:8]", "", "6-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "gate_pulse1", "0x2213", "gp1_EN_4th[7:0]", "", "7-0", "RW", "0x00", "0x0", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22C6", "auo_pwm_duty_value_set", "1: from ctg setting, 0: from EM", "6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22C6", "auo_pwm_en", "1: enable pwm function\npwm = (pwm & gate pulse1 ) | gate pulse2\n0: disable\npwm = gate pulse1 | gate pulse2", "4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22C6", "auo_pwm_sp_sel", "auo_pwm_en should be 1\npwm start pulse (gate pulse2) select\n2'd0: gp2_1st\n2'd1: gp2_2nd\n2'd2: gp2_3th\n2'd3: gp2_4th\n", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22CB", "auo_pwm_ST_ln[14:8]", "", "6-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22CC", "auo_pwm_ST_ln[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22CD", "auo_pwm_EN_ln[14:8]", "", "6-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22CE", "auo_pwm_EN_ln[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22CF", "auo_pwm_act_prd_sel[2:0]", "", "7-5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22CF", "auo_pwm_act_prd[10:8]", "", "2-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22D0", "auo_pwm_act_prd[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22D1", "auo_pwm_vblk_prd_sel[2:0]", "", "7-5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22D1", "auo_pwm_vblk_prd[10:8]", "", "2-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22D2", "auo_pwm_vblk_prd[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22D3", "auo_pwm_act[11:8]", "", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22D4", "auo_pwm_act[7:0]", "", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "gate pulse (0x2200~0x22FF)", "auopwn", "0x22D5", "pwm_vs_dly_num[7:0]", "for pwm signal cross frame, delay the reset point to number line", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A00", "reg_sens_hact[7:0]", "Sensing_control regen DE hactive number", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A01", "reg_sens_hact[9:8]", "Sensing_control regen DE hactive number", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A02", "reg_sens_hblk[7:0]", "Sensing_control regen DE hblank number", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A03", "reg_sens_hblk[9:8]", "Sensing_control regen DE hblank number", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A04", "reg_sens_line_num[7:0]", "Number of sensing lines in a sensing frame.\n0~2304: 0~2304 sensing lines\n2305~8191: Reserved", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A05", "reg_sens_subl_num", "Number of sensing sublines(R/G/B) in a sesing line", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A05", "reg_sens_line_num[13:8]", "Number of sensing lines in a sensing frame.\n0~2304: 0~2304 sensing lines\n2305~8191: Reserved", "5-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A06", "reg_sens_gl_num", "Number of sensing gray level points in whole sensing process.\n0: 1 sensing gray level point\n1: 2 sensing gray level points\n2: 3 sensing gray level points\n3: 4 sensing gray level points\n4: 5 sensing gray level points\n5~7: reserved", "7-5", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A06", "reg_chan_num", "Number of channels in a sub-line.\n0~31: 0 ~ 31 channels", "4-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A07", "reg_chan_rpt", "Number of repetitions of channel.\n0: Reserved\n1: Don’ t repeat (total 1 time)\n2: Repeat 1 time (total 2 times)\n3: Repeat 2 times (total 3 times)", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A07", "reg_ad_num", "Number of ADs in a channel.\n0~63: 0 ~ 63 Ads", "5-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A08", "reg_t_crg[7:0]", "Charging time in a channel.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A09", "reg_latch_adjust", "Number of delays adjustment for sensing state_cnt latched point\n0:disable\n1~15: delay 1~15 T", "7-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A09", "reg_t_crg[9:8]", "Charging time in a channel.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A0A", "reg_t_ttl", "TTL time in a channel.\n0: Disable\n1~255: Ts 1 ~ Ts 255", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A0B", "reg_sens_vbk", "Number of sensing lines in v-blanking.\n0~15: 0 ~ 15 sensing lines.", "7-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A0B", "reg_ch_con_ts", "Ts number of the first channel configuration in every sensing line.\n0: Disable\n1~15: Ts 1~Ts 15", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A0C", "reg_f_con_ts", "Ts number of frame configuration in sensing line 1.\n0: Disable\n1~7: Ts 1~Ts 7", "7-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A0C", "reg_l_con_ts", "Ts number of line configuration in every sensing line.\n0: Disable\n1~7: Ts 1~Ts 7", "3-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A0D", "reg_f_lth", "Determine frame configuration data length.\nThis data after frame configuration command code.\nF_LTH = “0”, frame configuration data is F_D0\nF _LTH = “1”, frame configuration data is F_D0+F_D1\nF _LTH = “2”, frame configuration data is F_D0+F_D1+F_D2\n: :\nF _LTH = “29”, frame configuration data is F_D0+F_D1+ … +F_D29\n", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A0E", "reg_l_lth", "Determine line configuration data length.\nThis data after line configuration command code.\nL_LTH = “0”, line configuration data is L_D0\nL_LTH = “1”, line configuration data is L_D0+L_D1\nL_LTH = “2”, line configuration data is L_D0+L_D1+L_D2\n: :\nL_D _LTH = “52”, line configuration data is L_D0+L_D1+ … +L_D52", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A0F", "reg_ch_lth", "Determine channel configuration data length\nThis data after channel configuration command code.\nCH _LTH = “0”, channel configuration data is CH0_GL1~5_R/G/B\nCH _LTH = “1”, channel configuration data is CH0_GL1~5_R/G/B + CH1_GL1~5_R/G/B\n:\nCH _LTH = “5”, channel configuration data is CH0_GL1~5_R/G/B + CH1_GL1~5_R/G/B + … + CH5_GL1~5_R/G/B", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A10", "reg_ch_inc_md", "Determine the rule of first data value in channel configuration via increment manner. CH0_INC is used to define the increment case.\nCase 1\nCH0_INC[0] = “0”, CH0_GL1~5_R/G/B[4:0] data value Increment by 1\n1st : CH0_GL1~5_R/G/B[4:0] = “00000”\n2nd: CH0_GL1~5_R/G/B[4:0] = “00001”\n3rd : CH0_GL1~5_R/G/B[4:0] = “00010”\n:\nCth: CH0_GL1~5_R/G/B[4:0] = “11110”\nCase 2\nCH0_INC[0] = “1”, CH0_GL1~5_R/G/B[4:0] data value Increment by 3\n1st : CH0_GL1~5_R/G/B[4:0] = “00000”\n2nd : CH0_GL1~5_R/G/B[4:0] = “00011”\n3rd : CH0_GL1~5_R/G/B[4:0] = “00110”\n:\nCth: CH0_GL1~5_R/G/B[4:0] = “11110”\nNote : Cth value is equal to CHAN_NUM[4:0]", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A10", "reg_f_cmd[8]", "Sensing frame configuration command code", "2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A10", "reg_l_cmd[8]", "Sensing line configuration command code", "1", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A10", "reg_ch_cmd[8]", "Sensing channel configuration command code", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A11", "reg_f_cmd[7:0]", "Sensing frame configuration command code", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A12", "reg_l_cmd[7:0]", "Sensing line configuration command code", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A13", "reg_ch_cmd[7:0]", "Sensing channel configuration command code", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A14", "reg_f_data_00", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A15", "reg_f_data_01", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A16", "reg_f_data_02", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A17", "reg_f_data_03", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A18", "reg_f_data_04", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A19", "reg_f_data_05", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A1A", "reg_f_data_06", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A1B", "reg_f_data_07", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A1C", "reg_f_data_08", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A1D", "reg_f_data_09", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A1E", "reg_f_data_10", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A1F", "reg_f_data_11", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A20", "reg_f_data_12", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A21", "reg_f_data_13", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A22", "reg_f_data_14", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A23", "reg_f_data_15", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A24", "reg_f_data_16", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A25", "reg_f_data_17", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A26", "reg_f_data_18", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A27", "reg_f_data_19", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A28", "reg_f_data_20", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A29", "reg_f_data_21", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A2A", "reg_f_data_22", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A2B", "reg_f_data_23", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A2C", "reg_f_data_24", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A2D", "reg_f_data_25", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A2E", "reg_f_data_26", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A2F", "reg_f_data_27", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A30", "reg_f_data_28", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A31", "reg_f_data_29", "Sensing frame configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A32", "reg_l_data_00", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A33", "reg_l_data_01", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A34", "reg_l_data_02", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A35", "reg_l_data_03", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A36", "reg_l_data_04", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A37", "reg_l_data_05", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A38", "reg_l_data_06", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A39", "reg_l_data_07", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A3A", "reg_l_data_08", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A3B", "reg_l_data_09", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A3C", "reg_l_data_10", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A3D", "reg_l_data_11", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A3E", "reg_l_data_12", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A3F", "reg_l_data_13", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A40", "reg_l_data_14", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A41", "reg_l_data_15", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A42", "reg_l_data_16", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A43", "reg_l_data_17", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A44", "reg_l_data_18", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A45", "reg_l_data_19", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A46", "reg_l_data_20", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A47", "reg_l_data_21", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A48", "reg_l_data_22", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A49", "reg_l_data_23", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A4A", "reg_l_data_24", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A4B", "reg_l_data_25", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A4C", "reg_l_data_26", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A4D", "reg_l_data_27", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A4E", "reg_l_data_28", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A4F", "reg_l_data_29", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A50", "reg_l_data_30", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A51", "reg_l_data_31", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A52", "reg_l_data_32", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A53", "reg_l_data_33", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A54", "reg_l_data_34", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A55", "reg_l_data_35", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A56", "reg_l_data_36", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A57", "reg_l_data_37", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A58", "reg_l_data_38", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A59", "reg_l_data_39", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A5A", "reg_l_data_40", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A5B", "reg_l_data_41", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A5C", "reg_l_data_42", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A5D", "reg_l_data_43", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A5E", "reg_l_data_44", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A5F", "reg_l_data_45", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A60", "reg_l_data_46", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A61", "reg_l_data_47", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A62", "reg_l_data_48", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A63", "reg_l_data_49", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A64", "reg_l_data_50", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A65", "reg_l_data_51", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A66", "reg_l_data_52", "Sensing line configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A67", "reg_ch0_gl1_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A68", "reg_ch1_gl1_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A69", "reg_ch2_gl1_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A6A", "reg_ch3_gl1_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A6B", "reg_ch4_gl1_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A6C", "reg_ch5_gl1_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A6D", "reg_ch0_gl1_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A6E", "reg_ch1_gl1_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A6F", "reg_ch2_gl1_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A70", "reg_ch3_gl1_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A71", "reg_ch4_gl1_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A72", "reg_ch5_gl1_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A73", "reg_ch0_gl1_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A74", "reg_ch1_gl1_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A75", "reg_ch2_gl1_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A76", "reg_ch3_gl1_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A77", "reg_ch4_gl1_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A78", "reg_ch5_gl1_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A79", "reg_ch0_gl2_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A7A", "reg_ch1_gl2_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A7B", "reg_ch2_gl2_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A7C", "reg_ch3_gl2_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A7D", "reg_ch4_gl2_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A7E", "reg_ch5_gl2_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A7F", "reg_ch0_gl2_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A80", "reg_ch1_gl2_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A81", "reg_ch2_gl2_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A82", "reg_ch3_gl2_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A83", "reg_ch4_gl2_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A84", "reg_ch5_gl2_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A85", "reg_ch0_gl2_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A86", "reg_ch1_gl2_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A87", "reg_ch2_gl2_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A88", "reg_ch3_gl2_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A89", "reg_ch4_gl2_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A8A", "reg_ch5_gl2_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A8B", "reg_ch0_gl3_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A8C", "reg_ch1_gl3_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A8D", "reg_ch2_gl3_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A8E", "reg_ch3_gl3_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A8F", "reg_ch4_gl3_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A90", "reg_ch5_gl3_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A91", "reg_ch0_gl3_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A92", "reg_ch1_gl3_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A93", "reg_ch2_gl3_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A94", "reg_ch3_gl3_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A95", "reg_ch4_gl3_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A96", "reg_ch5_gl3_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A97", "reg_ch0_gl3_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A98", "reg_ch1_gl3_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A99", "reg_ch2_gl3_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A9A", "reg_ch3_gl3_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A9B", "reg_ch4_gl3_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A9C", "reg_ch5_gl3_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A9D", "reg_ch0_gl4_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A9E", "reg_ch1_gl4_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6A9F", "reg_ch2_gl4_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AA0", "reg_ch3_gl4_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AA1", "reg_ch4_gl4_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AA2", "reg_ch5_gl4_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AA3", "reg_ch0_gl4_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AA4", "reg_ch1_gl4_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AA5", "reg_ch2_gl4_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AA6", "reg_ch3_gl4_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AA7", "reg_ch4_gl4_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AA8", "reg_ch5_gl4_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AA9", "reg_ch0_gl4_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AAA", "reg_ch1_gl4_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AAB", "reg_ch2_gl4_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AAC", "reg_ch3_gl4_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AAD", "reg_ch4_gl4_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AAE", "reg_ch5_gl4_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AAF", "reg_ch0_gl5_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AB0", "reg_ch1_gl5_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AB1", "reg_ch2_gl5_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AB2", "reg_ch3_gl5_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AB3", "reg_ch4_gl5_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AB4", "reg_ch5_gl5_r", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AB5", "reg_ch0_gl5_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AB6", "reg_ch1_gl5_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AB7", "reg_ch2_gl5_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AB8", "reg_ch3_gl5_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AB9", "reg_ch4_gl5_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ABA", "reg_ch5_gl5_g", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ABB", "reg_ch0_gl5_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ABC", "reg_ch1_gl5_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ABD", "reg_ch2_gl5_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ABE", "reg_ch3_gl5_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ABF", "reg_ch4_gl5_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AC0", "reg_ch5_gl5_b", "Sensing channel configuration data", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AC1", "reg_tadcsr_r_ts[9:8]", "The first ADC_SR rising Ts number after channel configuration.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AC2", "reg_tadcsr_r_ts[7:0]", "The first ADC_SR rising Ts number after channel configuration.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AC3", "reg_tadcsr_w_pix[10:8]", "ADC_SR pulse width.\n0:Disable\n1~ 2047: Pixel 1 ~ Pixel 2047", "2-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AC4", "reg_tadcsr_w_pix[7:0]", "ADC_SR pulse width.\n0:Disable\n1~ 2047: Pixel 1 ~ Pixel 2047", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AC5", "reg_tmlvclk", "Number of MLVCLK when receiving sensing data.\n0: 8\n1: 10\n2: 12\n3: reserved", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AC5", "reg_tmlvclk_pre", "Number of MLVCLK before receiving sensing data.\n0: Disable\n1~3: 1 MLVCLK ~ 3 MLVCLK", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AC6", "reg_tadc_end", "Number of extra MLVCLK after last TMLVCLK.\n0: Disable\n1~31: 1 MLVCLK ~ 31 MLVCLK", "4-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AC9", "reg_pat_add_gl0_b", "Determine the step differece for Sensing Pattern Gen for Grey-Level (gl0~4) and Subline (r/g/b) ", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AC9", "reg_pat_add_gl0_g", "Determine the step differece for Sensing Pattern Gen for Grey-Level (gl0~4) and Subline (r/g/b) ", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AC9", "reg_pat_add_gl0_r", "Determine the step differece for Sensing Pattern Gen for Grey-Level (gl0~4) and Subline (r/g/b) ", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AC9", "reg_tsrst_r_ts[9:8]", "S_RST rising Ts number after channel configuration.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ACA", "reg_tsrst_r_ts[7:0]", "S_RST rising Ts number after channel configuration.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ACB", "reg_pat_add_gl1_b", "Determine the step differece for Sensing Pattern Gen for Grey-Level (gl0~4) and Subline (r/g/b) ", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ACB", "reg_pat_add_gl1_g", "Determine the step differece for Sensing Pattern Gen for Grey-Level (gl0~4) and Subline (r/g/b) ", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ACB", "reg_pat_add_gl1_r", "Determine the step differece for Sensing Pattern Gen for Grey-Level (gl0~4) and Subline (r/g/b) ", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ACB", "reg_tsrst_f_ts[9:8]", "S_RST falling Ts number after channel configuration.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ACC", "reg_tsrst_f_ts[7:0]", "S_RST falling Ts number after channel configuration.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ACD", "reg_pat_add_gl2_b", "Determine the step differece for Sensing Pattern Gen for Grey-Level (gl0~4) and Subline (r/g/b) ", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ACD", "reg_pat_add_gl2_g", "Determine the step differece for Sensing Pattern Gen for Grey-Level (gl0~4) and Subline (r/g/b) ", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ACD", "reg_pat_add_gl2_r", "Determine the step differece for Sensing Pattern Gen for Grey-Level (gl0~4) and Subline (r/g/b) ", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ACD", "reg_tintrst_r_ts[9:8]", "INT_RST rising Ts number after channel configuration.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ACE", "reg_tintrst_r_ts[7:0]", "INT_RST rising Ts number after channel configuration.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ACF", "reg_pat_add_gl3_b", "Determine the step differece for Sensing Pattern Gen for Grey-Level (gl0~4) and Subline (r/g/b) ", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ACF", "reg_pat_add_gl3_g", "Determine the step differece for Sensing Pattern Gen for Grey-Level (gl0~4) and Subline (r/g/b) ", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ACF", "reg_pat_add_gl3_r", "Determine the step differece for Sensing Pattern Gen for Grey-Level (gl0~4) and Subline (r/g/b) ", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ACF", "reg_tintrst_f_ts[9:8]", "INT_RST falling Ts number after channel configuration.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AD0", "reg_tintrst_f_ts[7:0]", "INT_RST falling Ts number after channel configuration.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AD1", "reg_pat_add_gl4_b", "Determine the step differece for Sensing Pattern Gen for Grey-Level (gl0~4) and Subline (r/g/b) ", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AD1", "reg_pat_add_gl4_g", "Determine the step differece for Sensing Pattern Gen for Grey-Level (gl0~4) and Subline (r/g/b) ", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AD1", "reg_pat_add_gl4_r", "Determine the step differece for Sensing Pattern Gen for Grey-Level (gl0~4) and Subline (r/g/b) ", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AD1", "reg_tint_r_ts[9:8]", "INT rising Ts number after channel configuration.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AD2", "reg_tint_r_ts[7:0]", "INT rising Ts number after channel configuration.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AD3", "reg_tint_f_ts[9:8]", "INT falling Ts number after channel configuration.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AD4", "reg_tint_f_ts[7:0]", "INT falling Ts number after channel configuration.\n0: Disable\n1~1023: Ts 1 ~ Ts 1023", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AD7", "reg_sens_vtot_p1[15:8]", "Sensing_control regen v_total number part 1\nV_total = V_total_p1 * V_total_p2", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AD8", "reg_sens_vtot_p1[7:0]", "Sensing_control regen v_total number part 1\nV_total = V_total_p1 * V_total_p2", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AD9", "reg_sens_vtot_p2[15:8]", "Sensing_control regen v_total number part 2\nV_total = V_total_p1 * V_total_p2", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ADA", "reg_sens_vtot_p2[7:0]", "Sensing_control regen v_total number part 2\nV_total = V_total_p1 * V_total_p2", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ADB", "reg_tmlv_period[10:8]", "Number of MLV_CLK output period unit packet clock", "2-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ADC", "reg_tmlv_period[7:0]", "Number of MLV_CLK output period unit packet clock", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ADD", "reg_xstb_st_pix", "Pixel number of XSTB_START width.\n0:Disable\n1~255: 1 Piexl ~ 255 Pixels", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ADE", "reg_xstb_lat_pix", "Pixel number of XSTB_LATCH width.\n0:Disable\n1~255: 1 Pixel ~ 255 Pixels", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ADF", "reg_xstb_lat_en", "Determine whether XSTB_LATCH is enabling or not when combine with XSTB_START.\n0: Disable\n1: Enable", "7", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6ADF", "reg_t_latch[10:8]", "XSTB_START signal to XSTB_LATCH signal length.\n0~2047: 0 Pixel ~ 2047 Pixels", "2-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AE0", "reg_t_latch[7:0]", "XSTB_START signal to XSTB_LATCH signal length.\n0~2047: 0 Pixel ~ 2047 Pixels", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AE1", "reg_pat_gl0_r[7:0]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AE2", "reg_pat_gl1_r[7:0]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AE3", "reg_pat_gl2_r[7:0]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AE4", "reg_pat_gl3_r[7:0]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AE5", "reg_pat_gl3_r[9:8]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AE5", "reg_pat_gl2_r[9:8]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AE5", "reg_pat_gl1_r[9:8]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AE5", "reg_pat_gl0_r[9:8]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AE6", "reg_pat_gl4_r[7:0]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AE7", "reg_pat_gl0_g[7:0]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AE8", "reg_pat_gl1_g[7:0]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AE9", "reg_pat_gl2_g[7:0]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AEA", "reg_pat_gl2_g[9:8]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AEA", "reg_pat_gl1_g[9:8]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AEA", "reg_pat_gl0_g[9:8]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AEA", "reg_pat_gl4_r[9:8]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AEB", "reg_pat_gl3_g[7:0]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AEC", "reg_pat_gl4_g[7:0]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AED", "reg_pat_gl0_b[7:0]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AEE", "reg_pat_gl1_b[7:0]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AEF", "reg_pat_gl1_b[9:8]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-6", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AEF", "reg_pat_gl0_b[9:8]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AEF", "reg_pat_gl4_g[9:8]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AEF", "reg_pat_gl3_g[9:8]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AF0", "reg_pat_gl2_b[7:0]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AF1", "reg_pat_gl3_b[7:0]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AF2", "reg_pat_gl4_b[7:0]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AF3", "reg_pat_gl4_b[9:8]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "5-4", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AF3", "reg_pat_gl3_b[9:8]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "3-2", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AF3", "reg_pat_gl2_b[9:8]", "Sensing control test pattern registers for grey_level gl (0~4) / subline (R/G/B)", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AF4", "reg_cal_sel", "Sensing data calibration enable\n0: bypass calibration\n1: enable calibration", "0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AF5", "reg_t_bac[7:0]", "XSTB_START signal to BAC length.\n0~2047: 0 Pixel ~ 2047 Pixels", "7-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AF6", "reg_t_bac[10:8]", "XSTB_START signal to BAC length.\n0~2047: 0 Pixel ~ 2047 Pixels", "1-0", "RW", "0x00", "0x00", "0" ));
		myreg.Add(new TCON_REG ( "SENS_CTRL", "SEN_CTRL", "0x6AFF", "reg_sens_en", "SENSING_mode ENABLE signal", "7", "RW", "0x00", "0x00", "0" ));
		

}
